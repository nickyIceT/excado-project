{"version":3,"sources":["../../../../src/client/components/MapWithSearchBox/MapWithSearchBox.tsx"],"names":["MapWithSearchBox","googleMapURL","config","googleMaps","apiKey","loadingElement","height","textAlign","containerElement","mapElement","componentWillMount","refs","setState","bounds","center","props","geocode","lat","lng","markers","position","onMapMounted","ref","map","onBoundsChanged","getBounds","getCenter","onSearchBoxMounted","searchBox","onPlacesChanged","places","getPlaces","newAddress","indexOf","name","selectAddress","geometry","location","window","google","maps","LatLngBounds","forEach","place","viewport","union","extend","nextMarkers","nextCenter","state","withScriptjs","withGoogleMap","ControlPosition","TOP_LEFT","address","boxSizing","border","width","marginTop","marginLeft","padding","borderRadius","boxShadow","fontSize","outline","textOverflow","marker","index"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { Spin } from 'antd';\nimport { compose, withProps, lifecycle } from 'recompose';\nimport { withScriptjs, withGoogleMap, GoogleMap, Marker } from 'react-google-maps';\nimport SearchBox from 'react-google-maps/lib/components/places/SearchBox';\nimport { get } from 'lodash';\nimport './MapWithSearchBox.less';\nimport { config } from '@client/config';\n\nconst MapWithSearchBox: any = compose(\n  withProps({\n    googleMapURL: `https://maps.googleapis.com/maps/api/js?key=${config.googleMaps.apiKey}&libraries=geometry,drawing,places`,\n    loadingElement: <div style={{\n      height: `100%`,\n      textAlign: 'center',\n    }}>\n      <Spin />\n    </div>,\n    containerElement: <div style={{ height: `400px` }} />,\n    mapElement: <div style={{ height: `100%` }} />,\n  }),\n  lifecycle({\n    componentWillMount() {\n      const refs: any = {};\n\n      this.setState({\n        bounds: null,\n        center: (this.props as any).geocode ? (this.props as any).geocode : {lat: 21.0277644, lng: 105.8341598},\n        markers: [{position: (this.props as any).geocode ? (this.props as any).geocode : {lat: 21.0277644, lng: 105.8341598}}],\n        onMapMounted: (ref: any) => {\n          refs.map = ref;\n        },\n        onBoundsChanged: () => {\n          this.setState({\n            bounds: refs.map.getBounds(),\n            center: refs.map.getCenter(),\n          });\n        },\n        onSearchBoxMounted: (ref: any) => {\n          refs.searchBox = ref;\n        },\n        onPlacesChanged: () => {\n          const places = refs.searchBox.getPlaces();\n\n          const newAddress = places[0]['formatted_address'].indexOf(places[0].name) > -1 ? places[0]['formatted_address'] : `${places[0].name}, ${places[0]['formatted_address']}`;\n          (this.props as any).selectAddress('address', newAddress);\n          (this.props as any).selectAddress('geocode', {lng: places[0].geometry.location.lng(), lat: places[0].geometry.location.lat()});\n\n          const bounds = new (window as any).google.maps.LatLngBounds();\n\n          places.forEach((place: any) => {\n            if (place.geometry.viewport) {\n              bounds.union(place.geometry.viewport);\n            } else {\n              bounds.extend(place.geometry.location);\n            }\n          });\n          const nextMarkers = places.map((place: any) => ({\n            position: place.geometry.location,\n          }));\n          const nextCenter = get(nextMarkers, '0.position', (this.state as any).center);\n\n          this.setState({\n            center: nextCenter,\n            markers: nextMarkers,\n          });\n        },\n      });\n    },\n  }),\n  withScriptjs,\n  withGoogleMap,\n)((props: any) => {\n  return (\n    <GoogleMap\n      ref={props.onMapMounted}\n      defaultZoom={16}\n      center={props.center}\n      onBoundsChanged={props.onBoundsChanged}\n    >\n      <SearchBox\n        ref={props.onSearchBoxMounted}\n        bounds={props.bounds}\n        controlPosition={(window as any).google.maps.ControlPosition.TOP_LEFT}\n        onPlacesChanged={props.onPlacesChanged}\n      >\n        <input\n          type='text'\n          defaultValue={(props as any).address}\n          placeholder='Nhập địa chỉ cửa hàng ...'\n          style={{\n            boxSizing: `border-box`,\n            border: `1px solid transparent`,\n            width: `240px`,\n            height: `32px`,\n            marginTop: `10px`,\n            marginLeft: `10px`,\n            padding: `0 12px`,\n            borderRadius: `3px`,\n            boxShadow: `0 2px 6px rgba(0, 0, 0, 0.3)`,\n            fontSize: `14px`,\n            outline: `none`,\n            textOverflow: `ellipses`,\n          }}\n        />\n      </SearchBox>\n      {props.markers.map((marker: any, index: any) =>\n        <Marker key={index} position={marker.position} draggable={true} />,\n      )}\n    </GoogleMap>\n  );\n},\n);\n\nexport default MapWithSearchBox;\n"],"file":"MapWithSearchBox.js"}