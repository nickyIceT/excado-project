{"version":3,"sources":["../../../../src/client/components/CommonLayout/ForgotPasswordModal.tsx"],"names":["BaseForgotPasswordModal","loading","gettingCode","phone","phoneNo","countryCode","values","setState","fullPhoneNumber","serviceProxy","checkPhoneNoExist","phoneNoExistResult","phoneNoExist","appVerifier","window","recaptchaVerifier","firebase","auth","signInWithPhoneNumber","confirmationResult","success","props","t","error","code","type","sendPasswordResetEmail","email","onCancel","confirm","verifyCode","currentUser","getIdToken","idToken","fetch","config","url","api","method","headers","body","JSON","stringify","newPassword","password","signOut","message","translate","ForgotEmailPasswordValidateSchema","yup","object","shape","string","required","matches","regex","PhoneNumberValidateSchema","ForgotPhonePasswordValidateSchema","max","confirmPassword","formikBag","handleOk","resetForm","context","visible","handleSubmit","state","errors","undefined","handleChange","fieldName","validateSchema","color","getCode","width","handleBlur","setFieldError","textAlign","React","Component","ForgotPasswordModal","create"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { Modal, Form, Input, Icon, message, Select, Button } from 'antd';\nimport { FormComponentProps } from 'antd/lib/form';\nimport firebase from 'firebase/app';\nimport 'firebase/auth';\nimport { initializeFirebaseApp, validateField } from '@client/core';\nimport * as yup from 'yup';\nimport { withNamespaces } from '@client/i18n';\nimport { config } from '@client/config';\nimport { Formik, FormikContext } from 'formik';\nimport { getServiceProxy } from '@client/services';\nimport './ForgotPasswordModal.less';\n\ninterface Props extends FormComponentProps {\n  type: 'phone'|'email';\n  visible: boolean;\n  onCancel: () => void;\n  t: (key: string) => string;\n}\ninterface State {\n  loading: boolean;\n  gettingCode: boolean;\n  phone: {\n    phoneNo: string;\n    countryCode: string;\n  };\n}\nclass BaseForgotPasswordModal extends React.Component<Props, State> {\n  state: State = {\n    loading: false,\n    gettingCode: false,\n    phone: {\n      phoneNo: '',\n      countryCode: '',\n    },\n  };\n\n  getCode = async (values: {countryCode: string; phoneNo: string}) => {\n    this.setState({\n      phone: {\n        phoneNo: values.phoneNo,\n        countryCode: values.countryCode,\n      },\n      gettingCode: true,\n    });\n\n    try {\n      const fullPhoneNumber = `${values.countryCode}${values.phoneNo}`;\n      const serviceProxy = getServiceProxy();\n      const phoneNoExistResult = await serviceProxy.checkPhoneNoExist(fullPhoneNumber);\n      if (phoneNoExistResult.phoneNoExist) {\n        const appVerifier = (window as any).recaptchaVerifier;\n        const confirmationResult = await firebase.auth().signInWithPhoneNumber(fullPhoneNumber, appVerifier);\n        (window as any).confirmationResult = confirmationResult;\n        message.success(this.props.t('common:sendVerifyCodeSuccess'));\n        this.setState({\n          gettingCode: false,\n        });\n      } else {\n        this.setState({\n          gettingCode: false,\n        });\n        message.error(this.props.t('common:notFoundPhoneNo'));\n      }\n    } catch (error) {\n      message.error(this.props.t(error.code));\n      this.setState({\n        gettingCode: false,\n      });\n    }\n  }\n\n  handleOk = async (values: {[key: string]: any}) => {\n    try {\n      if (this.props.type === 'email') {\n        initializeFirebaseApp();\n        firebase.auth().sendPasswordResetEmail(values.email);\n        message.success(this.props.t('common:send-reset-password-email-success'));\n        this.props.onCancel();\n      } else {\n        if (await (window as any).confirmationResult) {\n          this.setState({\n            loading: true,\n          });\n\n          await (window as any).confirmationResult.confirm(values.verifyCode);\n          const idToken = await firebase.auth().currentUser!.getIdToken();\n          await fetch(`${config.url.api}/auth/update-password`, {\n            method: 'POST',\n            headers: {\n              'Content-Type': 'application/json',\n            },\n            body: JSON.stringify({\n              idToken,\n              newPassword: values.password,\n            }),\n          });\n          firebase.auth().signOut();\n\n          message.success(this.props.t('common:update-password-success'));\n          this.setState({\n            loading: false,\n          });\n          this.props.onCancel();\n        } else {\n          message.error(this.props.t('common:invalid-verify-code'));\n        }\n      }\n    } catch (error) {\n      message.error(this.props.t(`common:${error.code || error.message}`));\n      this.setState({\n        loading: false,\n      });\n    }\n  };\n\n  render () {\n    const translate = this.props.t;\n\n    const ForgotEmailPasswordValidateSchema = yup.object().shape({\n      email: yup.string()\n        .required(translate('common:pleaseInputVerifyCode'))\n        .matches(config.regex.email, translate('common:invalidEmail')),\n    });\n\n    const PhoneNumberValidateSchema = yup.object().shape({\n      countryCode: yup.string()\n        .required(translate('common:pleaseInputCountryCode')),\n      phoneNo: yup.string()\n        .matches(config.regex.phone, translate('common:invalidPhoneNo'))\n        .required(translate('common:pleaseInputPhoneNo')),\n    });\n\n    const ForgotPhonePasswordValidateSchema = yup.object().shape({\n      verifyCode: yup.string()\n        .required(translate('common:pleaseInputVerifyCode')),\n      password: yup.string()\n        .required(translate('common:pleaseInputPassword'))\n        .max(100, translate('common:passwordTooLong'))\n        .matches(config.regex.password, translate('common:invalidPassword')),\n      confirmPassword: yup.string()\n        .required(translate('common:pleaseConfirmPassword')),\n    });\n\n    if (this.props.type === 'email') {\n      return (\n        <Formik\n          initialValues={{\n            email: '',\n          }}\n          enableReinitialize={true}\n          validateOnChange={false}\n          validationSchema={ForgotEmailPasswordValidateSchema}\n          onSubmit={async (values, formikBag) => {\n            await this.handleOk(values);\n            formikBag.resetForm({\n              email: '',\n            });\n          }}\n        >\n          {(context: FormikContext<{email: string}>) => (\n            <Modal\n              title={translate('common:forgotPassword')}\n              visible={this.props.visible}\n              onOk={context.handleSubmit}\n              onCancel={this.props.onCancel}\n              confirmLoading={this.state.loading}\n              okText={translate('common:send-reset-password-email')}\n              cancelText={translate('common:cancel')}\n            >\n              <Form onSubmit={context.handleSubmit}>\n                <Form.Item\n                  label={translate('common:your-email')}\n                  validateStatus={context.errors.email ? 'error' : undefined}\n                  help={context.errors.email}\n                >\n                  <Input\n                    value={context.values.email}\n                    onChange={context.handleChange}\n                    onBlur={() => validateField({\n                      fieldName: 'email',\n                      validateSchema: ForgotEmailPasswordValidateSchema,\n                      context,\n                    })}\n                    name='email'\n                    prefix={<Icon type='mail' style={{ color: 'rgba(0,0,0,.25)' }} />}\n                    placeholder={translate('common:your-email')}\n                  />\n                </Form.Item>\n              </Form>\n            </Modal>\n          )}\n        </Formik>\n      );\n    } else {\n      return (\n        <Modal\n          className='reset-password-modal'\n          visible={this.props.visible}\n          footer={null}\n          onCancel={this.props.onCancel}\n          destroyOnClose={true}\n        >\n          <Formik\n            initialValues={{\n              countryCode: '+84',\n              phoneNo: '',\n            }}\n            validateOnChange={false}\n            validationSchema={PhoneNumberValidateSchema}\n            onSubmit={async (values) => {\n              await this.getCode(values);\n            }}\n          >\n            {(context: FormikContext<{\n              countryCode: string;\n              phoneNo: string;\n            }>) => (\n              <Form.Item validateStatus={context.errors.phoneNo || context.errors.countryCode ? 'error' : undefined} help={context.errors.phoneNo || context.errors.countryCode}>\n                <Input.Search\n                  addonBefore={(\n                    <Select style={{ width: 120 }} value={context.values.countryCode} onChange={context.handleChange}>\n                      <Select.Option value='+84'>VN (+84)</Select.Option>\n                    </Select>\n                  )}\n                  value={context.values.phoneNo}\n                  onChange={context.handleChange}\n                  onBlur={context.handleBlur}\n                  placeholder={translate('common:phoneNo')}\n                  enterButton={<Button type='primary' loading={this.state.gettingCode}>{translate('common:sendCode')}</Button>}\n                  onSearch={context.handleSubmit as any}\n                  name='phoneNo'\n                />\n              </Form.Item>\n            )}\n          </Formik>\n\n          <Formik\n            initialValues={{\n              verifyCode: '',\n              password: '',\n              confirmPassword: '',\n            }}\n            validateOnChange={false}\n            validationSchema={ForgotPhonePasswordValidateSchema}\n            onSubmit={async (values, formikBag) => {\n              await this.handleOk(values);\n              formikBag.resetForm({\n                verifyCode: '',\n                password: '',\n                confirmPassword: '',\n              });\n            }}\n          >\n            {(context: FormikContext<{\n              verifyCode: string;\n              password: string;\n              confirmPassword: string;\n            }>) => (\n              <Form onSubmit={context.handleSubmit}>\n                <Form.Item validateStatus={context.errors.verifyCode ? 'error' : undefined} help={context.errors.verifyCode}>\n                  <Input\n                    value={context.values.verifyCode}\n                    onChange={context.handleChange}\n                    onBlur={() => validateField({\n                      fieldName: 'verifyCode',\n                      validateSchema: ForgotPhonePasswordValidateSchema,\n                      context,\n                    })}\n                    placeholder={translate('common:verifyCode')}\n                    name='verifyCode'\n                  />\n                </Form.Item>\n\n                <Form.Item validateStatus={context.errors.password ? 'error' : undefined} help={context.errors.password}>\n                  <Input\n                    value={context.values.password}\n                    onChange={context.handleChange}\n                    onBlur={() => validateField({\n                      fieldName: 'password',\n                      validateSchema: ForgotPhonePasswordValidateSchema,\n                      context,\n                    })}\n                    placeholder={translate('common:password')}\n                    type='password'\n                    name='password'\n                  />\n                </Form.Item>\n\n                <Form.Item validateStatus={context.errors.confirmPassword ? 'error' : undefined} help={context.errors.confirmPassword}>\n                  <Input\n                    value={context.values.confirmPassword}\n                    onChange={context.handleChange}\n                    onBlur={() => {\n                      if (context.values.confirmPassword && context.values.confirmPassword !== context.values.password) {\n                        context.setFieldError('confirmPassword', translate('common:confirmPasswordDidntMatch'));\n                      } else {\n                        validateField({\n                          fieldName: 'confirmPassword',\n                          validateSchema: ForgotPhonePasswordValidateSchema,\n                          context,\n                        });\n                      }\n                    }}\n                    placeholder={translate('common:confirmPassword')}\n                    type='password'\n                    name='confirmPassword'\n                  />\n                </Form.Item>\n\n                <Form.Item className='button-container' style={{textAlign: 'right'}}>\n                  <Button type='primary' className='login-button' htmlType='submit' loading={this.state.loading}>{translate('common:update-password')}</Button>\n                  <br />\n                </Form.Item>\n              </Form>\n            )}\n          </Formik>\n        </Modal>\n      );\n    }\n  }\n}\n\nexport const ForgotPasswordModal = withNamespaces('common')(Form.create()(BaseForgotPasswordModal));\n"],"file":"ForgotPasswordModal.js"}