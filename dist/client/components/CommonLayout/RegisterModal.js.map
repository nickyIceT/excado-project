{"version":3,"sources":["../../../../src/client/components/CommonLayout/RegisterModal.tsx"],"names":["BaseRegisterModal","activeTab","phone","countryCode","phoneNo","loading","register","getVerifyCode","setState","values","state","fullPhoneNumber","serviceProxy","checkPhoneNoExist","phoneNoExistResult","phoneNoExist","appVerifier","window","recaptchaVerifier","firebase","auth","signInWithPhoneNumber","confirmationResult","success","props","t","error","code","createUserWithEmailAndPassword","email","password","newUser","user","sendEmailVerification","currentUser","getIdToken","idToken","registerUser","confirm","verifyCode","updateEmail","replace","updatePassword","provider","FacebookAuthProvider","signInWithPopup","GoogleAuthProvider","translate","EmailValidateSchema","yup","object","shape","string","required","matches","config","regex","max","confirmPassword","PhoneNumberValidateSchema","VerifyCodeValidateSchema","profileState","modal","profileReducers","closeModal","modalName","activeTabChange","getCode","context","errors","undefined","width","handleChange","handleBlur","handleSubmit","formikBag","resetForm","fieldName","validateSchema","setFieldError","textAlign","loginWithFacebook","loginWithGoogle","color","cursor","openModal","display","React","Component","RegisterModal"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { Modal, Input, Button, Row, Col, message, Tabs, Icon, Form, Select } from 'antd';\nimport './RegisterModal.less';\nimport { ProfileState, ProfileEffects, ProfileReducers } from '@client/store';\nimport firebase from 'firebase/app';\nimport 'firebase/auth';\nimport { getServiceProxy } from '@client/services';\nimport { submitLoginForm, validateField } from '@client/core';\nimport { Formik, FormikContext } from 'formik';\nimport * as yup from 'yup';\nimport { withNamespaces } from '@client/i18n';\nimport { config } from '@client/config';\n\ninterface Props {\n  profileState: ProfileState;\n  profileReducers: ProfileEffects & ProfileReducers;\n  t: (key: string) => string;\n}\ninterface State {\n  activeTab: 'email'|'phone';\n  phone: {\n    countryCode: string;\n    phoneNo: string;\n  };\n  loading: {\n    register: boolean;\n    getVerifyCode: boolean;\n  };\n}\n\nclass BaseRegisterModal extends React.Component<Props, State> {\n  state: State = {\n    activeTab: 'phone',\n    phone: {\n      countryCode: '',\n      phoneNo: '',\n    },\n    loading: {\n      register: false,\n      getVerifyCode: false,\n    },\n  };\n\n  activeTabChange = ({ activeTab }: {activeTab: 'email'|'phone'}) => {\n    this.setState({\n      activeTab,\n    });\n  }\n\n  getCode = async (values: {countryCode: string; phoneNo: string}) => {\n    this.setState({\n      phone: {\n        phoneNo: values.phoneNo,\n        countryCode: values.countryCode,\n      },\n      loading: {\n        ...this.state.loading,\n        getVerifyCode: true,\n      },\n    });\n\n    try {\n      const fullPhoneNumber = `${values.countryCode}${values.phoneNo}`;\n      const serviceProxy = getServiceProxy();\n      const phoneNoExistResult = await serviceProxy.checkPhoneNoExist(fullPhoneNumber);\n      if (!phoneNoExistResult.phoneNoExist) {\n        const appVerifier = (window as any).recaptchaVerifier;\n        const confirmationResult = await firebase.auth().signInWithPhoneNumber(fullPhoneNumber, appVerifier);\n        (window as any).confirmationResult = confirmationResult;\n        message.success(this.props.t('common:sendVerifyCodeSuccess'));\n      } else {\n        message.error(this.props.t('common:phoneNoHasBeenUsed'));\n      }\n\n      this.setState({\n        loading: {\n          ...this.state.loading,\n          getVerifyCode: false,\n        },\n      });\n    } catch (error) {\n      message.error(this.props.t(error.code));\n    }\n\n    this.setState({\n      loading: {\n        ...this.state.loading,\n        getVerifyCode: false,\n      },\n    });\n  }\n\n  register = async (values: any) => {\n    this.setState({\n      loading: {\n        ...this.state.loading,\n        register: true,\n      },\n    });\n\n    try {\n      if (this.state.activeTab === 'email') {\n        const newUser = await firebase.auth().createUserWithEmailAndPassword(values.email, values.password);\n        newUser.user!.sendEmailVerification();\n\n        // create mongodb record\n        const serviceProxy = getServiceProxy();\n        const idToken = await firebase.auth().currentUser!.getIdToken(true);\n        serviceProxy.registerUser({idToken});\n\n        // redirect\n        this.setState({\n          loading: {\n            ...this.state.loading,\n            register: false,\n          },\n        });\n        message.success(this.props.t('common:registerEmailSuccess'), 4);\n      } else if (this.state.activeTab === 'phone') {\n        const phoneNo = `${this.state.phone.countryCode}${this.state.phone.phoneNo}`;\n        await (window as any).confirmationResult.confirm(values.verifyCode);\n        await firebase.auth().currentUser!.updateEmail(`${phoneNo.replace('+', '')}@timmay.vn`);\n        await firebase.auth().currentUser!.updatePassword(values.password);\n\n        const idToken = await firebase.auth().currentUser!.getIdToken(true);\n        const serviceProxy = getServiceProxy();\n        await serviceProxy.registerUser({\n          idToken,\n        });\n\n        this.setState({\n          loading: {\n            ...this.state.loading,\n            register: false,\n          },\n        });\n        message.success(this.props.t('common:registerSuccess'));\n      }\n    } catch (error) {\n      message.error(this.props.t(error.code));\n      this.setState({\n        loading: {\n          ...this.state.loading,\n          register: false,\n        },\n      });\n    }\n  }\n\n  loginWithFacebook = async () => {\n    try {\n      const provider = new firebase.auth.FacebookAuthProvider();\n      await firebase.auth().signInWithPopup(provider);\n\n      // create mongodb record\n      const serviceProxy = getServiceProxy();\n      const idToken = await firebase.auth().currentUser!.getIdToken(true);\n      serviceProxy.registerUser({idToken});\n\n      message.success(this.props.t('common:registerSuccess'));\n      submitLoginForm(idToken);\n    } catch (error) {\n      message.error(this.props.t(`common:${error.code}`));\n    }\n  }\n\n  loginWithGoogle = async () => {\n    try {\n      const provider = new firebase.auth.GoogleAuthProvider();\n      await firebase.auth().signInWithPopup(provider);\n\n      // create mongodb record\n      const serviceProxy = getServiceProxy();\n      const idToken = await firebase.auth().currentUser!.getIdToken(true);\n      serviceProxy.registerUser({idToken});\n\n      message.success(this.props.t('common:registerSuccess'));\n      submitLoginForm(idToken);\n    } catch (error) {\n      message.error(this.props.t(`common:${error.code}`));\n    }\n  }\n\n  render() {\n    const translate = this.props.t;\n\n    const EmailValidateSchema = yup.object().shape({\n      email: yup.string()\n        .required(translate('common:pleaseInputEmail')).matches(config.regex.email, translate('common:invalidEmail')),\n      password: yup.string()\n        .required(translate('common:pleaseInputPassword'))\n        .max(100, translate('common:passwordTooLong'))\n        .matches(config.regex.password, translate('common:invalidPassword')),\n      confirmPassword: yup.string()\n        .required(translate('common:pleaseConfirmPassword')),\n    });\n\n    const PhoneNumberValidateSchema = yup.object().shape({\n      countryCode: yup.string()\n        .required(translate('common:pleaseInputCountryCode')),\n      phoneNo: yup.string()\n        .matches(config.regex.phone, translate('common:invalidPhoneNo'))\n        .required(translate('common:pleaseInputPhoneNo')),\n    });\n\n    const VerifyCodeValidateSchema = yup.object().shape({\n      verifyCode: yup.string()\n        .required(translate('common:pleaseInputVerifyCode')),\n      password: yup.string()\n        .required(translate('common:pleaseInputPassword'))\n        .max(100, translate('common:passwordTooLong'))\n        .matches(config.regex.password, translate('common:invalidPassword')),\n      confirmPassword: yup.string()\n        .required(translate('common:pleaseConfirmPassword')),\n    });\n\n    return (\n      <Modal\n        className='register-modal'\n        visible={this.props.profileState.modal.register}\n        footer={null}\n        onCancel={() => this.props.profileReducers.closeModal({modalName: 'register'})}\n        destroyOnClose={true}\n      >\n        <h2>{translate('common:register')}</h2>\n        <hr className='title-underline' />\n\n        <Tabs defaultActiveKey={this.state.activeTab} onChange={(activeTab) => this.activeTabChange({ activeTab } as any)}>\n          <Tabs.TabPane tab={<span><Icon type='phone' />{translate('common:sms')}</span>} key='phone'>\n            <Formik\n              initialValues={{\n                countryCode: '+84',\n                phoneNo: '',\n              }}\n              validateOnChange={false}\n              validationSchema={PhoneNumberValidateSchema}\n              onSubmit={async (values) => {\n                await this.getCode(values);\n              }}\n            >\n              {(context: FormikContext<any>) => (\n                <Form.Item validateStatus={context.errors.phoneNo || context.errors.countryCode ? 'error' : undefined} help={context.errors.phoneNo || context.errors.countryCode}>\n                  <Input.Search\n                    addonBefore={(\n                      <Select style={{ width: 120 }} value={context.values.countryCode} onChange={context.handleChange}>\n                        <Select.Option value='+84'>VN (+84)</Select.Option>\n                      </Select>\n                    )}\n                    value={context.values.phoneNo}\n                    onChange={context.handleChange}\n                    onBlur={context.handleBlur}\n                    placeholder={translate('common:phoneNo')}\n                    enterButton={<Button type='primary' loading={this.state.loading.getVerifyCode}>{translate('common:sendCode')}</Button>}\n                    onSearch={context.handleSubmit as any}\n                    name='phoneNo'\n                  />\n                </Form.Item>\n              )}\n            </Formik>\n\n            <Formik\n              initialValues={{\n                verifyCode: '',\n                password: '',\n                confirmPassword: '',\n              }}\n              validateOnChange={false}\n              validationSchema={VerifyCodeValidateSchema}\n              onSubmit={async (values, formikBag) => {\n                await this.register(values);\n                formikBag.resetForm({});\n              }}\n            >\n              {(context: FormikContext<any>) => (\n                <Form onSubmit={context.handleSubmit}>\n                  <Form.Item validateStatus={context.errors.verifyCode ? 'error' : undefined} help={context.errors.verifyCode}>\n                    <Input\n                      value={context.values.verifyCode}\n                      onChange={context.handleChange}\n                      onBlur={() => validateField({\n                        fieldName: 'verifyCode',\n                        validateSchema: VerifyCodeValidateSchema,\n                        context,\n                      })}\n                      placeholder={translate('common:verifyCode')}\n                      name='verifyCode'\n                    />\n                  </Form.Item>\n\n                  <Form.Item validateStatus={context.errors.password ? 'error' : undefined} help={context.errors.password}>\n                    <Input\n                      value={context.values.password}\n                      onChange={context.handleChange}\n                      onBlur={() => validateField({\n                        fieldName: 'password',\n                        validateSchema: VerifyCodeValidateSchema,\n                        context,\n                      })}\n                      placeholder={translate('common:password')}\n                      type='password'\n                      name='password'\n                    />\n                  </Form.Item>\n\n                  <Form.Item validateStatus={context.errors.confirmPassword ? 'error' : undefined} help={context.errors.confirmPassword}>\n                    <Input\n                      value={context.values.confirmPassword}\n                      onChange={context.handleChange}\n                      onBlur={() => {\n                        if (context.values.confirmPassword && context.values.confirmPassword !== context.values.password) {\n                          context.setFieldError('confirmPassword', translate('common:confirmPasswordDidntMatch'));\n                        } else {\n                          validateField({\n                            fieldName: 'confirmPassword',\n                            validateSchema: VerifyCodeValidateSchema,\n                            context,\n                          });\n                        }\n                      }}\n                      placeholder={translate('common:confirmPassword')}\n                      type='password'\n                      name='confirmPassword'\n                    />\n                  </Form.Item>\n\n                  <Form.Item className='button-container'>\n                    <Button type='primary' className='login-button' htmlType='submit' loading={this.state.loading.register}>{translate('common:register')}</Button>\n                    <br />\n                  </Form.Item>\n                </Form>\n              )}\n            </Formik>\n          </Tabs.TabPane>\n\n          <Tabs.TabPane tab={<span><Icon type='mail' />Email</span>} key='email'>\n            <Formik\n              initialValues={{\n                email: '',\n                password: '',\n                confirmPassword: '',\n              }}\n              validateOnChange={false}\n              validationSchema={EmailValidateSchema}\n              validate={(values) => {\n                const errors: any = {};\n                if (values.password !== values.confirmPassword) {\n                  errors.confirmPassword = translate('common:confirmPasswordDidntMatch');\n                }\n                return errors;\n              }}\n              onSubmit={async (values, formikBag) => {\n                await this.register(values);\n                formikBag.resetForm({\n                  email: '',\n                  password: '',\n                  confirmPassword: '',\n                });\n              }}\n            >\n              {(context: FormikContext<any>) => (\n                <Form onSubmit={context.handleSubmit}>\n                  <Form.Item validateStatus={context.errors.email ? 'error' : undefined} help={context.errors.email}>\n                    <Input\n                      value={context.values.email}\n                      onChange={context.handleChange}\n                      onBlur={() => validateField({\n                        fieldName: 'email',\n                        validateSchema: EmailValidateSchema,\n                        context,\n                      })}\n                      placeholder={translate('common:email')}\n                      type='email' name='email'\n                    />\n                  </Form.Item>\n\n                  <Form.Item validateStatus={context.errors.password ? 'error' : undefined} help={context.errors.password}>\n                    <Input\n                      value={context.values.password}\n                      onChange={context.handleChange}\n                      onBlur={() => validateField({\n                        fieldName: 'password',\n                        validateSchema: EmailValidateSchema,\n                        context,\n                      })}\n                      placeholder={translate('common:password')}\n                      type='password'\n                      name='password'\n                    />\n                  </Form.Item>\n\n                  <Form.Item validateStatus={context.errors.confirmPassword ? 'error' : undefined} help={context.errors.confirmPassword}>\n                    <Input\n                      value={context.values.confirmPassword}\n                      onChange={context.handleChange}\n                      onBlur={() => {\n                        if (context.values.confirmPassword && context.values.confirmPassword !== context.values.password) {\n                          context.setFieldError('confirmPassword', translate('common:confirmPasswordDidntMatch'));\n                        } else {\n                          validateField({\n                            fieldName: 'confirmPassword',\n                            validateSchema: EmailValidateSchema,\n                            context,\n                          });\n                        }\n                      }}\n                      placeholder={translate('common:confirmPassword')}\n                      type='password'\n                      name='confirmPassword'\n                    />\n                  </Form.Item>\n\n                  <Form.Item className='button-container'>\n                    <Button type='primary' className='login-button' htmlType='submit' loading={this.state.loading.register}>{translate('common:register')}</Button>\n                    <br />\n                  </Form.Item>\n                </Form>\n              )}\n            </Formik>\n          </Tabs.TabPane>\n        </Tabs>\n\n        <Row>\n          <Col lg={10}><hr/></Col>\n          <Col lg={4} style={{textAlign: 'center'}}>\n            <span>{translate('common:or')}</span>\n          </Col>\n          <Col lg={10}><hr/></Col>\n        </Row>\n        <Row>\n          <Button type='primary' className='login-facebook-button' onClick={this.loginWithFacebook}>{translate('common:registerFacebook')}</Button>\n          <Button type='primary' className='login-google-button' onClick={this.loginWithGoogle}>{translate('common:registerGoogle')}</Button>\n        </Row>\n        <hr />\n        <Row style={{textAlign: 'center'}}>\n        <span style={{color: '#000'}}>{translate('common:alreadyHaveAccount')}? </span>\n        <span style={{color: 'blue', cursor: 'pointer'}} onClick={() => {\n          this.props.profileReducers.closeModal({modalName: 'register'});\n          this.props.profileReducers.openModal({modalName: 'login'});\n        }}>{translate('common:login')}</span>\n        </Row>\n        <form id='form' method='post' action='/auth/login' style={{display: 'none'}} />\n      </Modal>\n    );\n  }\n}\n\nexport const RegisterModal = withNamespaces('common')(BaseRegisterModal);\n"],"file":"RegisterModal.js"}