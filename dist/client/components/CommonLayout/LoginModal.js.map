{"version":3,"sources":["../../../../src/client/components/CommonLayout/LoginModal.tsx"],"names":["BaseLoginModal","activeTab","phone","countryCode","phoneNo","loading","login","getVerifyCode","forgotPassword","setState","values","state","email","replace","firebase","auth","signInWithEmailAndPassword","password","signInResult","user","emailVerified","currentUser","getIdToken","idToken","serviceProxy","registerUser","success","props","t","error","code","provider","FacebookAuthProvider","signInWithPopup","GoogleAuthProvider","translate","EmailValidateSchema","yup","object","shape","string","required","max","matches","PhoneNumberValidateSchema","config","regex","profileState","modal","profileReducers","closeModal","modalName","activeTabChange","formikBag","resetForm","context","handleSubmit","errors","undefined","width","handleChange","fieldName","validateSchema","showForgotPasswordModal","textAlign","loginWithFacebook","loginWithGoogle","color","cursor","openModal","display","hideForgotPasswordModal","React","Component","LoginModal"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { Modal, Input, Button, Row, Col, message, Tabs, Icon, Form, Select } from 'antd';\nimport './LoginModal.less';\nimport { ProfileState, ProfileEffects, ProfileReducers } from '@client/store';\nimport firebase from 'firebase/app';\nimport 'firebase/auth';\nimport { getServiceProxy } from '@client/services';\nimport { submitLoginForm, validateField } from '@client/core';\nimport { Formik, FormikContext } from 'formik';\nimport { ForgotPasswordModal } from './ForgotPasswordModal';\nimport * as yup from 'yup';\nimport { withNamespaces } from '@client/i18n';\nimport { config } from '@client/config';\n\ninterface Props {\n  profileState: ProfileState;\n  profileReducers: ProfileEffects & ProfileReducers;\n  t: (key: string) => string;\n}\ninterface State {\n  activeTab: 'email' | 'phone';\n  phone: {\n    countryCode: string;\n    phoneNo: string;\n  };\n  loading: {\n    login: boolean;\n    getVerifyCode: boolean;\n  };\n  forgotPassword: boolean;\n}\nclass BaseLoginModal extends React.Component<Props, State> {\n  state: State = {\n    activeTab: 'phone',\n    phone: {\n      countryCode: '',\n      phoneNo: '',\n    },\n    loading: {\n      login: false,\n      getVerifyCode: false,\n    },\n    forgotPassword: false,\n  };\n\n  activeTabChange = ({ activeTab }: { activeTab: 'email' | 'phone' }) => {\n    this.setState({\n      activeTab,\n    });\n  }\n\n  login = async (values: any) => {\n    this.setState({\n      loading: {\n        ...this.state.loading,\n        login: true,\n      },\n    });\n\n    try {\n      const email = this.state.activeTab === 'phone' ? `${values.countryCode.replace('+', '')}${values.phoneNo}@timmay.vn` : values.email;\n      const signInResult = await firebase.auth().signInWithEmailAndPassword(email, values.password);\n      if (signInResult.user!.emailVerified) {\n        const idToken = await firebase.auth().currentUser!.getIdToken(true);\n        const serviceProxy = getServiceProxy();\n        serviceProxy.registerUser({idToken});\n\n        message.success(this.props.t('common:loginSuccess'));\n        submitLoginForm(idToken);\n      } else {\n        message.error(this.props.t('common:unverifiedAccount'));\n        this.setState({\n          loading: {\n            ...this.state.loading,\n            login: false,\n          },\n        });\n      }\n    } catch (error) {\n      message.error(this.props.t(error.code));\n      this.setState({\n        loading: {\n          ...this.state.loading,\n          login: false,\n        },\n      });\n    }\n  }\n\n  loginWithFacebook = async () => {\n    try {\n      const provider = new firebase.auth.FacebookAuthProvider();\n      await firebase.auth().signInWithPopup(provider);\n      const idToken = await firebase.auth().currentUser!.getIdToken(true);\n      const serviceProxy = getServiceProxy();\n      await serviceProxy.registerUser({\n        idToken,\n      });\n\n      message.success(this.props.t('common:loginSuccess'));\n      submitLoginForm(idToken);\n    } catch (error) {\n      message.error(this.props.t(`common:${error.code}`));\n    }\n  }\n\n  loginWithGoogle = async () => {\n    try {\n      const provider = new firebase.auth.GoogleAuthProvider();\n      await firebase.auth().signInWithPopup(provider);\n      const idToken = await firebase.auth().currentUser!.getIdToken(true);\n      const serviceProxy = getServiceProxy();\n      await serviceProxy.registerUser({\n        idToken,\n      });\n\n      message.success(this.props.t('common:loginSuccess'));\n      submitLoginForm(idToken);\n    } catch (error) {\n      message.error(this.props.t(`common:${error.code}`));\n    }\n  }\n\n  showForgotPasswordModal = () => {\n    this.setState({\n      forgotPassword: true,\n    });\n  }\n\n  hideForgotPasswordModal = () => {\n    this.setState({\n      forgotPassword: false,\n    });\n  }\n\n  render() {\n    const translate = this.props.t;\n\n    const EmailValidateSchema = yup.object().shape({\n      email: yup.string()\n        .required(translate('common:pleaseInputEmail')),\n      password: yup.string()\n        .max(100, translate('common:passwordTooLong'))\n        .matches(/[^\\s]/, translate('common:passwordCantContainSpace'))\n        .required(translate('common:pleaseInputPassword')),\n    });\n\n    const PhoneNumberValidateSchema = yup.object().shape({\n      countryCode: yup.string()\n        .required(translate('common:pleaseInputCountryCode')),\n      phoneNo: yup.string()\n        .matches(config.regex.phone, translate('common:invalidPhoneNo'))\n        .required(translate('common:pleaseInputPhoneNo')),\n      password: yup.string()\n        .required(translate('common:pleaseInputPassword'))\n        .max(100, translate('common:passwordTooLong'))\n        .matches(/[^\\s]/, translate('common:passwordCantContainSpace')),\n    });\n\n    return (\n      <Modal\n        className='login-modal'\n        visible={this.props.profileState.modal.login}\n        footer={null}\n        onCancel={() => this.props.profileReducers.closeModal({ modalName: 'login' })}\n        destroyOnClose={true}\n      >\n        <h2>{translate('common:login')}</h2>\n        <hr className='title-underline' />\n\n        <Tabs defaultActiveKey={this.state.activeTab} onChange={(activeTab) => this.activeTabChange({ activeTab } as any)}>\n          <Tabs.TabPane tab={<span><Icon type='phone' />{translate('common:sms')}</span>} key='phone'>\n            <Formik\n              initialValues={{\n                countryCode: '+84',\n                phoneNo: '',\n                password: '',\n              }}\n              validateOnChange={false}\n              validationSchema={PhoneNumberValidateSchema}\n              onSubmit={async (values, formikBag: any) => {\n                await this.login(values);\n                formikBag.resetForm({\n                  countryCode: '+84',\n                  phoneNo: values.phoneNo,\n                  password: '',\n                });\n              }}\n            >\n              {(context: FormikContext<any>) => (\n                <Form onSubmit={context.handleSubmit}>\n                  <Form.Item validateStatus={context.errors.phoneNo || context.errors.countryCode ? 'error' : undefined} help={context.errors.phoneNo || context.errors.countryCode}>\n                    <Input\n                      addonBefore={(\n                        <Select style={{ width: 120 }} value={context.values.countryCode} onChange={context.handleChange}>\n                          <Select.Option value='+84'>VN (+84)</Select.Option>\n                        </Select>\n                      )}\n                      value={context.values.phoneNo}\n                      onChange={context.handleChange}\n                      onBlur={() => validateField({\n                        fieldName: 'phoneNo',\n                        validateSchema: PhoneNumberValidateSchema,\n                        context,\n                      })}\n                      placeholder={translate('common:phoneNo')}\n                      name='phoneNo'\n                    />\n                  </Form.Item>\n\n                  <Form.Item validateStatus={context.errors.password ? 'error' : undefined} help={context.errors.password}>\n                    <Input\n                      value={context.values.password}\n                      onChange={context.handleChange}\n                      onBlur={() => validateField({\n                        fieldName: 'password',\n                        validateSchema: PhoneNumberValidateSchema,\n                        context,\n                      })}\n                      placeholder={translate('common:password')}\n                      type='password'\n                      name='password'\n                    />\n                  </Form.Item>\n\n                  <Form.Item className='button-container'>\n                    <Button type='primary' className='login-button' htmlType='submit' loading={this.state.loading.login}>\n                      {translate('common:login')}\n                    </Button>\n                    <br />\n                    <Button type='default' className='forgot-password-button' onClick={this.showForgotPasswordModal}>\n                      {translate('common:forgotPassword')}\n                    </Button>\n                  </Form.Item>\n                </Form>\n              )}\n            </Formik>\n          </Tabs.TabPane>\n\n          <Tabs.TabPane tab={<span><Icon type='mail' />{translate('common:email')}</span>} key='email'>\n            <Formik\n              initialValues={{\n                email: '',\n                password: '',\n              }}\n              validateOnChange={false}\n              validationSchema={EmailValidateSchema}\n              onSubmit={async (values, formikBag) => {\n                await this.login(values);\n                formikBag.resetForm({\n                  email: values.email,\n                  password: '',\n                });\n              }}\n            >\n              {(context: FormikContext<any>) => (\n                <Form onSubmit={context.handleSubmit}>\n                  <Form.Item validateStatus={context.errors.email ? 'error' : undefined} help={context.errors.email}>\n                    <Input\n                      value={context.values.email}\n                      onChange={context.handleChange}\n                      onBlur={() => validateField({\n                        fieldName: 'email',\n                        validateSchema: EmailValidateSchema,\n                        context,\n                      })}\n                      placeholder={translate('common:email')}\n                      type='email' name='email'\n                    />\n                  </Form.Item>\n\n                  <Form.Item validateStatus={context.errors.password ? 'error' : undefined} help={context.errors.password}>\n                    <Input\n                      value={context.values.password}\n                      onChange={context.handleChange}\n                      onBlur={() => validateField({\n                        fieldName: 'password',\n                        validateSchema: EmailValidateSchema,\n                        context,\n                      })}\n                      placeholder={translate('common:password')}\n                      type='password'\n                      name='password'\n                    />\n                  </Form.Item>\n\n                  <Form.Item className='button-container'>\n                    <Button type='primary' className='login-button' htmlType='submit' loading={this.state.loading.login}>{translate('common:login')}</Button>\n                    <br />\n                    <Button type='default' className='forgot-password-button' onClick={this.showForgotPasswordModal}>{translate('common:forgotPassword')}</Button>\n                  </Form.Item>\n                </Form>\n              )}\n            </Formik>\n          </Tabs.TabPane>\n        </Tabs>\n\n        <Row>\n          <Col lg={10}><hr /></Col>\n          <Col lg={4} style={{ textAlign: 'center' }}>\n            <span>{translate('common:or')}</span>\n          </Col>\n          <Col lg={10}><hr /></Col>\n        </Row>\n        <Row>\n          <Button type='primary' className='login-facebook-button' onClick={this.loginWithFacebook}>{translate('common:facebookLogin')}</Button>\n          <Button type='primary' className='login-google-button' onClick={this.loginWithGoogle}>{translate('common:googleLogin')}</Button>\n        </Row>\n        <hr />\n        <Row style={{ textAlign: 'center' }}>\n          <span style={{ color: '#000' }}>{translate('common:dontHaveAccount')}? </span>\n          <span style={{ color: 'blue', cursor: 'pointer' }} onClick={() => {\n            this.props.profileReducers.closeModal({ modalName: 'login' });\n            this.props.profileReducers.openModal({ modalName: 'register' });\n          }}>{translate('common:register')}</span>\n        </Row>\n\n        <form id='form' method='post' action='/auth/login' style={{display: 'none'}} />\n        <ForgotPasswordModal type={this.state.activeTab} visible={this.state.forgotPassword} onCancel={this.hideForgotPasswordModal} />\n      </Modal>\n    );\n  }\n}\n\nexport const LoginModal = withNamespaces('common')(BaseLoginModal);\n"],"file":"LoginModal.js"}