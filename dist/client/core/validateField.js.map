{"version":3,"sources":["../../../src/client/core/validateField.ts"],"names":["validateField","params","validateSchema","validateSyncAt","fieldName","context","values","setFieldError","error","message"],"mappings":";;;;;;;AASO,IAAMA,aAAa,GAAG,SAAhBA,aAAgB,CAACC,MAAD,EAAgC;AAC3D,MAAI;AACFA,IAAAA,MAAM,CAACC,cAAP,CAAsBC,cAAtB,CAAqCF,MAAM,CAACG,SAA5C,EAAuDH,MAAM,CAACI,OAAP,CAAeC,MAAtE;AACAL,IAAAA,MAAM,CAACI,OAAP,CAAeE,aAAf,CAA6BN,MAAM,CAACG,SAApC,EAA+C,EAA/C;AACD,GAHD,CAGE,OAAOI,KAAP,EAAc;AACdP,IAAAA,MAAM,CAACI,OAAP,CAAeE,aAAf,CAA6BN,MAAM,CAACG,SAApC,EAA+CI,KAAK,CAACC,OAArD;AACD;AACF,CAPM","sourcesContent":["import { FormikContext } from 'formik';\nimport * as yup from 'yup';\n\ninterface ValidateFieldInput {\n  fieldName: string;\n  context: FormikContext<any>;\n  validateSchema: yup.Schema<any>;\n}\n\nexport const validateField = (params: ValidateFieldInput) => {\n  try {\n    params.validateSchema.validateSyncAt(params.fieldName, params.context.values);\n    params.context.setFieldError(params.fieldName, '');\n  } catch (error) {\n    params.context.setFieldError(params.fieldName, error.message);\n  }\n};\n"],"file":"validateField.js"}