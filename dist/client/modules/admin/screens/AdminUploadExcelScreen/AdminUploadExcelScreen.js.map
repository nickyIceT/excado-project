{"version":3,"sources":["../../../../../../src/client/modules/admin/screens/AdminUploadExcelScreen/AdminUploadExcelScreen.tsx"],"names":["AdminUploadExcel","loading","data","excelFile","undefined","file","config","upload","allowExcelExt","test","name","setState","excelFormData","FormData","append","firebase","auth","currentUser","getIdToken","idToken","fetch","url","api","method","headers","authorization","body","then","res","json","uploadExcelFileResult","success","props","t","error","message","uploadExcelFile","translate","dateFormat","columns","title","dataIndex","key","render","_text","record","main","_id","newsTypes","filter","item","value","newsType","label","categoryId","weightRange","max","replace","min","moment","Date","createdAt","format","textAlign","marginBottom","beforeUploadExcelFile","state","length","x","marginTop","React","Component","mapState","rootState","profileState","profileModel","mapDispatch","_rootReducer","AdminUploadExcelScreen","initStore"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { ProfileState, withRematch, initStore } from '@client/store';\nimport { Authorize } from '@client/components';\nimport { withNamespaces } from '@client/i18n';\nimport './AdminUploadExcelScreen.less';\nimport { Upload, Icon, Spin, message, Table, Tag, Row, Col, Button } from 'antd';\nimport { UploadFile } from 'antd/lib/upload/interface';\nimport { config } from '@client/config';\nimport { News } from '@client/services/service-proxies';\nimport * as moment from 'moment';\nimport { newsTypes } from '@client/core';\nimport firebase from 'firebase/app';\nimport 'firebase/auth';\n\ninterface Props {\n  t: (key: string) => string;\n}\ninterface State {\n  loading: boolean;\n  data: News[];\n  excelFile?: UploadFile;\n}\nclass AdminUploadExcel extends React.Component<Props & {profileState: ProfileState}, State> {\n  state: State = {\n    loading: false,\n    data: [],\n    excelFile: undefined,\n  };\n\n  uploadExcelFile = async (file: UploadFile) => {\n    if (config.upload.allowExcelExt.test(file.name)) {\n      try {\n        this.setState({\n          loading: true,\n          data: [],\n        });\n\n        let uploadExcelFileResult: any;\n        const excelFormData = new FormData();\n        excelFormData.append('newsExcel', file as any);\n\n        const idToken = await firebase.auth().currentUser!.getIdToken();\n        uploadExcelFileResult = await fetch(`${config.url.api}/uploads/news-excel`, {\n          method: 'POST',\n          headers: {\n            authorization: idToken,\n          },\n          body: excelFormData,\n        }).then((res) => res.json());\n\n        this.setState({\n          loading: false,\n          data: uploadExcelFileResult.data,\n        });\n        message.success(this.props.t('admin-upload-excel:upload-success'));\n      } catch (error) {\n        this.setState({\n          loading: false,\n          data: [],\n        });\n        message.error(error.message);\n      }\n    }\n  }\n\n  beforeUploadExcelFile = async (file: UploadFile) => {\n    this.uploadExcelFile(file);\n    return false;\n  }\n\n  render () {\n    const translate = this.props.t;\n    const dateFormat = 'DD/MM/YYYY HH:mm';\n    const columns: any[] = [\n      {\n        title: translate('admin-upload-excel:title'),\n        dataIndex: 'title',\n        key: 'title',\n        render: (_text: string, record: News) => <a href={`${config.url.main}/bai-dang/${record._id}`}>{record.title}</a>,\n      },\n      {\n        title: translate('admin-upload-excel:news-type'),\n        dataIndex: 'newsType',\n        key: 'newsType',\n        render: (_text: string, record: News) => (\n          <Tag color='volcano'>{newsTypes.filter((item) => item.value === record.newsType)[0].label}</Tag>\n        ),\n      },\n      {\n        title: translate('admin-upload-excel:category'),\n        dataIndex: 'categoryId',\n        key: 'categoryId',\n        render: (_text: string, record: News) => record.categoryId.name,\n      },\n      {\n        title: translate('admin-upload-excel:weight-range'),\n        dataIndex: 'weightRange',\n        key: 'weightRange',\n        render: (_text: string, record: News) => {\n          const weightRange = record.weightRange.max\n          ? this.props.t('common:from-to').replace('{from}', record.weightRange.min).replace('{to}', record.weightRange.max) + ' ' + this.props.t('common:ton')\n          : this.props.t('common:more-than') + ' ' + record.weightRange.min + ' ' + this.props.t('common:ton');\n\n          return weightRange;\n        },\n      },\n      {\n        title: translate('common:created-at'),\n        dataIndex: 'createdAt',\n        key: 'createdAt',\n        render: (_text: string, record: News) => moment(new Date(record.createdAt)).format(dateFormat),\n      },\n    ];\n    return (\n      <div className='admin-upload-excel-screen'>\n        <Row>\n          <Col xs={24} style={{textAlign: 'right', marginBottom: '12px'}}>\n            <a href={`${config.url.api}/downloads/excel-template`} target='_blank'>\n              <Button type='primary'>{translate('admin-upload-excel:download-template')}</Button>\n            </a>\n          </Col>\n        </Row>\n\n        <Upload.Dragger beforeUpload={this.beforeUploadExcelFile} showUploadList={false}>\n          <Spin spinning={this.state.loading}>\n            <p className='ant-upload-drag-icon'>\n              <Icon type='inbox' />\n            </p>\n            <p className='ant-upload-text'>{translate('admin-upload-excel:instruction')}</p>\n          </Spin>\n        </Upload.Dragger>\n\n        {this.state.data.length > 0 && (\n          <Table\n            columns={columns}\n            dataSource={this.state.data}\n            loading={this.state.loading}\n            pagination={false}\n            scroll={{x: 1000}}\n            style={{marginTop: '24px', marginBottom: '24px'}}\n            rowKey={(record: any) => record._id}\n          />\n        )}\n      </div>\n    );\n  }\n}\n\nconst mapState = (rootState: any) => {\n  return {\n    profileState: rootState.profileModel,\n  };\n};\n\nconst mapDispatch = (_rootReducer: any) => {\n  return {};\n};\n\nconst AdminUploadExcelScreen = Authorize(withRematch(initStore, mapState, mapDispatch)(withNamespaces('admin-upload-excel')(AdminUploadExcel)), [], true, 'admin');\n\nexport {\n  AdminUploadExcelScreen,\n};\n"],"file":"AdminUploadExcelScreen.js"}