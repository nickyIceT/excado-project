{"version":3,"sources":["../../../../../../src/client/modules/admin/screens/AdminBrandsScreen/AdminBrandsScreen.tsx"],"names":["AdminBrands","filters","search","undefined","data","before","after","first","sortBy","loading","table","modal","brandModalVisible","logoImage","selectedBrand","setState","value","state","firebase","auth","currentUser","getIdToken","idToken","serviceProxies","findBrands","result","error","message","values","logoImageUrl","config","upload","allowImageExt","test","name","logoImageFormData","FormData","append","fetch","url","api","method","body","then","res","json","logoImageResult","_id","updateBrand","operation","payload","map","item","success","props","t","createBrand","id","slug","createdAt","Date","getTime","file","getData","translate","dateFormat","actionsDropdown","record","openBrandModal","columns","title","dataIndex","key","render","_text","moment","format","handleSearchChange","x","marginBottom","getNextPage","getPrevPage","closeBrandModal","handleSubmit","uploadLogoImage","React","Component","mapState","rootState","profileState","profileModel","mapDispatch","_rootReducer","AdminBrandsScreen","initStore"],"mappings":"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","sourcesContent":["import React from 'react';\nimport './AdminBrandsScreen.less';\nimport { Authorize, AdminSearchbar, PagingButtons } from '@client/components';\nimport { withRematch, initStore, ProfileState } from '@client/store';\nimport { Brand } from '@client/services/service-proxies';\nimport firebase from 'firebase/app';\nimport 'firebase/auth';\nimport { getServiceProxy } from '@client/services';\nimport { message, Menu, Dropdown, Icon, Table } from 'antd';\nimport { withNamespaces } from '@client/i18n';\nimport * as moment from 'moment';\nimport BrandModal from './components/BrandModal';\nimport { UploadFile } from 'antd/lib/upload/interface';\nimport { config } from '@client/config';\nimport slugify from 'slugify';\n\ninterface Props {}\ninterface State {\n  filters: {\n    search?: string;\n  };\n  data: Brand[];\n  before?: string;\n  after?: string;\n  first: number;\n  sortBy: string;\n  loading: {\n    table: boolean;\n    modal: boolean;\n  };\n  brandModalVisible: boolean;\n  logoImage?: UploadFile;\n  selectedBrand?: Brand;\n}\nclass AdminBrands extends React.Component<Props & {profileState: ProfileState; t: (key: string) => string}, State> {\n  state: State = {\n    filters: {\n      search: undefined,\n    },\n    data: [],\n    before: undefined,\n    after: undefined,\n    first: 10,\n    sortBy: `slug|asc`,\n    loading: {\n      table: true,\n      modal: false,\n    },\n    brandModalVisible: false,\n    logoImage: undefined,\n    selectedBrand: undefined,\n  };\n\n  componentDidMount () {\n    this.getData();\n  }\n\n  openBrandModal = (selectedBrand?: Brand) => {\n    this.setState({\n      brandModalVisible: true,\n      selectedBrand,\n    });\n  }\n\n  closeBrandModal = () => {\n    this.setState({\n      brandModalVisible: false,\n      selectedBrand: undefined,\n    });\n  }\n\n  handleSearchChange = (value: string) => {\n    this.setState({\n      filters: {\n        ...this.state.filters,\n        search: value,\n      },\n    });\n  }\n\n  getData = async () => {\n    this.setState({\n      loading: {\n        ...this.state.loading,\n        table: true,\n      },\n    });\n\n    try {\n      const idToken: any = await firebase.auth().currentUser!.getIdToken;\n      const serviceProxies = getServiceProxy(idToken);\n      const result = await serviceProxies.findBrands(\n        this.state.filters.search,\n        this.state.first,\n        this.state.sortBy,\n        undefined,\n        undefined,\n      );\n\n      this.setState({\n        data: result.data,\n        before: result.before,\n        after: result.after,\n        loading: {\n          ...this.state.loading,\n          table: false,\n        },\n      });\n    } catch (error) {\n      message.error(error.message);\n      this.setState({\n        loading: {\n          ...this.state.loading,\n          table: false,\n        },\n      });\n    }\n  }\n\n  getPrevPage = async () => {\n    this.setState({\n      loading: {\n        ...this.state.loading,\n        table: true,\n      },\n    });\n\n    try {\n      const idToken: any = await firebase.auth().currentUser!.getIdToken;\n      const serviceProxies = getServiceProxy(idToken);\n      const result = await serviceProxies.findBrands(\n        this.state.filters.search,\n        this.state.first,\n        this.state.sortBy,\n        this.state.before,\n        undefined,\n      );\n\n      this.setState({\n        data: result.data,\n        before: result.before,\n        after: result.after,\n        loading: {\n          ...this.state.loading,\n          table: false,\n        },\n      });\n    } catch (error) {\n      message.error(error.message);\n      this.setState({\n        loading: {\n          ...this.state.loading,\n          table: false,\n        },\n      });\n    }\n  }\n\n  getNextPage = async () => {\n    this.setState({\n      loading: {\n        ...this.state.loading,\n        table: true,\n      },\n    });\n\n    try {\n      const idToken: any = await firebase.auth().currentUser!.getIdToken;\n      const serviceProxies = getServiceProxy(idToken);\n      const result = await serviceProxies.findBrands(\n        this.state.filters.search,\n        this.state.first,\n        this.state.sortBy,\n        undefined,\n        this.state.after,\n      );\n\n      this.setState({\n        data: result.data,\n        before: result.before,\n        after: result.after,\n        loading: {\n          ...this.state.loading,\n          table: false,\n        },\n      });\n    } catch (error) {\n      message.error(error.message);\n      this.setState({\n        loading: {\n          ...this.state.loading,\n          table: false,\n        },\n      });\n    }\n  }\n\n  handleSubmit = async (values: {[key: string]: any}) => {\n    this.setState({\n      loading: {\n        ...this.state.loading,\n        modal: true,\n      },\n    });\n\n    try {\n      let logoImageUrl = '';\n      if (this.state.logoImage) {\n        if (config.upload.allowImageExt.test(this.state.logoImage.name)) {\n          const logoImageFormData = new FormData();\n          logoImageFormData.append('brandLogoImage', this.state.logoImage as any);\n\n          const logoImageResult = await fetch(`${config.url.api}/upload-image/brand-logo-image`, {\n            method: 'POST',\n            body: logoImageFormData,\n          }).then((res) => res.json());\n\n          logoImageUrl = logoImageResult.logoImage;\n        } else {\n          message.error('Ảnh chỉ nhận các định dạng PNG, JPG, JPEG');\n        }\n      }\n\n      const idToken: any = await firebase.auth().currentUser!.getIdToken;\n      const serviceProxies = getServiceProxy(idToken);\n      if (this.state.selectedBrand && this.state.selectedBrand._id) {\n        await serviceProxies.updateBrand(this.state.selectedBrand._id, {\n          operation: 'updateDetail',\n          payload: {\n            name: values.name,\n            logoImage: logoImageUrl ? logoImageUrl : this.state.selectedBrand.logoImage,\n          },\n        });\n\n        this.setState({\n          brandModalVisible: false,\n          loading: {\n            ...this.state.loading,\n            modal: false,\n          },\n          selectedBrand: undefined,\n          data: this.state.data.map((item) => item._id === this.state.selectedBrand!._id ? {\n            ...item,\n            ...values,\n            logoImage: logoImageUrl ? logoImageUrl : this.state.selectedBrand!.logoImage,\n          } : item),\n        });\n        message.success(this.props.t('admin-brands:update-success'));\n      } else {\n        const result = await serviceProxies.createBrand({\n          name: values.name,\n          logoImage: logoImageUrl,\n        });\n\n        this.setState({\n          brandModalVisible: false,\n          loading: {\n            ...this.state.loading,\n            modal: false,\n          },\n          selectedBrand: undefined,\n          data: [{_id: (result as any).id, name: values.name, logoImage: logoImageUrl, slug: slugify(values.name), createdAt: new Date().getTime()} as any, ...this.state.data],\n        });\n        message.success(this.props.t('admin-brands:create-success'));\n      }\n    } catch (error) {\n      message.error(error.message);\n      this.setState({\n        loading: {\n          ...this.state.loading,\n          modal: false,\n        },\n      });\n    }\n  }\n\n  uploadLogoImage = async (file: UploadFile) => {\n    this.setState({\n      logoImage: file,\n    });\n  }\n\n  render () {\n    const translate = this.props.t;\n    const dateFormat = 'DD/MM/YYYY HH:mm';\n    const actionsDropdown = (record: Brand) => (\n      <Menu>\n        <Menu.Item>\n          <a onClick={() => this.openBrandModal(record)}>\n            {translate('common:edit')}\n          </a>\n        </Menu.Item>\n      </Menu>\n    );\n    const columns: any[] = [\n      {\n        title: translate('admin-brands:brand-name'),\n        dataIndex: 'name',\n        key: 'name',\n        render: (_text: string, record: Brand) => (\n          <a href={`/danh-sach-hang/${record.slug}`} target='_blank'>{record.name}</a>\n        ),\n      },\n      {\n        title: translate('common:created-at'),\n        dataIndex: 'createdAt',\n        key: 'createdAt',\n        render: (_text: string, record: Brand) => moment(new Date(record.createdAt)).format(dateFormat),\n      },\n      {\n        title: translate('common:actions'),\n        dataIndex: 'operations',\n        key: 'operations',\n        render: (_text: string, record: Brand) => (\n          <Dropdown overlay={actionsDropdown(record)} trigger={['click']}>\n            <a className='ant-dropdown-link'>\n              {translate('common:actions')} <Icon type='down' />\n            </a>\n          </Dropdown>\n        ),\n      },\n    ];\n\n    return (\n      <div className='admin-brands-screen'>\n        <AdminSearchbar\n          hasCreate={true}\n          handleSearch={this.getData}\n          value={this.state.filters.search}\n          showSearch={true}\n          handleSearchChange={this.handleSearchChange}\n          placeholder={translate('admin-brands:search-brands')}\n          onCreateClick={() => this.openBrandModal()}\n        />\n\n        <Table\n          columns={columns}\n          dataSource={this.state.data}\n          loading={this.state.loading.table}\n          pagination={false}\n          scroll={{x: 1000}}\n          style={{marginBottom: '24px'}}\n          rowKey={(record: any) => record._id}\n        />\n\n        <PagingButtons\n          before={this.state.before}\n          after={this.state.after}\n          getNextPage={this.getNextPage}\n          getPrevPage={this.getPrevPage}\n        />\n\n        {this.state.brandModalVisible && (\n          <BrandModal\n            brandInfo={this.state.selectedBrand}\n            loading={this.state.loading.modal}\n            visible={this.state.brandModalVisible}\n            handleCancel={this.closeBrandModal}\n            handleOk={this.handleSubmit}\n            uploadLogoImage={this.uploadLogoImage}\n          />\n        )}\n      </div>\n    );\n  }\n}\n\nconst mapState = (rootState: any) => {\n  return {\n    profileState: rootState.profileModel,\n  };\n};\n\nconst mapDispatch = (_rootReducer: any) => {\n  return {};\n};\n\nconst AdminBrandsScreen = Authorize(withRematch(initStore, mapState, mapDispatch)(withNamespaces('admin-brands')(AdminBrands)), [], true, 'admin');\n\nexport {\n  AdminBrandsScreen,\n};\n"],"file":"AdminBrandsScreen.js"}