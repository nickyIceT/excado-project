{"version":3,"sources":["../../../../../../../src/client/modules/admin/screens/AdminUsersScreen/components/UserModal.tsx"],"names":["UserModal","props","translate","t","createValidationSchema","yup","object","shape","familyName","string","min","max","required","givenName","email","password","matches","config","regex","confirmPassword","roles","array","editValidationSchema","initialValue","_id","values","formikBag","handleSubmit","context","title","visible","e","closeModal","onClick","loading","errors","undefined","handleChange","fieldName","validateSchema","serviceProxies","checkEmailExist","result","emailExist","setFieldError","length","rolesData","map","item","name","checkValue","selectedRoles","forEach","indexOf","push","setFieldValue"],"mappings":"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","sourcesContent":["import React from 'react';\nimport './UserModal.less';\nimport { Modal, Form, Row, Col, Input, Icon, Checkbox } from 'antd';\nimport * as yup from 'yup';\nimport { FormikContext, Formik } from 'formik';\nimport { validateField } from '../../../../../core';\nimport { Role } from '@client/services/service-proxies';\nimport { getServiceProxy } from '@client/services';\nimport { withNamespaces } from '@client/i18n';\nimport { config } from '@client/config';\n\ninterface Props {\n  title: string;\n  visible: boolean;\n  rolesData?: Role[];\n  handleSubmit: (values: any, formikBag: any) => void;\n  closeModal: () => void;\n  initialValue?: {\n    familyName?: string;\n    givenName?: string;\n    email?: string;\n    roles?: any[];\n  };\n  loading: boolean;\n  t: (key: string) => string;\n}\nconst UserModal = (props: Props) => {\n  const translate = props.t;\n\n  const createValidationSchema = yup.object().shape({\n    familyName: yup.string().min(2, translate('admin-users:Too short')).max(50, translate('admin-users:Too long')).required(translate('admin-users:Family name is required')),\n    givenName: yup.string().min(2, translate('admin-users:Too short')).max(50, translate('admin-users:Too long')).required(translate('admin-users:Given name is required')),\n    email: yup.string().min(2, translate('admin-users:Too short')).email(translate('admin-users:Invalid email')).required(translate('admin-users:Email is required')),\n    password: yup.string()\n      .matches(config.regex.password, translate('admin-users:Password must be minimum 6 characters, at least 1 upper letter, 1 number and 1 special character'))\n      .required(translate('admin-users:Password is required')),\n    confirmPassword: yup.string().required(translate('admin-users:Please confirm your password')),\n    roles: yup.array(),\n  });\n\n  const editValidationSchema = yup.object().shape({\n    familyName: yup.string().min(2, translate('admin-users:Too short')).max(50, translate('admin-users:Too long')).required(translate('admin-users:Family name is required')),\n    givenName: yup.string().min(2, translate('admin-users:Too short')).max(50, translate('admin-users:Too long')).required(translate('admin-users:Given name is required')),\n    email: yup.string().min(2, translate('admin-users:Too short')).email(translate('admin-users:Invalid email')).required(translate('admin-users:Email is required')),\n    roles: yup.array(),\n  });\n\n  const initialValue = props.initialValue && (props.initialValue as any)._id ? props.initialValue : {\n    familyName: '',\n    givenName: '',\n    password: '',\n    confirmPassword: '',\n    email: '',\n    roles: [],\n  };\n\n  return (\n      <Formik\n        initialValues={initialValue}\n        validationSchema={props.initialValue && (props.initialValue as any)._id ? editValidationSchema : createValidationSchema}\n        onSubmit={async (values, formikBag: any) => props.handleSubmit(values, formikBag)}\n        validateOnChange={false}\n      >\n        {(context: FormikContext<any>) => (\n          <Modal\n            title={props.title}\n            visible={props.visible}\n            onOk={(e) => props.handleSubmit(e, context)}\n            onCancel={props.closeModal}\n            okButtonProps={{\n              onClick: () => context.handleSubmit(),\n            }}\n            confirmLoading={props.loading}\n            okText={translate('admin-users:Save')}\n            cancelText={translate('admin-users:Cancel')}\n          >\n          <Form>\n            <Row type='flex' gutter={12}>\n              <Col xs={12}>\n                <Form.Item validateStatus={context.errors.familyName ? 'error' : undefined} help={context.errors.familyName}>\n                  <Input\n                    value={context.values.familyName}\n                    onChange={context.handleChange}\n                    onBlur={() => validateField({\n                      fieldName: 'familyName',\n                      validateSchema: props.initialValue && (props.initialValue as any)._id ? editValidationSchema : createValidationSchema,\n                      context,\n                    })}\n                    prefix={<Icon type='user' />}\n                    placeholder={translate('admin-users:Family name')}\n                    name='familyName'\n                  />\n                </Form.Item>\n              </Col>\n              <Col xs={12}>\n                <Form.Item validateStatus={context.errors.givenName ? 'error' : undefined} help={context.errors.givenName}>\n                  <Input\n                    value={context.values.givenName}\n                    onChange={context.handleChange}\n                    onBlur={() => validateField({\n                      fieldName: 'givenName',\n                      validateSchema: props.initialValue && (props.initialValue as any)._id ? editValidationSchema : createValidationSchema,\n                      context,\n                    })}\n                    prefix={<Icon type='user' />}\n                    placeholder={translate('admin-users:Given name')}\n                    name='givenName'\n                  />\n                </Form.Item>\n              </Col>\n            </Row>\n\n            <Form.Item validateStatus={context.errors.email ? 'error' : undefined} help={context.errors.email}>\n              <Input\n                value={context.values.email}\n                onChange={context.handleChange}\n                onBlur={async () => {\n                  validateField({\n                    fieldName: 'email',\n                    validateSchema: props.initialValue && (props.initialValue as any)._id ? editValidationSchema : createValidationSchema,\n                    context,\n                  });\n\n                  if (context.values.email) {\n                    const serviceProxies = getServiceProxy();\n                    const result = await serviceProxies.checkEmailExist(context.values.email);\n                    if (result.emailExist) {\n                      context.setFieldError('email', translate('admin-users:Email has been used'));\n                    } else {\n                      context.setFieldError('email', '');\n                    }\n                  }\n                }}\n                prefix={<Icon type='mail' />}\n                placeholder='Email'\n                name='email'\n              />\n            </Form.Item>\n\n            <Form.Item validateStatus={context.errors.password ? 'error' : undefined} help={context.errors.password}>\n              <Input\n                value={context.values.password}\n                onChange={context.handleChange}\n                onBlur={() => validateField({\n                  fieldName: 'password',\n                  validateSchema: props.initialValue && (props.initialValue as any)._id ? editValidationSchema : createValidationSchema,\n                  context,\n                })}\n                prefix={<Icon type='lock' />}\n                placeholder={translate('admin-users:Password')}\n                name='password'\n                type='password'\n              />\n            </Form.Item>\n\n            <Form.Item validateStatus={context.errors.confirmPassword ? 'error' : undefined} help={context.errors.confirmPassword}>\n              <Input\n                value={context.values.confirmPassword}\n                onChange={context.handleChange}\n                onBlur={() => {\n                  validateField({\n                    fieldName: 'confirmPassword',\n                    validateSchema: props.initialValue && (props.initialValue as any)._id ? editValidationSchema : createValidationSchema,\n                    context,\n                  });\n\n                  if (context.values.confirmPassword) {\n                    if (context.values.confirmPassword !== context.values.password) {\n                      context.setFieldError('confirmPassword', translate('admin-users:Confirm password didnt match'));\n                    } else {\n                      context.setFieldError('confirmPassword', '');\n                    }\n                  }\n                }}\n                prefix={<Icon type='lock' />}\n                placeholder={translate('admin-users:Confirm password')}\n                name='confirmPassword'\n                type='password'\n              />\n            </Form.Item>\n\n            <Form.Item label='Roles' validateStatus={context.errors.roles && context.errors.roles.length ? 'error' : undefined} help={context.errors.roles}>\n              <Checkbox.Group\n                value={context.values.roles}\n                options={props.rolesData ? props.rolesData.map((item) => item.name) : []}\n                onChange={(checkValue) => {\n                  const selectedRoles: string[] = [];\n                  props.rolesData!.forEach((item) => {\n                    if (checkValue.indexOf(item.name) > -1) {\n                      selectedRoles.push(item.name);\n                    }\n                  });\n                  context.setFieldValue('roles', selectedRoles);\n                  context.setFieldError('roles', selectedRoles.length > 0 ? '' : translate('admin-users:Roles is required'));\n                }}\n              />\n            </Form.Item>\n          </Form>\n          </Modal>\n        )}\n      </Formik>\n  );\n};\n\nexport default withNamespaces('admin-users')(UserModal);\n"],"file":"UserModal.js"}