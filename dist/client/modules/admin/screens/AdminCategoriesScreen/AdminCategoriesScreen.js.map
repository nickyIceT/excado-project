{"version":3,"sources":["../../../../../../src/client/modules/admin/screens/AdminCategoriesScreen/AdminCategoriesScreen.tsx"],"names":["AdminCategories","filters","search","undefined","data","before","after","first","sortBy","loading","table","modal","categoryModalVisible","imageUrl","selectedCategory","setState","state","firebase","auth","currentUser","getIdToken","idToken","serviceProxies","findCategories","result","filter","item","name","toLocaleLowerCase","indexOf","error","message","value","values","config","upload","allowImageExt","test","categoryImageFormData","FormData","append","fetch","url","api","method","body","then","res","json","categoryImageResult","categoryImage","_id","updateCategory","operation","payload","map","success","props","t","createCategory","id","slug","createdAt","Date","getTime","file","getData","translate","dateFormat","actionsDropdown","record","openCategoryModal","columns","title","dataIndex","key","render","_text","moment","format","height","width","handleSearchChange","sort","a","b","x","marginBottom","getNextPage","getPrevPage","closeBrandModal","handleSubmit","uploadLogoImage","React","Component","mapState","rootState","profileState","profileModel","mapDispatch","_rootReducer","AdminCategoriesScreen","initStore"],"mappings":"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","sourcesContent":["import React from 'react';\nimport './AdminCategoriesScreen.less';\nimport { Authorize, AdminSearchbar, PagingButtons } from '@client/components';\nimport { withRematch, initStore } from '@client/store';\nimport { Category } from '@client/services/service-proxies';\nimport { UploadFile } from 'antd/lib/upload/interface';\nimport firebase from 'firebase/app';\nimport 'firebase/auth';\nimport { getServiceProxy } from '@client/services';\nimport { message, Menu, Dropdown, Icon, Table } from 'antd';\nimport * as moment from 'moment';\nimport CategoryModal from './components/CategoryModal';\nimport { config } from '@client/config';\nimport slugify from 'slugify';\nimport { withNamespaces } from '@client/i18n';\n\ninterface Props {\n  t: (key: string) => string;\n}\ninterface State {\n  filters: {\n    search?: string;\n  };\n  data: Category[];\n  before?: string;\n  after?: string;\n  first: number;\n  sortBy: string;\n  loading: {\n    table: boolean;\n    modal: boolean;\n  };\n  categoryModalVisible: boolean;\n  imageUrl?: UploadFile;\n  selectedCategory?: Category;\n}\nclass AdminCategories extends React.Component<Props, State> {\n  state: State = {\n    filters: {\n      search: undefined,\n    },\n    data: [],\n    before: undefined,\n    after: undefined,\n    first: 10,\n    sortBy: `slug|asc`,\n    loading: {\n      table: true,\n      modal: false,\n    },\n    categoryModalVisible: false,\n    imageUrl: undefined,\n    selectedCategory: undefined,\n  };\n\n  componentDidMount () {\n    this.getData();\n  }\n\n  openCategoryModal = (selectedCategory?: Category) => {\n    this.setState({\n      categoryModalVisible: true,\n      selectedCategory,\n    });\n  }\n\n  closeBrandModal = () => {\n    this.setState({\n      categoryModalVisible: false,\n      selectedCategory: undefined,\n    });\n  }\n\n  getData = async () => {\n    this.setState({\n      loading: {\n        ...this.state.loading,\n        table: true,\n      },\n    });\n\n    try {\n      const idToken: any = await firebase.auth().currentUser!.getIdToken;\n      const serviceProxies = getServiceProxy(idToken);\n      const result = await serviceProxies.findCategories();\n\n      this.setState({\n        data: this.state.filters.search ? result.data.filter((item) => slugify(item.name.toLocaleLowerCase()).indexOf(slugify(this.state.filters.search!.toLocaleLowerCase())) > -1) : result.data,\n        loading: {\n          ...this.state.loading,\n          table: false,\n        },\n      });\n    } catch (error) {\n      message.error(error.message);\n      this.setState({\n        loading: {\n          ...this.state.loading,\n          table: false,\n        },\n      });\n    }\n  }\n\n  getNextPage = async () => {\n    //\n  }\n\n  getPrevPage = async () => {\n    //\n  }\n\n  handleSearchChange = (value: string) => {\n    this.setState({\n      filters: {\n        ...this.state.filters,\n        search: value,\n      },\n    });\n  }\n\n  handleSubmit = async (values: {[key: string]: any}) => {\n    this.setState({\n      loading: {\n        ...this.state.loading,\n        modal: true,\n      },\n    });\n\n    try {\n      let imageUrl = '';\n      if (this.state.imageUrl) {\n        if (config.upload.allowImageExt.test(this.state.imageUrl.name)) {\n          const categoryImageFormData = new FormData();\n          categoryImageFormData.append('categoryImage', this.state.imageUrl as any);\n\n          const categoryImageResult = await fetch(`${config.url.api}/upload-image/category-image`, {\n            method: 'POST',\n            body: categoryImageFormData,\n          }).then((res) => res.json());\n\n          imageUrl = categoryImageResult.categoryImage;\n        } else {\n          message.error('Ảnh chỉ nhận các định dạng PNG, JPG, JPEG');\n        }\n      }\n\n      const idToken: any = await firebase.auth().currentUser!.getIdToken;\n      const serviceProxies = getServiceProxy(idToken);\n      if (this.state.selectedCategory && this.state.selectedCategory._id) {\n        await serviceProxies.updateCategory(this.state.selectedCategory._id, {\n          operation: 'updateDetail',\n          payload: {\n            name: values.name,\n            imageUrl: imageUrl ? imageUrl : this.state.selectedCategory.imageUrl,\n          },\n        });\n\n        this.setState({\n          categoryModalVisible: false,\n          loading: {\n            ...this.state.loading,\n            modal: false,\n          },\n          selectedCategory: undefined,\n          data: this.state.data.map((item) => item._id === this.state.selectedCategory!._id ? {\n            ...item,\n            ...values,\n            imageUrl: imageUrl ? imageUrl : this.state.selectedCategory!.imageUrl,\n          } : item),\n        });\n        message.success(this.props.t('admin-categories:update-success'));\n      } else {\n        const result = await serviceProxies.createCategory({\n          name: values.name,\n          imageUrl,\n        });\n\n        this.setState({\n          categoryModalVisible: false,\n          loading: {\n            ...this.state.loading,\n            modal: false,\n          },\n          selectedCategory: undefined,\n          data: [{_id: (result as any).id, name: values.name, imageUrl, slug: slugify(values.name), createdAt: new Date().getTime()} as any, ...this.state.data],\n        });\n        message.success(this.props.t('admin-categories:create-success'));\n      }\n    } catch (error) {\n      message.error(error.message);\n      this.setState({\n        loading: {\n          ...this.state.loading,\n          modal: false,\n        },\n      });\n    }\n  }\n\n  uploadLogoImage = async (file: UploadFile) => {\n    this.setState({\n      imageUrl: file,\n    });\n  }\n\n  render () {\n    const translate = this.props.t;\n    const dateFormat = 'DD/MM/YYYY HH:mm';\n    const actionsDropdown = (record: Category) => (\n      <Menu>\n        <Menu.Item>\n          <a onClick={() => this.openCategoryModal(record)}>\n            {translate('common:edit')}\n          </a>\n        </Menu.Item>\n      </Menu>\n    );\n    const columns: any[] = [\n      {\n        title: translate('admin-categories:category-name'),\n        dataIndex: 'name',\n        key: 'name',\n        render: (_text: string, record: Category) => (\n          <a href={`/chung-loai-may/${record.slug}`} target='_blank'>{record.name}</a>\n        ),\n      },\n      {\n        title: translate('common:created-at'),\n        dataIndex: 'createdAt',\n        key: 'createdAt',\n        render: (_text: string, record: Category) => moment(new Date(record.createdAt)).format(dateFormat),\n      },\n      {\n        title: translate('admin-categories:category-image'),\n        dataIndex: 'imageUrl',\n        key: 'imageUrl',\n        render: (_text: string, record: Category) => <img style={{height: '32px', width: 'auto'}} src={`${record.imageUrl}`} alt={`${record.name}`} />,\n      },\n      {\n        title: translate('common:actions'),\n        dataIndex: 'operations',\n        key: 'operations',\n        render: (_text: string, record: Category) => (\n          <Dropdown overlay={actionsDropdown(record)} trigger={['click']}>\n            <a className='ant-dropdown-link'>\n              {translate('common:actions')} <Icon type='down' />\n            </a>\n          </Dropdown>\n        ),\n      },\n    ];\n\n    return (\n      <div className='admin-categories-screen'>\n        <AdminSearchbar\n          hasCreate={true}\n          handleSearch={this.getData}\n          value={this.state.filters.search}\n          showSearch={true}\n          handleSearchChange={this.handleSearchChange}\n          placeholder={translate('admin-categories:search-categories')}\n          onCreateClick={() => this.openCategoryModal()}\n        />\n\n        <Table\n          columns={columns}\n          dataSource={this.state.data.sort((a, b) => (a.slug as any) - (b.slug as any))}\n          loading={this.state.loading.table}\n          pagination={false}\n          scroll={{x: 1000}}\n          style={{marginBottom: '24px'}}\n          rowKey={(record: any) => record._id}\n        />\n\n        <PagingButtons\n          before={this.state.before}\n          after={this.state.after}\n          getNextPage={this.getNextPage}\n          getPrevPage={this.getPrevPage}\n        />\n\n        {this.state.categoryModalVisible && (\n          <CategoryModal\n            categoryInfo={this.state.selectedCategory}\n            loading={this.state.loading.modal}\n            visible={this.state.categoryModalVisible}\n            handleCancel={this.closeBrandModal}\n            handleOk={this.handleSubmit}\n            uploadLogoImage={this.uploadLogoImage}\n          />\n        )}\n      </div>\n    );\n  }\n}\n\nconst mapState = (rootState: any) => {\n  return {\n    profileState: rootState.profileModel,\n  };\n};\n\nconst mapDispatch = (_rootReducer: any) => {\n  return {};\n};\n\nconst AdminCategoriesScreen = Authorize(withRematch(initStore, mapState, mapDispatch)(withNamespaces('admin-categories')(AdminCategories)), [], true, 'admin');\n\nexport {\n  AdminCategoriesScreen,\n};\n"],"file":"AdminCategoriesScreen.js"}