{"version":3,"sources":["../../../../../../src/client/modules/admin/screens/AdminAdsenseScreen/AdminAdsenseScreen.tsx"],"names":["AdminAdsense","data","before","undefined","after","first","sortBy","loading","form","logoImage","selectedAdsense","position","setState","state","firebase","auth","currentUser","getIdToken","idToken","serviceProxies","getAdsense","result","error","message","values","imageUrl","config","upload","allowImageExt","test","name","logoImageFormData","FormData","append","fetch","url","api","method","body","then","res","json","logoImageResult","adsenseImage","_id","updateAdsense","operation","payload","hyperlink","map","item","success","props","t","createAdsense","id","createdAt","Date","getTime","file","selectedAds","filter","getData","selectedAdsChange","handleOk","uploadLogoImage","React","Component","mapState","rootState","profileState","profileModel","mapDispatch","_rootReducer","AdminAdsenseScreen","initStore"],"mappings":"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","sourcesContent":["import React from 'react';\nimport './AdminAdsenseScreen.less';\nimport { Authorize } from '@client/components';\nimport { withRematch, initStore } from '@client/store';\nimport { Row, Col, message, Spin } from 'antd';\nimport AdsensePositions from './components/AdsensePositions';\nimport AdsenseInfo from './components/AdsenseInfo';\nimport { UploadFile } from 'antd/lib/upload/interface';\nimport { Adsense } from '@client/services/service-proxies';\nimport { config } from '@client/config';\nimport { getServiceProxy } from '@client/services';\nimport firebase from 'firebase/app';\nimport 'firebase/auth';\nimport { withNamespaces } from '@client/i18n';\n\ninterface Props {\n  t: (key: string) => string;\n}\ninterface State {\n  data: Adsense[];\n  before?: string;\n  after?: string;\n  first: number;\n  sortBy: string;\n  loading: {\n    form: boolean;\n    data: boolean;\n  };\n  logoImage?: UploadFile;\n  selectedAdsense?: Adsense;\n}\nclass AdminAdsense extends React.Component<Props, State> {\n  state: State = {\n    data: [],\n    before: undefined,\n    after: undefined,\n    first: 10,\n    sortBy: 'position|asc',\n    loading: {\n      form: false,\n      data: false,\n    },\n    logoImage: undefined,\n    selectedAdsense: {\n      position: 1,\n    } as any,\n  };\n\n  componentDidMount () {\n    this.getData();\n  }\n\n  getData = async () => {\n    this.setState({\n      loading: {\n        ...this.state.loading,\n        data: true,\n      },\n    });\n\n    try {\n      const idToken: any = await firebase.auth().currentUser!.getIdToken;\n      const serviceProxies = getServiceProxy(idToken);\n      const result = await serviceProxies.getAdsense(\n        this.state.first,\n        this.state.sortBy,\n        undefined,\n        undefined,\n      );\n\n      this.setState({\n        data: result.data,\n        loading: {\n          ...this.state.loading,\n          data: false,\n        },\n        selectedAdsense: result.data[0] ? result.data[0] : {\n          position: 1,\n        } as any,\n      });\n    } catch (error) {\n      message.error(error.message);\n      this.setState({\n        loading: {\n          ...this.state.loading,\n          data: false,\n        },\n      });\n    }\n  }\n\n  handleOk = async (values: {[key: string]: any}) => {\n    this.setState({\n      loading: {\n        ...this.state.loading,\n        form: true,\n      },\n    });\n\n    try {\n      // uploadimage\n      let imageUrl = '';\n      if (this.state.logoImage) {\n        if (config.upload.allowImageExt.test(this.state.logoImage.name)) {\n          const logoImageFormData = new FormData();\n          logoImageFormData.append('adsenseImage', this.state.logoImage as any);\n\n          const logoImageResult = await fetch(`${config.url.api}/upload-image/adsense-image`, {\n            method: 'POST',\n            body: logoImageFormData,\n          }).then((res) => res.json());\n\n          imageUrl = logoImageResult.adsenseImage;\n        } else {\n          message.error('Ảnh chỉ nhận các định dạng PNG, JPG, JPEG');\n        }\n      }\n\n      // create/update\n      const idToken: any = await firebase.auth().currentUser!.getIdToken;\n      const serviceProxies = getServiceProxy(idToken);\n      if (this.state.selectedAdsense && this.state.selectedAdsense._id) {\n        // update\n        await serviceProxies.updateAdsense(this.state.selectedAdsense._id, {\n          operation: 'updateDetail',\n          payload: {\n            name: values.name,\n            hyperlink: values.hyperlink,\n            imageUrl: imageUrl ? imageUrl : this.state.selectedAdsense.imageUrl,\n          },\n        });\n\n        this.setState({\n          loading: {\n            ...this.state.loading,\n            form: false,\n          },\n          selectedAdsense: {\n            ...this.state.selectedAdsense,\n            ...values,\n            imageUrl: imageUrl ? imageUrl : this.state.selectedAdsense.imageUrl,\n          },\n          data: this.state.data.map((item) => item._id === this.state.selectedAdsense!._id ? {\n            ...item,\n            ...values,\n            imageUrl: imageUrl ? imageUrl : this.state.selectedAdsense!.imageUrl,\n          } : item),\n        });\n        message.success(this.props.t('admin-adsense:update-success'));\n      } else {\n        // create\n        const result = await serviceProxies.createAdsense({\n          name: values.name,\n          hyperlink: values.hyperlink,\n          position: this.state.selectedAdsense!.position,\n          imageUrl,\n        });\n\n        this.setState({\n          loading: {\n            ...this.state.loading,\n            form: false,\n          },\n          selectedAdsense: {\n            _id: (result as any).id,\n            ...values,\n            position: this.state.selectedAdsense!.position,\n            imageUrl,\n          } as any,\n          data: [\n            {\n              _id: (result as any).id,\n              ...values,\n              position: this.state.selectedAdsense!.position,\n              imageUrl,\n              createdAt: new Date().getTime(),\n          } as any,\n            ...this.state.data,\n          ],\n        });\n        message.success(this.props.t('admin-adsense:update-success'));\n      }\n    } catch (error) {\n      message.error(error.message);\n      this.setState({\n        loading: {\n          ...this.state.loading,\n          form: false,\n        },\n      });\n    }\n  }\n\n  uploadLogoImage = async (file: UploadFile) => {\n    this.setState({\n      logoImage: file,\n    });\n  }\n\n  selectedAdsChange = (position: number) => {\n    const selectedAds = this.state.data.filter((item) => item.position === position)[0];\n    this.setState({\n      selectedAdsense: selectedAds && selectedAds._id ? selectedAds : {\n        position,\n      } as any,\n    });\n  }\n\n  render () {\n    return (\n      <div className='admin-adsense-screen'>\n        <Spin spinning={this.state.loading.data}>\n          <Row gutter={36}>\n            <Col xs={8}>\n              <AdsensePositions\n                adsenseInfo={this.state.selectedAdsense as any}\n                selectedAdsChange={this.selectedAdsChange}\n              />\n            </Col>\n            <Col xs={16}>\n              <AdsenseInfo\n                adsenseInfo={this.state.selectedAdsense as any}\n                loading={this.state.loading.form}\n                handleOk={this.handleOk}\n                uploadLogoImage={this.uploadLogoImage}\n              />\n            </Col>\n          </Row>\n        </Spin>\n      </div>\n    );\n  }\n}\n\nconst mapState = (rootState: any) => {\n  return {\n    profileState: rootState.profileModel,\n  };\n};\n\nconst mapDispatch = (_rootReducer: any) => {\n  return {};\n};\n\nconst AdminAdsenseScreen = Authorize(withRematch(initStore, mapState, mapDispatch)(withNamespaces('admin-adsense')(AdminAdsense)), [], true, 'admin');\n\nexport {\n  AdminAdsenseScreen,\n};\n"],"file":"AdminAdsenseScreen.js"}