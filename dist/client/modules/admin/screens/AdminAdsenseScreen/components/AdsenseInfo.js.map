{"version":3,"sources":["../../../../../../../src/client/modules/admin/screens/AdminAdsenseScreen/components/AdsenseInfo.tsx"],"names":["AdsenseInfo","props","BrandValidateSchema","yup","object","shape","imageUrl","string","required","t","hyperlink","initialValues","adsenseInfo","_id","values","handleOk","context","handleSubmit","errors","undefined","padding","margin","width","height","file","uploadLogoImage","result","setFieldValue","handleChange","fieldName","validateSchema","loading"],"mappings":"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","sourcesContent":["import React from 'react';\nimport './AdsenseInfo.less';\nimport * as yup from 'yup';\nimport { Adsense } from '@client/services/service-proxies';\nimport { Formik, FormikContext } from 'formik';\nimport { Form, Card, Upload, Button, Input } from 'antd';\nimport { UploadFile } from 'antd/lib/upload/interface';\nimport { getBase64Image, validateField } from '@client/core';\nimport { withNamespaces } from '@client/i18n';\n\ninterface Props {\n  loading: boolean;\n  adsenseInfo?: Adsense;\n  handleOk: (values: {[key: string]: any}) => void;\n  uploadLogoImage: (file: UploadFile) => void;\n  t: (key: string) => string;\n}\nconst AdsenseInfo = (props: Props) => {\n  const BrandValidateSchema = yup.object().shape({\n    imageUrl: yup.string()\n      .required(props.t('admin-adsense:pleaseUploadImage')),\n    hyperlink: yup.string()\n      .required(props.t('admin-adsense:pleaseInputHyperlink')),\n  });\n  const initialValues = props.adsenseInfo && props.adsenseInfo._id ? {\n    imageUrl: props.adsenseInfo.imageUrl,\n    hyperlink: props.adsenseInfo.hyperlink,\n  } : {\n    imageUrl: '',\n    hyperlink: '',\n  };\n\n  return (\n    <div className='adsense-info'>\n      <h2 className='adsense-title'>\n        {props.t('admin-adsense:adsense-info')}\n      </h2>\n\n      <Formik\n        enableReinitialize={true}\n        initialValues={initialValues}\n        validateOnChange={false}\n        validationSchema={BrandValidateSchema}\n        onSubmit={async (values) => {\n          await props.handleOk(values);\n        }}\n      >\n        {(context: FormikContext<any>) => (\n          <Form onSubmit={context.handleSubmit}>\n            <Form.Item\n              label={`${props.t('admin-adsense:ads-image')}`}\n              validateStatus={context.errors.imageUrl ? 'error' : undefined}\n              help={context.errors.imageUrl}\n            >\n              <Card\n                style={{\n                  padding: '20px 20px 20px 20px',\n                  margin: '0 auto',\n                }}\n                cover={context.values.imageUrl ? <img src={context.values.imageUrl} style={{width: 'auto', height: '460px', margin: '0 auto'}} /> : null}\n              >\n                <Card.Meta\n                  title={\n                    <Upload\n                      beforeUpload={(file: UploadFile) => {\n                        props.uploadLogoImage(file);\n                        getBase64Image(file, (result: string) => {\n                          context.setFieldValue('imageUrl', result);\n                        });\n                        return false;\n                      }}\n                      showUploadList={false}\n                    >\n                      <Button icon='upload'>{props.t('admin-adsense:upload-ads-image')}</Button>\n                    </Upload>\n                  }\n                />\n              </Card>\n            </Form.Item>\n\n            <Form.Item\n              label={`${props.t('admin-adsense:ads-hyperlink')}`}\n              validateStatus={context.errors.hyperlink ? 'error' : undefined}\n              help={context.errors.hyperlink}\n            >\n              <Input\n                value={context.values.hyperlink}\n                onChange={context.handleChange}\n                placeholder={props.t('admin-adsense:ads-hyperlink')}\n                type='text'\n                name='hyperlink'\n                onBlur={() => validateField({\n                  fieldName: 'hyperlink',\n                  validateSchema: BrandValidateSchema,\n                  context,\n                })}\n              />\n            </Form.Item>\n\n            <Form.Item className='button-right'>\n              <Button\n                className='save-button'\n                type='primary'\n                htmlType='submit'\n                loading={props.loading}\n              >\n                {props.t('common:save')}\n              </Button>\n            </Form.Item>\n          </Form>\n        )}\n      </Formik>\n    </div>\n  );\n};\n\nexport default withNamespaces('admin-adsense')(AdsenseInfo);\n"],"file":"AdsenseInfo.js"}