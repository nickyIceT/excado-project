{"version":3,"sources":["../../../../../../../src/client/modules/admin/screens/AdminModelsScreen/components/ModelModal.tsx"],"names":["ModelModal","props","translate","t","formItemLayout","labelCol","span","wrapperCol","initialValues","modelInfo","_id","name","brand","category","ModelValidateSchema","yup","object","shape","string","required","values","formikBag","handleOk","resetForm","modelContext","visible","handleSubmit","handleCancel","loading","marginBottom","errors","undefined","loadingBrands","textAlign","getBrands","value","setFieldValue","fieldName","validateSchema","context","brands","map","val","inputValue","option","children","toLowerCase","indexOf","toLocaleLowerCase","categories","handleChange"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AACA;;AAEA;;AACA;;AAEA;;AACA;;AACA;;;;;;;;;;;;AAcA,IAAMA,UAAU,GAAG,SAAbA,UAAa,CAACC,KAAD,EAAkB;AACnC,MAAMC,SAAS,GAAGD,KAAK,CAACE,CAAxB;AAEA,MAAMC,cAAc,GAAG;AACrBC,IAAAA,QAAQ,EAAE;AAAEC,MAAAA,IAAI,EAAE;AAAR,KADW;AAErBC,IAAAA,UAAU,EAAE;AAAED,MAAAA,IAAI,EAAE;AAAR;AAFS,GAAvB;AAKA,MAAME,aAAa,GAAGP,KAAK,CAACQ,SAAN,IAAmBR,KAAK,CAACQ,SAAN,CAAgBC,GAAnC,GAAyC;AAC7DC,IAAAA,IAAI,EAAEV,KAAK,CAACQ,SAAN,CAAgBE,IADuC;AAE7DC,IAAAA,KAAK,EAAEX,KAAK,CAACQ,SAAN,CAAgBG,KAAhB,CAAsBF,GAFgC;AAG7DG,IAAAA,QAAQ,EAAEZ,KAAK,CAACQ,SAAN,CAAgBI,QAAhB,CAAyBH;AAH0B,GAAzC,GAIlB;AACFC,IAAAA,IAAI,EAAE,EADJ;AAEFC,IAAAA,KAAK,EAAE,EAFL;AAGFC,IAAAA,QAAQ,EAAE;AAHR,GAJJ;AAUA,MAAMC,mBAAmB,GAAGC,GAAG,CAACC,MAAJ,GAAaC,KAAb,CAAmB;AAC7CN,IAAAA,IAAI,EAAEI,GAAG,CAACG,MAAJ,GACHC,QADG,CACMjB,SAAS,CAAC,mCAAD,CADf,CADuC;AAG7CU,IAAAA,KAAK,EAAEG,GAAG,CAACG,MAAJ,GACJC,QADI,CACKjB,SAAS,CAAC,gCAAD,CADd,CAHsC;AAK7CW,IAAAA,QAAQ,EAAEE,GAAG,CAACG,MAAJ,GACPC,QADO,CACEjB,SAAS,CAAC,mCAAD,CADX;AALmC,GAAnB,CAA5B;AASA,SACE,6BAAC,cAAD;AACE,IAAA,aAAa,EAAEM,aADjB;AAEE,IAAA,gBAAgB,EAAE,KAFpB;AAGE,IAAA,gBAAgB,EAAEM,mBAHpB;AAIE,IAAA,QAAQ;AAAA;AAAA;AAAA;AAAA;AAAA,gCAAE,iBAAOM,MAAP,EAAeC,SAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBACFpB,KAAK,CAACqB,QAAN,CAAeF,MAAf,CADE;;AAAA;AAERC,gBAAAA,SAAS,CAACE,SAAV,CAAoB;AAClBZ,kBAAAA,IAAI,EAAE,EADY;AAElBC,kBAAAA,KAAK,EAAE,EAFW;AAGlBC,kBAAAA,QAAQ,EAAE;AAHQ,iBAApB;;AAFQ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAF;;AAAA;AAAA;AAAA;AAAA;AAJV,KAaG,UAACW,YAAD;AAAA,WACC;AACE,MAAA,KAAK,EAAEvB,KAAK,CAACQ,SAAN,IAAmBR,KAAK,CAACQ,SAAN,CAAgBC,GAAnC,aAA4CR,SAAS,CAAC,yBAAD,CAArD,eAAqFD,KAAK,CAACQ,SAAN,CAAgBE,IAArG,cAAiHT,SAAS,CAAC,2BAAD,CAA1H,CADT;AAEE,MAAA,OAAO,EAAED,KAAK,CAACwB,OAFjB;AAGE,MAAA,IAAI,EAAED,YAAY,CAACE,YAHrB;AAIE,MAAA,QAAQ,EAAEzB,KAAK,CAAC0B,YAJlB;AAKE,MAAA,MAAM,EAAEzB,SAAS,CAAC,aAAD,CALnB;AAME,MAAA,UAAU,EAAEA,SAAS,CAAC,eAAD,CANvB;AAOE,MAAA,cAAc,EAAED,KAAK,CAAC2B,OAPxB;AAQE,MAAA,SAAS,EAAC;AARZ,OAUE;AAAM,MAAA,QAAQ,EAAEJ,YAAY,CAACE;AAA7B,OACGzB,KAAK,CAACQ,SAAN,IAAmBR,KAAK,CAACQ,SAAN,CAAgBC,GAAnC,GACC,2CAAM,IAAN;AAAW,MAAA,KAAK,YAAKR,SAAS,CAAC,yBAAD,CAAd;AAAhB,OAAiEE,cAAjE;AAAiF,MAAA,KAAK,EAAE;AAACyB,QAAAA,YAAY,EAAE;AAAf;AAAxF,QACE,6CAAS5B,KAAK,CAACQ,SAAN,CAAgBG,KAAhB,CAAsBD,IAA/B,CADF,CADD,GAKC,2CAAM,IAAN;AACE,MAAA,KAAK,YAAKT,SAAS,CAAC,yBAAD,CAAd,CADP;AAEE,MAAA,KAAK,EAAE;AAAC2B,QAAAA,YAAY,EAAE;AAAf,OAFT;AAGE,MAAA,cAAc,EAAEL,YAAY,CAACM,MAAb,CAAoBlB,KAApB,GAA4B,OAA5B,GAAsCmB,SAHxD;AAIE,MAAA,IAAI,EAAEP,YAAY,CAACM,MAAb,CAAoBlB;AAJ5B,OAKMR,cALN,GAOE;AACE,MAAA,KAAK,EAAEoB,YAAY,CAACJ,MAAb,CAAoBR,KAApB,GAA4BY,YAAY,CAACJ,MAAb,CAAoBR,KAAhD,GAAwDmB,SADjE;AAEE,MAAA,eAAe,EAAE9B,KAAK,CAAC+B,aAAN,GAAsB;AAAK,QAAA,KAAK,EAAE;AAACC,UAAAA,SAAS,EAAE;AAAZ;AAAZ,SAAmC;AAAM,QAAA,IAAI,EAAC;AAAX,QAAnC,CAAtB,GAAuF,IAF1G;AAGE,MAAA,UAAU,EAAE,IAHd;AAIE,MAAA,YAAY,EAAE,KAJhB;AAKE,MAAA,WAAW,EAAE/B,SAAS,CAAC,2BAAD,CALxB;AAME,MAAA,QAAQ,EAAED,KAAK,CAACiC,SANlB;AAOE,MAAA,QAAQ,EAAE,kBAACC,KAAD,EAAW;AACnBX,QAAAA,YAAY,CAACY,aAAb,CAA2B,OAA3B,EAAoCD,KAApC;AACD,OATH;AAUE,MAAA,MAAM,EAAE;AAAA,eAAM,yBAAc;AAC1BE,UAAAA,SAAS,EAAE,OADe;AAE1BC,UAAAA,cAAc,EAAExB,mBAFU;AAG1ByB,UAAAA,OAAO,EAAEf;AAHiB,SAAd,CAAN;AAAA;AAVV,OAgBGvB,KAAK,CAACuC,MAAN,CAAaC,GAAb,CAAiB,UAACC,GAAD,EAAc;AAC9B,aAAO,6CAAQ,MAAR;AAAe,QAAA,KAAK,EAAEA,GAAG,CAAChC,GAA1B;AAA+B,QAAA,GAAG,EAAEgC,GAAG,CAAChC;AAAxC,SAA8CgC,GAAG,CAAC/B,IAAlD,CAAP;AACD,KAFA,CAhBH,CAPF,CANJ,EAoCGV,KAAK,CAACQ,SAAN,IAAmBR,KAAK,CAACQ,SAAN,CAAgBC,GAAnC,GACC,2CAAM,IAAN;AAAW,MAAA,KAAK,YAAKR,SAAS,CAAC,4BAAD,CAAd;AAAhB,OAAoEE,cAApE;AAAoF,MAAA,KAAK,EAAE;AAACyB,QAAAA,YAAY,EAAE;AAAf;AAA3F,QACE,6CAAS5B,KAAK,CAACQ,SAAN,CAAgBI,QAAhB,CAAyBF,IAAlC,CADF,CADD,GAKC,2CAAM,IAAN;AACE,MAAA,KAAK,EAAE;AAACkB,QAAAA,YAAY,EAAE;AAAf,OADT;AAEE,MAAA,cAAc,EAAEL,YAAY,CAACM,MAAb,CAAoBjB,QAApB,GAA+B,OAA/B,GAAyCkB,SAF3D;AAGE,MAAA,IAAI,EAAEP,YAAY,CAACM,MAAb,CAAoBjB,QAH5B;AAIE,MAAA,KAAK,YAAKX,SAAS,CAAC,4BAAD,CAAd;AAJP,OAKME,cALN,GAOE;AACE,MAAA,UAAU,EAAE,IADd;AAEE,MAAA,YAAY,EAAE,sBAACuC,UAAD,EAAaC,MAAb;AAAA,eAAwB,sBAASA,MAAM,CAAC3C,KAAP,CAAa4C,QAAd,CAA+BC,WAA/B,EAAR,EAAsDC,OAAtD,CAA8D,sBAAQJ,UAAU,CAACK,iBAAX,EAAR,CAA9D,MAA2G,CAAnI;AAAA,OAFhB;AAGE,MAAA,WAAW,EAAE9C,SAAS,CAAC,8BAAD,CAHxB;AAIE,MAAA,KAAK,EAAEsB,YAAY,CAACJ,MAAb,CAAoBP,QAApB,GAA+BW,YAAY,CAACJ,MAAb,CAAoBP,QAAnD,GAA8DkB,SAJvE;AAKE,MAAA,QAAQ,EAAE,kBAACI,KAAD,EAAW;AACnBX,QAAAA,YAAY,CAACY,aAAb,CAA2B,UAA3B,EAAuCD,KAAvC;AACD,OAPH;AAQE,MAAA,MAAM,EAAE;AAAA,eAAM,yBAAc;AAC1BE,UAAAA,SAAS,EAAE,UADe;AAE1BC,UAAAA,cAAc,EAAExB,mBAFU;AAG1ByB,UAAAA,OAAO,EAAEf;AAHiB,SAAd,CAAN;AAAA;AARV,OAcGvB,KAAK,CAACgD,UAAN,CAAiBR,GAAjB,CAAqB,UAACC,GAAD,EAAc;AAClC,aAAO,6CAAQ,MAAR;AAAe,QAAA,KAAK,EAAEA,GAAG,CAAChC,GAA1B;AAA+B,QAAA,GAAG,EAAEgC,GAAG,CAAChC;AAAxC,SAA8CgC,GAAG,CAAC/B,IAAlD,CAAP;AACD,KAFA,CAdH,CAPF,CAzCJ,EAqEE,2CAAM,IAAN;AACE,MAAA,KAAK,YAAKT,SAAS,CAAC,yBAAD,CAAd,CADP;AAEE,MAAA,cAAc,EAAEsB,YAAY,CAACM,MAAb,CAAoBnB,IAApB,GAA2B,OAA3B,GAAqCoB,SAFvD;AAGE,MAAA,IAAI,EAAEP,YAAY,CAACM,MAAb,CAAoBnB;AAH5B,OAIMP,cAJN,GAME;AACE,MAAA,KAAK,EAAEoB,YAAY,CAACJ,MAAb,CAAoBT,IAD7B;AAEE,MAAA,QAAQ,EAAEa,YAAY,CAAC0B,YAFzB;AAGE,MAAA,WAAW,EAAEhD,SAAS,CAAC,yBAAD,CAHxB;AAIE,MAAA,IAAI,EAAC,MAJP;AAKE,MAAA,IAAI,EAAC,MALP;AAME,MAAA,MAAM,EAAE;AAAA,eAAM,yBAAc;AAC1BmC,UAAAA,SAAS,EAAE,MADe;AAE1BC,UAAAA,cAAc,EAAExB,mBAFU;AAG1ByB,UAAAA,OAAO,EAAEf;AAHiB,SAAd,CAAN;AAAA;AANV,MANF,CArEF,CAVF,CADD;AAAA,GAbH,CADF;AAsHD,CAjJD;;eAmJe,0BAAe,cAAf,EAA+BxB,UAA/B,C","sourcesContent":["import React from 'react';\nimport './ModelModal.less';\nimport { Model, Brand, Category } from '@client/services/service-proxies';\nimport { Formik, FormikContext } from 'formik';\nimport * as yup from 'yup';\nimport { Modal, Form, Input, Select, Spin } from 'antd';\nimport { validateField } from '@client/core';\nimport slugify from 'slugify';\nimport { withNamespaces } from '@client/i18n';\n\ninterface Props {\n  modelInfo?: Model;\n  brands: Brand[];\n  categories: Category[];\n  loading: boolean;\n  loadingBrands: boolean;\n  visible: boolean;\n  handleOk: (values: {[key: string]: any}) => void;\n  handleCancel: () => void;\n  getBrands: (value: string) => void;\n  t: (key: string) => string;\n}\nconst ModelModal = (props: Props) => {\n  const translate = props.t;\n\n  const formItemLayout = {\n    labelCol: { span: 6},\n    wrapperCol: { span: 18},\n  };\n\n  const initialValues = props.modelInfo && props.modelInfo._id ? {\n    name: props.modelInfo.name,\n    brand: props.modelInfo.brand._id,\n    category: props.modelInfo.category._id,\n  } : {\n    name: '',\n    brand: '',\n    category: '',\n  };\n\n  const ModelValidateSchema = yup.object().shape({\n    name: yup.string()\n      .required(translate('admin-models:pleaseInputModelName')),\n    brand: yup.string()\n      .required(translate('admin-models:pleaseSelectBrand')),\n    category: yup.string()\n      .required(translate('admin-models:pleaseSelectCategory')),\n  });\n\n  return (\n    <Formik\n      initialValues={initialValues}\n      validateOnChange={false}\n      validationSchema={ModelValidateSchema}\n      onSubmit={async (values, formikBag) => {\n        await props.handleOk(values);\n        formikBag.resetForm({\n          name: '',\n          brand: '',\n          category: '',\n        });\n      }}\n    >\n      {(modelContext: FormikContext<any>) => (\n        <Modal\n          title={props.modelInfo && props.modelInfo._id ? `${translate('admin-models:edit-model')}: ${props.modelInfo.name}` : `${translate('admin-models:create-model')}`}\n          visible={props.visible}\n          onOk={modelContext.handleSubmit}\n          onCancel={props.handleCancel}\n          okText={translate('common:save')}\n          cancelText={translate('common:cancel')}\n          confirmLoading={props.loading}\n          className='model-modal'\n        >\n          <Form onSubmit={modelContext.handleSubmit}>\n            {props.modelInfo && props.modelInfo._id ? (\n              <Form.Item label={`${translate('admin-models:brand-name')}`} {...formItemLayout} style={{marginBottom: '0px'}}>\n                <strong>{props.modelInfo.brand.name}</strong>\n              </Form.Item>\n            ) : (\n              <Form.Item\n                label={`${translate('admin-models:brand-name')}`}\n                style={{marginBottom: '0px'}}\n                validateStatus={modelContext.errors.brand ? 'error' : undefined}\n                help={modelContext.errors.brand}\n                {...formItemLayout}\n              >\n                <Select\n                  value={modelContext.values.brand ? modelContext.values.brand : undefined}\n                  notFoundContent={props.loadingBrands ? <div style={{textAlign: 'center'}}><Spin size='small' /></div> : null}\n                  showSearch={true}\n                  filterOption={false}\n                  placeholder={translate('admin-models:select-brand')}\n                  onSearch={props.getBrands}\n                  onSelect={(value) => {\n                    modelContext.setFieldValue('brand', value);\n                  }}\n                  onBlur={() => validateField({\n                    fieldName: 'brand',\n                    validateSchema: ModelValidateSchema,\n                    context: modelContext,\n                  })}\n                >\n                  {props.brands.map((val: any) => {\n                    return <Select.Option value={val._id} key={val._id}>{val.name}</Select.Option>;\n                  })}\n                </Select>\n              </Form.Item>\n            )}\n\n            {props.modelInfo && props.modelInfo._id ? (\n              <Form.Item label={`${translate('admin-models:category-name')}`} {...formItemLayout} style={{marginBottom: '0px'}}>\n                <strong>{props.modelInfo.category.name}</strong>\n              </Form.Item>\n            ) : (\n              <Form.Item\n                style={{marginBottom: '0px'}}\n                validateStatus={modelContext.errors.category ? 'error' : undefined}\n                help={modelContext.errors.category}\n                label={`${translate('admin-models:category-name')}`}\n                {...formItemLayout}\n              >\n                <Select\n                  showSearch={true}\n                  filterOption={(inputValue, option) => slugify((option.props.children as any).toLowerCase()).indexOf(slugify(inputValue.toLocaleLowerCase())) === 0}\n                  placeholder={translate('admin-models:select-category')}\n                  value={modelContext.values.category ? modelContext.values.category : undefined}\n                  onChange={(value) => {\n                    modelContext.setFieldValue('category', value);\n                  }}\n                  onBlur={() => validateField({\n                    fieldName: 'category',\n                    validateSchema: ModelValidateSchema,\n                    context: modelContext,\n                  })}\n                >\n                  {props.categories.map((val: any) => {\n                    return <Select.Option value={val._id} key={val._id}>{val.name}</Select.Option>;\n                  })}\n                </Select>\n              </Form.Item>\n            )}\n\n            <Form.Item\n              label={`${translate('admin-models:model-name')}`}\n              validateStatus={modelContext.errors.name ? 'error' : undefined}\n              help={modelContext.errors.name}\n              {...formItemLayout}\n            >\n              <Input\n                value={modelContext.values.name}\n                onChange={modelContext.handleChange}\n                placeholder={translate('admin-models:model-name')}\n                type='text'\n                name='name'\n                onBlur={() => validateField({\n                  fieldName: 'name',\n                  validateSchema: ModelValidateSchema,\n                  context: modelContext,\n                })}\n              />\n            </Form.Item>\n          </Form>\n        </Modal>\n      )}\n    </Formik>\n  );\n};\n\nexport default withNamespaces('admin-models')(ModelModal);\n"],"file":"ModelModal.js"}