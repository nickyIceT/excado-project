{"version":3,"sources":["../../../../../../../src/client/modules/auth/screens/EditProfileScreen/components/UserProfileForm.tsx"],"names":["Option","FormItem","Item","EditableContext","React","createContext","EditableRow","form","index","props","EditableFormRow","create","EditableCell","translate","t","renderForm","record","getFieldDecorator","key","margin","rules","required","message","initialValue","value","familyName","validateTrigger","givenName","pattern","config","regex","phone","len","width","provinces","map","item","_id","name","minRows","validator","_rule","callback","getFieldValue","editing","restProps","wordBreak","whiteSpace","children","Component","EditableTable","setState","editingKey","filterProvince","filter","userProfile","province","currentNameProvince","data","label","phoneNo","email","loginDetail","address","description","provider","push","state","columns","title","dataIndex","isMobile","editable","render","_text","Object","keys","join","save","marginBottom","marginRight","cancel","edit","validateFields","error","row","editUserProfile","success","ite","components","body","cell","col","onCell","loading","UserProfileForm"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { Form, Table, Input, Select, Button } from 'antd';\nimport { User, Province } from '../../../../../services/service-proxies';\nimport { isMobile } from 'react-device-detect';\nimport { config } from '@client/config';\nconst Option = Select.Option;\nconst FormItem = Form.Item;\nconst EditableContext = React.createContext({});\n\nconst EditableRow = ({ form, index, ...props }: any) => (\n  <EditableContext.Provider value={form}>\n    <tr {...props} />\n  </EditableContext.Provider>\n);\n\nconst EditableFormRow = Form.create()(EditableRow);\n\ninterface EditableCellProps {\n  editing: boolean;\n  record: any;\n  provinces: Province[];\n  t: (key: string) => string;\n}\nclass EditableCell extends React.Component<EditableCellProps, {}> {\n  // tslint:disable:trailing-comma\n  render() {\n    const translate = this.props.t;\n    const renderForm = (record: any, form: any) => {\n      const { getFieldDecorator } = form;\n\n      switch (record.key) {\n        case 'name':\n          return (\n            <Form>\n              <FormItem style={{ margin: 0 }}>\n                {getFieldDecorator('familyName', {\n                  rules: [\n                    { required: true, message: `${translate('edit-profile:input-last-name')}` },\n                  ],\n                  initialValue: record.value.familyName,\n                  validateTrigger: 'onBlur',\n                })(\n                  <Input placeholder={translate('edit-profile:your-last-name')} name='familyName' />\n                )}\n              </FormItem>\n              <FormItem style={{ margin: 0 }}>\n                {getFieldDecorator('givenName', {\n                  rules: [\n                    { required: true, message: `${translate('edit-profile:input-first-name')}` },\n                  ],\n                  initialValue: record.value.givenName,\n                  validateTrigger: 'onBlur',\n                })(\n                  <Input placeholder={translate('edit-profile:your-first-name')} name='givenName' />\n                )}\n              </FormItem>\n            </Form>\n          );\n        case 'phoneNo':\n          return (\n            <FormItem style={{ margin: 0 }}>\n              {getFieldDecorator('phoneNo', {\n                rules: [\n                  { required: true, message: `${translate('edit-profile:input-phone')}` },\n                  { pattern: config.regex.phone, message: `${translate('edit-profile:invalid-phone')}` },\n                  { len: 12, message: translate('edit-profile:invalid-phone') }\n                ],\n                initialValue: record.value ? record.value : '+84',\n                validateTrigger: 'onBlur',\n              })(\n                <Input\n                  placeholder={translate('edit-profile:your-phone')}\n                  name='phoneNo'\n                />\n              )}\n            </FormItem>\n          );\n        case 'email':\n          return (\n            <FormItem style={{ margin: 0 }}>\n              {getFieldDecorator('email', {\n                rules: [\n                  { required: true, message: `${translate('edit-profile:input-email')}` },\n                ],\n                initialValue: record.value,\n                validateTrigger: 'onBlur',\n              })(\n                <Input\n                  placeholder={translate('edit-profile:your-email')}\n                  name='email'\n                />\n              )}\n            </FormItem>\n          );\n        case 'address':\n          return (\n            <FormItem style={{ margin: 0 }}>\n              {getFieldDecorator('address', {\n                rules: [\n                  { required: true, message: `${translate('edit-profile:input-address')}` },\n                ],\n                initialValue: record.value,\n                validateTrigger: 'onBlur',\n              })(\n                <Input\n                  placeholder={translate('edit-profile:your-address')}\n                  name='address'\n                />\n              )}\n            </FormItem>\n          );\n        case 'province':\n          return (\n            <FormItem style={{ margin: 0 }}>\n              {getFieldDecorator('province', {\n                rules: [\n                  { required: true, message: `${translate('edit-profile:input-province')}` },\n                ],\n                initialValue: record.value,\n                validateTrigger: 'onBlur',\n              })(\n                <Select style={{ width: '100%' }} placeholder={translate('edit-profile:select-province')}>\n                  {this.props.provinces.map((item: any, index: any) => <Option value={item._id} key={index}>{item.name}</Option>)}\n                </Select>\n              )}\n            </FormItem>\n          );\n        case 'description':\n          return (\n            <FormItem style={{ margin: 0 }}>\n              {getFieldDecorator('description', {\n                rules: [\n                  { required: true, message: `${translate('edit-profile:input-description')}` },\n                ],\n                initialValue: record.value,\n                validateTrigger: 'onBlur',\n              })(\n                <Input.TextArea\n                  placeholder={translate('edit-profile:your-description')}\n                  name='description'\n                  autosize={{ minRows: 5 }}\n                />\n              )}\n            </FormItem>\n          );\n        case 'newPassword':\n          return (\n            <Form>\n              <FormItem style={{ margin: 0 }}>\n                {getFieldDecorator('newPassword', {\n                  rules: [\n                    { required: true, message: `${translate('edit-profile:input-new-password')}` },\n                  ],\n                  initialValue: record.value,\n                  validateTrigger: 'onBlur',\n                })(\n                  <Input type='password' placeholder={translate('edit-profile:new-password')} name='newPassword' />\n                )}\n              </FormItem>\n              <FormItem style={{ margin: 0 }}>\n                {getFieldDecorator('confirmPassword', {\n                  rules: [\n                    { required: true, message: `${translate('edit-profile:input-confirm-password')}` },\n                    {\n                      validator: (_rule: any, value: string, callback: any) => {\n                        if (value !== form.getFieldValue('newPassword')) {\n                          callback(`${translate('edit-profile:confirm-password-error')}`);\n                        }\n                        callback();\n                      }\n                    }\n                  ],\n                  validateTrigger: 'onBlur',\n                })(\n                  <Input type='password' placeholder={translate('edit-profile:confirm-password')} name='confirmPassword' />\n                )}\n              </FormItem>\n            </Form>\n          );\n        default:\n          return null;\n      }\n    };\n\n    const {\n      editing,\n      ...restProps\n    } = this.props;\n\n    return (\n      <EditableContext.Consumer>\n        {(form: any) => {\n          return (\n            <td {...restProps}>\n              {editing ? renderForm(this.props.record, form) : (\n                <div style={{ wordBreak: 'break-word', whiteSpace: 'pre-line' }}>\n                  {restProps.children}\n                </div>\n              )}\n            </td>\n          );\n        }}\n      </EditableContext.Consumer>\n    );\n  }\n}\n\ninterface EditableTableProps {\n  provinces: Province[];\n  loading: boolean;\n  userProfile: Partial<User>;\n  editUserProfile: (payload: any) => Promise<boolean>;\n  t: (key: string) => string;\n}\ninterface EditableTableState {\n  data: any[];\n  editingKey: string;\n}\nclass EditableTable extends React.Component<EditableTableProps, EditableTableState> {\n  columns: any;\n\n  constructor(props: EditableTableProps) {\n    super(props);\n    const translate = props.t;\n    const filterProvince = this.props.provinces.filter((item) => item._id === (props.userProfile as any).province);\n    const currentNameProvince = filterProvince[0] ? filterProvince[0].name : '';\n    const data = [\n      { label: `${translate('edit-profile:fullname')}`, value: { familyName: props.userProfile.familyName, givenName: props.userProfile.givenName }, key: 'name' },\n      { label: `${translate('edit-profile:phone')}`, value: props.userProfile.phoneNo, key: 'phoneNo' },\n      { label: `${translate('edit-profile:email')}`, value: props.userProfile.email || props.userProfile.loginDetail.email, key: 'email' },\n      { label: `${translate('edit-profile:address')}`, value: props.userProfile.address, key: 'address' },\n      { label: `${translate('edit-profile:province')}`, value: currentNameProvince, key: 'province' },\n      { label: `${translate('edit-profile:description')}`, value: props.userProfile.description, key: 'description' },\n    ];\n    if (props.userProfile.loginDetail.provider === 'email') {\n      data.push(\n        { label: `${translate('edit-profile:password')}`, value: '', key: 'newPassword' },\n      );\n    }\n    this.state = {\n      data,\n      editingKey: '',\n    };\n\n    this.columns = [\n      {\n        title: 'Label',\n        dataIndex: 'label',\n        width: isMobile ? '30%' : '20%',\n        editable: false,\n      },\n      {\n        title: 'Value',\n        dataIndex: 'value',\n        width: isMobile ? '50%' : '50%',\n        editable: true,\n        render: (_text: any, record: any) => typeof record.value === 'object' ? Object.keys(record.value).map((item) => record.value[item]).join(' ') : record ? record.value : '',\n      },\n      {\n        title: 'Operations',\n        dataIndex: 'operation',\n        render: (_text: string, record: any) => {\n          const editable = record.key === this.state.editingKey;\n\n          return (\n            <div>\n              {editable ? (\n                <span>\n                  <EditableContext.Consumer>\n                    {(form) => (\n                      <Button onClick={() => this.save(form, record.key)} style={{marginBottom: '8px', marginRight: '8px'}} type='primary' icon='check'>{translate('edit-profile:save')}</Button>\n                    )}\n                  </EditableContext.Consumer>\n                    <Button onClick={() => this.cancel()} icon='close'>{translate('edit-profile:cancel')}</Button>\n                </span>\n              ) : (\n                <Button onClick={() => this.edit(record.key)} type='primary' icon='edit'>{translate('edit-profile:change')}</Button>\n              )}\n            </div>\n          );\n        },\n      },\n    ];\n  }\n\n  cancel = () => {\n    this.setState({\n      editingKey: '',\n    });\n  };\n\n  edit(key: string) {\n    this.setState({ editingKey: key });\n  }\n\n  save(form: any, key: string) {\n    form.validateFields(async (error: any, row: any) => {\n      if (!error) {\n        const success = await this.props.editUserProfile(row);\n        if (success) {\n          this.setState({\n            editingKey: '',\n            data: this.state.data.map((item) => {\n              if (key === 'newPassword') {\n                return item;\n              } else if (item.key === key && item.key !== 'province') {\n                return {\n                  ...item,\n                  value: row.familyName ? row : row[key],\n                };\n              } else if (item.key === key && item.key === 'province') {\n                const filterProvince = this.props.provinces.filter((ite) => ite._id === row[key]);\n                const currentNameProvince = filterProvince[0] ? filterProvince[0].name : '';\n                return {\n                  ...item,\n                  value: currentNameProvince,\n                };\n              } else {\n                return item;\n              }\n            }),\n          });\n        }\n      }\n    });\n  }\n\n  render() {\n    const components = {\n      body: {\n        row: EditableFormRow,\n        cell: EditableCell,\n      },\n    };\n\n    const columns = this.columns.map((col: any) => {\n      if (!col.editable) {\n        return col;\n      } else {\n        return {\n          ...col,\n          onCell: (record: any) => ({\n            record,\n            provinces: this.props.provinces,\n            editing: record.key === this.state.editingKey,\n            t: this.props.t,\n          }),\n        };\n      }\n    });\n\n    return (\n      <div>\n        <Table\n          loading={this.props.loading}\n          components={components}\n          pagination={false}\n          showHeader={false}\n          dataSource={this.state.data}\n          columns={columns}\n          rowClassName={() => 'editable-row'}\n        />\n      </div>\n    );\n  }\n}\n\ninterface Props {\n  loading: boolean;\n  userProfile: Partial<User>;\n  editUserProfile: (payload: any) => Promise<boolean>;\n  provinces: Province[];\n  t: (key: string) => string;\n}\ninterface State { }\nclass UserProfileForm extends React.Component<Props, State> {\n  render() {\n    return (\n      <EditableTable\n        provinces={this.props.provinces}\n        loading={this.props.loading}\n        userProfile={this.props.userProfile}\n        editUserProfile={this.props.editUserProfile}\n        t={this.props.t}\n      />\n    );\n  }\n}\n\nexport default UserProfileForm;\n"],"file":"UserProfileForm.js"}