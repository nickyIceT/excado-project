{"version":3,"sources":["../../../../../../src/client/modules/auth/screens/RegisterScreen/RegisterScreen.tsx"],"names":["ValidateRegistrationSchema","yup","object","shape","firstName","string","min","max","required","lastName","email","password","matches","config","regex","confirmPassword","RegisterScreen","loading","register","values","setState","state","firebase","auth","createUserWithEmailAndPassword","currentUser","sendEmailVerification","success","error","message","errors","formikBag","resetForm","props","handleChange","handleSubmit","React","Component"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { AuthLayout } from '../../../../layouts';\nimport { RegisterForm } from './components/RegisterForm';\nimport { Formik, FormikContext } from 'formik';\nimport * as yup from 'yup';\nimport { message } from 'antd';\nimport firebase from 'firebase/app';\nimport 'firebase/auth';\nimport { config } from '@client/config';\n\ninterface State {\n  loading: {\n    register: boolean;\n  };\n}\ninterface Props {}\n\nconst ValidateRegistrationSchema = yup.object().shape({\n  firstName: yup.string()\n    .min(2, 'Too short!')\n    .max(50, 'Too long!')\n    .required('Required'),\n  lastName: yup.string()\n    .min(2, 'Too short!')\n    .max(50, 'Too long!')\n    .required('Required'),\n  email: yup.string()\n    .email('Invalid email')\n    .required('Required'),\n  password: yup.string()\n    .matches(config.regex.password, 'Password must be more than 6 characters and contain at least 1 number')\n    .required(),\n  confirmPassword: yup.string()\n    .required('Required'),\n});\n\nexport class RegisterScreen extends React.Component<Props, State> {\n  state: State = {\n    loading: {\n      register: false,\n    },\n  };\n\n  register = async (values: any) => {\n    this.setState({\n      loading: {\n        ...this.state.loading,\n        register: true,\n      },\n    });\n\n    try {\n      await firebase.auth().createUserWithEmailAndPassword(values.email, values.password);\n      firebase.auth().currentUser!.sendEmailVerification();\n      message.success('Register success. Please verify your email!!', 4);\n    } catch (error) {\n      message.error(error.message);\n    }\n\n    this.setState({\n      loading: {\n        ...this.state.loading,\n        register: false,\n      },\n    });\n  }\n\n  render () {\n    return (\n      <AuthLayout pageName='register'>\n        <Formik\n          initialValues={{\n            firstName: '',\n            lastName: '',\n            email: '',\n            password: '',\n            confirmPassword: '',\n          }}\n          validateOnChange={false}\n          validationSchema={ValidateRegistrationSchema}\n          validate={(values) => {\n            const errors: any = {};\n            if (values.password !== values.confirmPassword) {\n              errors.confirmPassword = `Confirm password didn't match`;\n            }\n            return errors;\n          }}\n          onSubmit={async (values, formikBag) => {\n            await this.register(values);\n            formikBag.resetForm({});\n          }}\n        >\n          {(props: FormikContext<any>) => (\n            <div className='form-container'>\n              <RegisterForm\n                isRegister={this.state.loading.register}\n                handleChange={props.handleChange}\n                handleSubmit={props.handleSubmit}\n                error={props.errors}\n                values={props.values}\n              />\n            </div>\n          )}\n        </Formik>\n      </AuthLayout>\n    );\n  }\n}\n"],"file":"RegisterScreen.js"}