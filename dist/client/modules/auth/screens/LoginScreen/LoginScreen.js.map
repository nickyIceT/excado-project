{"version":3,"sources":["../../../../../../src/client/modules/auth/screens/LoginScreen/LoginScreen.tsx"],"names":["BaseLoginScreen","activeTab","loading","login","getVerifyCode","setState","loginType","state","idToken","props","form","validateFields","error","values","firebase","auth","signInWithEmailAndPassword","email","password","currentUser","getIdToken","window","confirmationResult","confirm","verificationCode","document","getElementById","input","createElement","type","name","value","appendChild","submit","success","message","phoneNumber","phoneId","appVerifier","recaptchaVerifier","signInWithPhoneNumber","RecaptchaVerifier","getFieldDecorator","activeTabChange","handleSubmit","getCode","React","Component","LoginScreen","create"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { Form, message } from 'antd';\nimport { LoginForm } from './components/LoginForm';\nimport { FormComponentProps } from 'antd/lib/form';\nimport firebase from 'firebase/app';\nimport 'firebase/auth';\nimport { AuthLayout } from '../../../../layouts';\n\ninterface State {\n  activeTab: 'email'|'phone';\n  loading: {\n    login: boolean;\n    getVerifyCode: boolean;\n  };\n}\ninterface Props extends FormComponentProps {}\nclass BaseLoginScreen extends React.Component<Props, State> {\n  state: State = {\n    activeTab: 'email',\n    loading: {\n      login: false,\n      getVerifyCode: false,\n    },\n  };\n\n  componentDidMount() {\n    (window as any).recaptchaVerifier = new firebase.auth.RecaptchaVerifier('recaptcha', {\n      'size': 'invisible',\n    });\n  }\n\n  activeTabChange = ({activeTab}: {activeTab: 'email'|'phone'}) => {\n    this.setState({\n      activeTab,\n    });\n  }\n\n  handleSubmit = async (loginType: string) => {\n    this.setState({\n      loading: {\n        ...this.state.loading,\n        login: true,\n      },\n    });\n\n    try {\n      let idToken = '';\n      if (loginType === 'email') {\n        this.props.form.validateFields(['email', 'password'], async (error, values) => {\n          if (!error) {\n            await firebase.auth().signInWithEmailAndPassword(values.email, values.password);\n            idToken = await firebase.auth().currentUser!.getIdToken();\n          }\n        });\n      } else if (loginType === 'phone') {\n        this.props.form.validateFields(['verificationCode'], async (error, values) => {\n          if (!error) {\n            await (window as any).confirmationResult.confirm(values.verificationCode);\n            idToken = await firebase.auth().currentUser!.getIdToken();\n          }\n        });\n      }\n\n      if (idToken) {\n        const form = document.getElementById('form');\n        const input = document.createElement('input');\n        input.type = 'text';\n        input.name = 'token';\n        input.value = idToken;\n        form!.appendChild(input);\n        (form as any).submit();\n        message.success('Log in success!!');\n      }\n    } catch (error) {\n      message.error(error.message);\n    }\n\n    this.setState({\n      loading: {\n        ...this.state.loading,\n        login: false,\n      },\n    });\n  }\n\n  getCode = () => {\n    this.setState({\n      loading: {\n        ...this.state.loading,\n        getVerifyCode: true,\n      },\n    });\n\n    try {\n      this.props.form.validateFields(['phoneNumber', 'phoneId'], async (error: any, values: any) => {\n        if (!error) {\n          const phoneNumber = `${values.phoneId}${values.phoneNumber}`;\n          const appVerifier = (window as any).recaptchaVerifier;\n          const confirmationResult = await firebase.auth().signInWithPhoneNumber(phoneNumber, appVerifier);\n          (window as any).confirmationResult = confirmationResult;\n          message.success('Send verification code success!!');\n        }\n      });\n    } catch (error) {\n      message.error(error.message);\n    }\n\n    this.setState({\n      loading: {\n        ...this.state.loading,\n        getVerifyCode: false,\n      },\n    });\n  }\n\n  render() {\n    return (\n      <AuthLayout pageName='login'>\n        <Form>\n          <div className='form-container'>\n            <LoginForm\n              isLogin={this.state.loading.login}\n              isSendingVerificationCode={this.state.loading.getVerifyCode}\n              activeTab={this.state.activeTab}\n              getFieldDecorator={this.props.form.getFieldDecorator}\n              loginTabChange={this.activeTabChange as any}\n              handleSubmit={this.handleSubmit}\n              getVerificationCode={this.getCode}\n            />\n          </div>\n        </Form>\n      </AuthLayout>\n    );\n  }\n}\n\nexport const LoginScreen = Form.create()(BaseLoginScreen);\n"],"file":"LoginScreen.js"}