{"version":3,"sources":["../../../src/client/pages/all-brands.tsx"],"names":["Brands","props","searchKeyword","topBrands","brandsResult","updateFilters","profileState","profileReducers","_context","serviceProxy","Promise","all","findTopBrands","findBrandList","data","Component","mapState","rootState","profileModel","searchModel","filters","keyword","mapDispatch","rootReducer","initStore"],"mappings":";;;;;;;;;AAAA;;AACA;;AAEA;;AACA;;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IAWMA,M;;;;;;;;;;;;;6BAcK;AACP,aACE,6BAAC,wBAAD;AACE,QAAA,aAAa,EAAE,KAAKC,KAAL,CAAWC,aAD5B;AAEE,QAAA,SAAS,EAAE,KAAKD,KAAL,CAAWE,SAFxB;AAGE,QAAA,YAAY,EAAE,KAAKF,KAAL,CAAWG,YAH3B;AAIE,QAAA,aAAa,EAAE,KAAKH,KAAL,CAAWI,aAJ5B;AAKE,QAAA,YAAY,EAAE,KAAKJ,KAAL,CAAWK,YAL3B;AAME,QAAA,eAAe,EAAE,KAAKL,KAAL,CAAWM;AAN9B,QADF;AAUD;;;;;;iDAxB6BC,Q;;;;;;;AACtBC,gBAAAA,Y,GAAe,gC;;uBACmBC,OAAO,CAACC,GAAR,CAAY,CAClDF,YAAY,CAACG,aAAb,EADkD,EAElDH,YAAY,CAACI,aAAb,EAFkD,CAAZ,C;;;;;AAAjCV,gBAAAA,S;AAAWC,gBAAAA,Y;kDAKX;AACLD,kBAAAA,SAAS,EAAEA,SAAS,CAACW,IADhB;AAELV,kBAAAA,YAAY,EAAZA;AAFK,iB;;;;;;;;;;;;;;;;;;;EARUW,gB;;AA4BrB,IAAMC,QAAQ,GAAG,SAAXA,QAAW,CAACC,SAAD,EAAoB;AACnC,SAAO;AACLX,IAAAA,YAAY,EAAEW,SAAS,CAACC,YADnB;AAELhB,IAAAA,aAAa,EAAEe,SAAS,CAACE,WAAV,CAAsBC,OAAtB,CAA8BC;AAFxC,GAAP;AAID,CALD;;AAOA,IAAMC,WAAW,GAAG,SAAdA,WAAc,CAACC,WAAD,EAAsB;AACxC,SAAO;AACLhB,IAAAA,eAAe,EAAEgB,WAAW,CAACL,YADxB;AAELb,IAAAA,aAAa,EAAEkB,WAAW,CAACJ,WAAZ,CAAwBd;AAFlC,GAAP;AAID,CALD;;eAOe,wBAAYmB,gBAAZ,EAAuBR,QAAvB,EAAiCM,WAAjC,EAA8C,0BAAe,QAAf,EAAyBtB,MAAzB,CAA9C,C","sourcesContent":["import React, { Component } from 'react';\nimport AllBrandsScreen from '../modules/machine-news/screens/AllBrandsScreen/AllBrandsScreen';\nimport { Brand, CommonKeyword, FindBrandsResult } from '../services/service-proxies';\nimport { withRematch, initStore, ProfileState, ProfileEffects, ProfileReducers } from '../store';\nimport { withNamespaces } from '../i18n';\nimport { NextContext } from 'next';\nimport { getServiceProxy } from '../services';\n\ninterface Props {\n  brandsResult: FindBrandsResult;\n  topBrands: Brand[];\n  searchKeyword: string;\n  profileState: ProfileState;\n  profileReducers: ProfileReducers & ProfileEffects;\n  updateFilters: (payload: {[key: string]: string|number}) => void;\n}\ninterface State {}\nclass Brands extends Component<Props, State> {\n  static async getInitialProps (_context: NextContext) {\n    const serviceProxy = getServiceProxy();\n    const [topBrands, brandsResult] = await Promise.all([\n      serviceProxy.findTopBrands(),\n      serviceProxy.findBrandList(),\n    ]);\n\n    return {\n      topBrands: topBrands.data,\n      brandsResult,\n    };\n  }\n\n  render() {\n    return (\n      <AllBrandsScreen\n        searchKeyword={this.props.searchKeyword}\n        topBrands={this.props.topBrands}\n        brandsResult={this.props.brandsResult}\n        updateFilters={this.props.updateFilters}\n        profileState={this.props.profileState}\n        profileReducers={this.props.profileReducers}\n      />\n    );\n  }\n}\n\nconst mapState = (rootState: any) => {\n  return {\n    profileState: rootState.profileModel,\n    searchKeyword: rootState.searchModel.filters.keyword,\n  };\n};\n\nconst mapDispatch = (rootReducer: any) => {\n  return {\n    profileReducers: rootReducer.profileModel,\n    updateFilters: rootReducer.searchModel.updateFilters,\n  };\n};\n\nexport default withRematch(initStore, mapState, mapDispatch)(withNamespaces('common')(Brands));\n"],"file":"all-brands.js"}