{"version":3,"sources":["../../../src/client/pages/edit-profile.tsx"],"names":["Fragment","React","EditProfile","props","updateFilters","profileData","searchKeyword","profileState","profileReducers","provinces","context","req","idToken","jsCookie","get","serviceProxies","findProfile","findProvinces","cookies","token","data","Component","mapState","rootState","profileModel","searchModel","filters","keyword","mapDispatch","rootReducer","handleFiltersChange","initStore"],"mappings":";;;;;;;;;AAAA;;AACA;;AACA;;AAGA;;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAaA,IAAMA,QAAQ,GAAGC,eAAMD,QAAvB;;IACME,W;;;;;;;;;;;;;6BAqBK;AACP,aACE,6BAAC,QAAD,QACE,6BAAC,0BAAD;AACE,QAAA,aAAa,EAAE,KAAKC,KAAL,CAAWC,aAD5B;AAEE,QAAA,WAAW,EAAE,KAAKD,KAAL,CAAWE,WAF1B;AAGE,QAAA,aAAa,EAAE,KAAKF,KAAL,CAAWG,aAH5B;AAIE,QAAA,YAAY,EAAE,KAAKH,KAAL,CAAWI,YAJ3B;AAKE,QAAA,eAAe,EAAE,KAAKJ,KAAL,CAAWK,eAL9B;AAME,QAAA,SAAS,EAAE,KAAKL,KAAL,CAAWM;AANxB,QADF,CADF;AAYD;;;;;;iDAjC4BC,O;;;;;;;oBAGtBA,OAAO,CAACC,G;;;;;AACLC,gBAAAA,O,GAAUC,QAAQ,CAACC,GAAT,CAAa,OAAb,C;AACVC,gBAAAA,c,GAAiB,+BAAgBH,OAAhB,C;;uBACHG,cAAc,CAACC,WAAf,E;;;AAApBX,gBAAAA,W;;uBACkBU,cAAc,CAACE,aAAf,E;;;AAAlBR,gBAAAA,S;;;;;AAEMM,gBAAAA,e,GAAiB,+BAAiBL,OAAO,CAACC,GAAT,CAAqBO,OAArB,CAA6BC,KAA7C,C;;uBACHJ,eAAc,CAACC,WAAf,E;;;AAApBX,gBAAAA,W;;uBACkBU,eAAc,CAACE,aAAf,E;;;AAAlBR,gBAAAA,S;;;iDAGK;AACLJ,kBAAAA,WAAW,EAAXA,WADK;AAELI,kBAAAA,SAAS,EAAEA,SAAS,CAACW;AAFhB,iB;;;;;;;;;;;;;;;;;;;EAfenB,eAAMoB,S;;AAqChC,IAAMC,QAAQ,GAAG,SAAXA,QAAW,CAACC,SAAD,EAAoB;AACnC,SAAO;AACLhB,IAAAA,YAAY,EAAEgB,SAAS,CAACC,YADnB;AAELlB,IAAAA,aAAa,EAAEiB,SAAS,CAACE,WAAV,CAAsBC,OAAtB,CAA8BC;AAFxC,GAAP;AAID,CALD;;AAOA,IAAMC,WAAW,GAAG,SAAdA,WAAc,CAACC,WAAD,EAAsB;AACxC,SAAO;AACLrB,IAAAA,eAAe,EAAEqB,WAAW,CAACL,YADxB;AAELM,IAAAA,mBAAmB,EAAED,WAAW,CAACJ,WAAZ,CAAwBK,mBAFxC;AAGL1B,IAAAA,aAAa,EAAEyB,WAAW,CAACJ,WAAZ,CAAwBrB;AAHlC,GAAP;AAKD,CAND;;eAQe,wBAAY2B,gBAAZ,EAAuBT,QAAvB,EAAiCM,WAAjC,EAA8C1B,WAA9C,C","sourcesContent":["import React from 'react';\nimport { withRematch, initStore, ProfileState, ProfileReducers, ProfileEffects } from '../store';\nimport EditProfileScreen from '../modules/auth/screens/EditProfileScreen/EditProfileScreen';\nimport { User, CommonKeyword, Province } from '../services/service-proxies';\nimport { NextContext } from 'next';\nimport { getServiceProxy } from '../services';\nimport * as jsCookie from 'js-cookie';\n\ninterface Props {\n  profileData: Partial<User>;\n  searchKeyword: string;\n  commonKeywords: CommonKeyword[];\n  handleFiltersChange: (payload: { [key: string]: string | number }) => void;\n  profileState: ProfileState;\n  provinces: Province[];\n  profileReducers: ProfileReducers & ProfileEffects;\n  updateFilters: (payload: { [key: string]: string | number }) => void;\n}\ninterface State { }\nconst Fragment = React.Fragment;\nclass EditProfile extends React.Component<Props, State> {\n  static async getInitialProps(context: NextContext) {\n    let profileData: Partial<User>;\n    let provinces;\n    if (!context.req) {\n      const idToken = jsCookie.get('token');\n      const serviceProxies = getServiceProxy(idToken);\n      profileData = await serviceProxies.findProfile();\n      provinces = await serviceProxies.findProvinces();\n    } else {\n      const serviceProxies = getServiceProxy((context.req as any).cookies.token);\n      profileData = await serviceProxies.findProfile();\n      provinces = await serviceProxies.findProvinces();\n    }\n\n    return {\n      profileData,\n      provinces: provinces.data,\n    };\n  }\n\n  render() {\n    return (\n      <Fragment>\n        <EditProfileScreen\n          updateFilters={this.props.updateFilters}\n          userProfile={this.props.profileData}\n          searchKeyword={this.props.searchKeyword}\n          profileState={this.props.profileState}\n          profileReducers={this.props.profileReducers}\n          provinces={this.props.provinces}\n        />\n      </Fragment>\n    );\n  }\n}\n\nconst mapState = (rootState: any) => {\n  return {\n    profileState: rootState.profileModel,\n    searchKeyword: rootState.searchModel.filters.keyword,\n  };\n};\n\nconst mapDispatch = (rootReducer: any) => {\n  return {\n    profileReducers: rootReducer.profileModel,\n    handleFiltersChange: rootReducer.searchModel.handleFiltersChange,\n    updateFilters: rootReducer.searchModel.updateFilters,\n  };\n};\n\nexport default withRematch(initStore, mapState, mapDispatch)(EditProfile);\n"],"file":"edit-profile.js"}