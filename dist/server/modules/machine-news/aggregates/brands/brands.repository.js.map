{"version":3,"sources":["../../../../../../src/server/modules/machine-news/aggregates/brands/brands.repository.ts"],"names":["BrandSchema","mongoose","Schema","slug","String","name","logoImage","totalNews","type","Number","default","index","BrandModel","model","find","query","filters","search","push","$regex","$options","sortBy","first","before","after","findById","id","exec","create","payload","newBrand","save","data","_id","update","findByIdAndUpdate","$set","del","NotImplementedError","ensureIndexes","findOne","count","findTopBrands","NewsModel","aggregate","$group","category","brand","$sum","$lookup","from","localField","foreignField","as","$unwind","brandCategories","$push","imageUrl","$sort","$limit","$project","findBrandDetail","brandSlug","$match","news_doc","$size","categoryModels","result","findBrandList","increaseNewsCount","newsId","$inc","decreaseNewsCount","brandRepository"],"mappings":"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","sourcesContent":["import { addDeletableSchema, addAuditableSchema, FindResult, NotImplementedError, execCursorPaging } from '@app/core';\nimport { Brand, BrandRepository, NewsModel } from '@app/machine-news';\nimport mongoose from 'mongoose';\nimport { FindBrandsQuery } from './interfaces/FindBrandsQuery';\n\nexport const BrandSchema = new mongoose.Schema(addAuditableSchema(addDeletableSchema({\n  slug: String,\n  name: String,\n  logoImage: String,\n  totalNews: {\n    type: Number,\n    default: 0,\n  },\n})));\nBrandSchema.index({ name: 'text', slug: 'text' });\nexport const BrandModel = mongoose.model('Brand', BrandSchema);\n\nconst find = async (query: FindBrandsQuery): Promise<FindResult<Brand>> => {\n  const filters: any = [];\n  if (query.search) {\n    filters.push({ name: { $regex: `^${query.search}`, $options: 'i' } });\n  }\n  return await execCursorPaging(\n    BrandModel,\n    filters,\n    query.sortBy,\n    Number(query.first),\n    [],\n    query.before,\n    query.after,\n  );\n};\n\nconst findById = async (id: string): Promise<Brand> => {\n  return await BrandModel.findById(id).exec() as any;\n};\n\nconst create = async (payload: Partial<Brand>): Promise<string> => {\n  const newBrand = new BrandModel(payload);\n  const data = await newBrand.save();\n  return data._id;\n};\n\nconst update = async (payload: any): Promise<void> => {\n  await BrandModel.findByIdAndUpdate(payload.id, { $set: payload }).exec();\n};\n\nconst del = async (_id: string): Promise<void> => {\n  throw new NotImplementedError();\n};\n\nconst ensureIndexes = async () => {\n  await BrandModel.ensureIndexes({ name: 1, slug: 1 });\n};\n\nconst findOne = async (query: {slug?: string}): Promise<Brand> => {\n  if (query.slug) {\n    return BrandModel.findOne({slug: query.slug}).exec() as any;\n  } else {\n    return {} as any;\n  }\n};\n\nconst count = async (): Promise<number> => {\n  throw new NotImplementedError();\n};\n\nconst findTopBrands = async (): Promise<FindResult<Brand>> => {\n  const data = await NewsModel.aggregate([\n    {$group: {_id: {category: '$categoryId', brand: '$brand'}, totalNews: {$sum: 1}}},\n    {$lookup: {from: 'categories', localField: '_id.category', foreignField: '_id', as: 'category'}},\n    {$unwind: '$category'},\n    {$group: {\n      _id: '$_id.brand',\n      totalNews: {$sum: '$totalNews'},\n      brandCategories: {$push: {_id: '$category._id', name: '$category.name', slug: '$category.slug', imageUrl: '$category.imageUrl', totalNews: '$totalNews'}},\n    }},\n    {$sort: {totalNews: -1}},\n    {$limit: 16},\n    {$lookup: {from: 'brands', localField: '_id', foreignField: '_id', as: 'brand'}},\n    {$unwind: '$brand'},\n    {$project: {_id: 1, brandCategories: 1, totalNews: 1, name: '$brand.name', slug: '$brand.slug', logoImage: '$brand.logoImage'}},\n  ]);\n\n  return {\n    data,\n  };\n};\n\nconst findBrandDetail = async (brandSlug: string): Promise<Brand> => {\n  const result = await BrandModel.aggregate([\n    {$match: {slug: brandSlug}},\n    {$lookup: {from: 'news', localField: '_id', foreignField: 'brand', as: 'news_doc'}},\n    {$project: {_id: 1, name: 1, slug: 1, imageUrl: 1, news_doc: 1, totalNews: {$size: '$news_doc'}}},\n    {$unwind: '$news_doc'},\n    {$group: {_id: {brand: '$_id', category: '$news_doc.categoryId', model: '$news_doc.model', name: '$name', slug: '$slug', logoImage: '$logoImage' }, totalNews: {$sum: 1}}},\n    {$lookup: {from: 'models', localField: '_id.model', foreignField: '_id', as: 'model'}},\n    {$unwind: '$model'},\n    {$group: {\n      _id: {brand: '$_id.brand', category: '$_id.category', name: '$_id.name', slug: '$_id.slug', logoImage: '$_id.logoImage' },\n      totalNews: {$sum: '$totalNews'},\n      categoryModels: {$push: {_id: '$model._id', name: '$model.name', slug: '$model.slug', brand: '$model.brand', category: '$model.category', totalNews: '$totalNews'}},\n    }},\n    {$lookup: {from: 'categories', localField: '_id.category', foreignField: '_id', as: 'category'}},\n    {$unwind: '$category'},\n    {$project: {_id: 1, category: {_id: '$category._id', name: '$category.name', slug: '$category.slug', imageUrl: '$category.imageUrl', categoryModels: '$categoryModels', totalNews: '$totalNews'}}},\n    {$group: {_id: {brand: '$_id.brand', name: '$_id.name', slug: '$_id.slug', logoImage: '$_id.logoImage' }, brandCategories: {$push: '$category'}, totalNews: {$sum: '$category.totalNews'}}},\n    {$project: {_id: '$_id.brand', name: '$_id.name', slug: '$_id.slug', logoImage: '$_id.logoImage', brandCategories: 1, totalNews: 1}},\n  ]);\n\n  return result[0];\n};\n\nconst findBrandList = async () => {\n  const data = await BrandModel.find().exec() as any;\n\n  return {\n    data,\n  };\n};\n\nconst increaseNewsCount = async (newsId: string) => {\n  await BrandModel.findByIdAndUpdate(newsId, {$inc: {totalNews: 1}}).exec();\n};\n\nconst decreaseNewsCount = async (newsId: string) => {\n  await BrandModel.findByIdAndUpdate(newsId, {$inc: {totalNews: -1}}).exec();\n};\n\nexport const brandRepository: BrandRepository = {\n  increaseNewsCount,\n  decreaseNewsCount,\n  findBrandList,\n  findBrandDetail,\n  findTopBrands,\n  find,\n  findById,\n  create,\n  update,\n  del,\n  ensureIndexes,\n  findOne,\n  count,\n};\n"],"file":"brands.repository.js"}