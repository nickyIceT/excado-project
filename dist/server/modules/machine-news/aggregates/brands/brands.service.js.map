{"version":3,"sources":["../../../../../../src/server/modules/machine-news/aggregates/brands/brands.service.ts"],"names":["brandService","setup","app","path","get","readFromCache","_req","res","brandRepository","findTopBrands","result","status","json","logger","error","end","message","req","findBrandDetail","params","brandSlug","brandDetail","findBrandList","find","repository","query","id","_params","BrandInputError","findById","create","data","validationSchema","yup","object","shape","name","string","required","logoImage","validate","creationInfo","slug","patch","operation","payload","updateDetail","UserInputError","existedBrand","EntityNotFoundError","update","modificationInfo"],"mappings":"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","sourcesContent":["import { BrandInputError, logger, validateOperation, UserInputError, EntityNotFoundError } from '@app/core';\nimport { brandRepository, BrandService } from '@app/machine-news';\nimport * as yup from 'yup';\nimport slugify from 'slugify';\nimport { readFromCache } from './middlewares/readFromCache.middleware';\nimport { writeToCache } from './middlewares/writeToCache.middleware';\n\nconst brandService: BrandService = {\n  setup: (app, path) => {\n    app.get(path + '/customs/find-top-brands', readFromCache, async (_req: any, res: any) => {\n      try {\n        const result = await brandRepository.findTopBrands();\n        writeToCache(path + `/customs/find-top-brands`, result);\n        res.status(200).json(result);\n      } catch (error) {\n        logger.error(error);\n        res.status(error.status || 500).end(error.message || 'Internal server error');\n      }\n    });\n    app.get(path + '/customs/find-brand-detail/:brandSlug', readFromCache, async (req: any, res: any) => {\n      try {\n        const brandDetail = await brandRepository.findBrandDetail(req.params.brandSlug);\n        writeToCache(path + `/customs/find-brand-detail/${req.params.brandSlug}`, brandDetail);\n        res.status(200).json(brandDetail);\n      } catch (error) {\n        logger.error(error);\n        res.status(error.status || 500).end(error.message || 'Internal server error');\n      }\n    });\n    app.get(path + '/customs/find-brand-list', readFromCache, async (_req: any, res: any) => {\n      try {\n        const result = await brandRepository.findBrandList();\n        writeToCache(path + '/customs/find-brand-list', result);\n        res.status(200).json(result);\n      } catch (error) {\n        logger.error(error);\n        res.status(error.status || 500).end(error.message || 'Internal server error');\n      }\n    });\n  },\n  find: async (params) => {\n    // 1. authorize\n\n    // 2. validate\n\n    // 3. do business logic\n\n    // 4. persist to db\n    return await params.repository.find(params.query);\n  },\n  get: async (id, _params) => {\n    // 1. authorize\n\n    // 2. validate\n    if (!id) {\n      throw new BrandInputError('Invalid query params');\n    }\n\n    // 3. do business logic\n\n    // 4. persist to db\n    return await brandRepository.findById(id);\n  },\n  create: async (data, params) => {\n    // 1. authorize\n    // ensurePermission(params.authUser, PERMISSIONS.NEWS.CREATE);\n\n    // 2. validate\n    const validationSchema = yup.object().shape({\n      name: yup.string().required('Name is required'),\n      logoImage: yup.string().required('Logo image is required'),\n    });\n    await validationSchema.validate(data);\n\n    // 3. do business logic\n\n    // 4. persist to db\n    const id = await brandRepository.create({\n      ...data,\n      ...params.creationInfo,\n      slug: slugify(data.name!),\n    });\n    return {\n      id,\n    };\n  },\n  patch: async (id, data, params): Promise<{}> => {\n    validateOperation(data.operation, ['updateDetail']);\n    brandService[data.operation](id, data.payload, params);\n    return {};\n  },\n  updateDetail: async (id, data, params) => {\n    // 1. authorize\n    // ensurePermission(params.authUser, PERMISSIONS.USERS.EDIT);\n\n    // 2. validate\n    if (!id) {\n      throw new UserInputError('Invalid query params');\n    }\n    const existedBrand = params.repository.findById(id);\n    if (!existedBrand) {\n      throw new EntityNotFoundError('Brand');\n    }\n    const validationSchema = yup.object().shape({\n      name: yup.string(),\n      logoImage: yup.string(),\n    });\n    await validationSchema.validate(data);\n\n    // 3. do business logic\n\n    // 4. persist to db\n     await params.repository.update({\n      id,\n      ...data,\n      ...params.modificationInfo,\n      slug: slugify(data.name!),\n    });\n    return {};\n  },\n};\n\nexport default brandService;\n"],"file":"brands.service.js"}