{"version":3,"sources":["../../../../../../src/server/modules/machine-news/aggregates/adsense/adsense.service.ts"],"names":["adsenseService","find","params","query","repository","get","id","UserInputError","findById","create","data","position","yup","number","required","oneOf","imageUrl","string","hyperlink","creationInfo","patch","operation","payload","updateDetail","existedAdsense","update"],"mappings":"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","sourcesContent":["import { AdsenseService } from './interfaces/AdsenseService';\nimport { validateQuery, UserInputError, validatePayload, validateOperation } from '@app/core';\nimport * as yup from 'yup';\n\nconst adsenseService: AdsenseService = {\n  find: async (params) => {\n    // 1. authorize\n\n    // 2. validate\n    validateQuery(params.query);\n\n    // 3. do business logic\n\n    // 4. persist to db\n    return await params.repository.find(params.query);\n  },\n  get: async (id, params) => {\n    // 1. authorize\n\n    // 2. validate\n    if (!id) {\n      throw new UserInputError('Invalid id');\n    }\n\n    // 3. do business logic\n\n    // 4. persist to db\n    return await params.repository.findById(id);\n  },\n  create: async (data, params) => {\n    // 1. authorize\n    // ensurePermission(params.authUser, PERMISSIONS.USERS.CREATE);\n\n    // 2. validate\n    await validatePayload({\n      position: yup.number().required('Order is required').oneOf([1, 2, 3, 4, 5, 6], 'Invalid position'),\n      imageUrl: yup.string().required('Image is required'),\n      hyperlink: yup.string().required('Adsense hyperlink is required'),\n    }, data);\n\n    // 3. do business logic\n\n    // 4. persist to db\n    const id = await params.repository.create({\n      ...data,\n      ...params.creationInfo,\n    });\n\n    return {\n      id,\n    };\n  },\n  patch: async (id, data, params) => {\n    validateOperation(data.operation, ['updateDetail', 'activate', 'deactivate']);\n    await adsenseService[data.operation](id, data.payload, params);\n    return {};\n  },\n  updateDetail: async (id, data, params) => {\n    // 1. authorize\n    // ensurePermission(params.authUser, PERMISSIONS.USERS.CREATE);\n\n    // 2. validate\n    await validatePayload({\n      position: yup.number().oneOf([1, 2, 3, 4, 5, 6], 'Invalid position'),\n      imageUrl: yup.string(),\n      hyperlink: yup.string(),\n    }, data);\n    const existedAdsense = await params.repository.findById(id);\n    if (!existedAdsense) {\n      throw new UserInputError('Ads didnt exist');\n    }\n\n    // 3. do business logic\n\n    // 4. persist to db\n    await params.repository.update({\n      id,\n      ...data,\n    });\n    return {};\n  },\n};\n\nexport default adsenseService;\n"],"file":"adsense.service.js"}