{"version":3,"sources":["../../../../../../src/server/modules/machine-news/aggregates/categories/categories.service.ts"],"names":["categoryService","setup","app","path","get","readFromCache","req","res","categorySlug","params","categoryRepository","findCategoryDetail","categoryDetail","status","json","logger","error","end","message","find","_params","categories","result","data","forEach","item","indexOf","slug","push","otherCategory","filter","before","after","id","CategoryInputError","findById","create","validationSchema","yup","object","shape","name","string","required","imageUrl","validate","creationInfo","patch","operation","payload","updateDetail","UserInputError","existedCategory","repository","EntityNotFoundError","update","modificationInfo"],"mappings":"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","sourcesContent":["import { CategoryInputError, logger, validateOperation, UserInputError, EntityNotFoundError } from '@app/core';\nimport { categoryRepository, CategoryService } from '@app/machine-news';\nimport * as yup from 'yup';\nimport slugify from 'slugify';\nimport { readFromCache } from '../brands/middlewares/readFromCache.middleware';\nimport { writeToCache } from '../brands/middlewares/writeToCache.middleware';\n\nconst categoryService: CategoryService = {\n  setup: (app, path) => {\n    app.get(path + '/customs/find-category-detail/:categorySlug', readFromCache, async (req: any, res: any) => {\n      try {\n        const { categorySlug } = req.params;\n        const categoryDetail = await categoryRepository.findCategoryDetail(categorySlug);\n        writeToCache(path + `/customs/find-category-detail/${categorySlug}`, categoryDetail);\n        res.status(200).json(categoryDetail);\n      } catch (error) {\n        logger.error(error);\n        res.status(error.status || 500).end(error.message || 'Internal server error');\n      }\n    });\n  },\n  find: async (_params) => {\n    // 1. authorize\n\n    // 2. validate\n\n    // 3. do business logic\n\n    // 4. persist to db\n    const categories = await categoryRepository.find();\n    const result: any = [];\n    categories.data.forEach((item) => {\n      if (['chung-loai-khac'].indexOf(item.slug) === -1) {\n        result.push(item);\n      }\n    });\n    const otherCategory = categories.data.filter((item) => item.slug === 'chung-loai-khac')[0];\n    if (otherCategory) {\n      result.push(otherCategory);\n    }\n\n    return {\n      before: categories.before,\n      after: categories.after,\n      data: result,\n    };\n  },\n  get: async (id, _params) => {\n    // 1. authorize\n\n    // 2. validate\n    if (!id) {\n      throw new CategoryInputError('Invalid query params');\n    }\n\n    // 3. do business logic\n\n    // 4. persist to db\n    return await categoryRepository.findById(id);\n  },\n  create: async (data, params) => {\n    // 1. authorize\n    // ensurePermission(params.authUser, PERMISSIONS.NEWS.CREATE);\n\n    // 2. validate\n    const validationSchema = yup.object().shape({\n      name: yup.string().required('Category name is required'),\n      imageUrl: yup.string().required('Category image is required'),\n    });\n    await validationSchema.validate(data);\n\n    // 3. do business logic\n\n    // 4. persist to db\n    const id = await categoryRepository.create({\n      ...data,\n      ...params.creationInfo,\n      slug: slugify(data.name!),\n    });\n    return {\n      id,\n    };\n  },\n  patch: async (id, data, params): Promise<{}> => {\n    validateOperation(data.operation, ['updateDetail']);\n    categoryService[data.operation](id, data.payload, params);\n    return {};\n  },\n  updateDetail: async (id, data, params) => {\n    // 1. authorize\n    // ensurePermission(params.authUser, PERMISSIONS.USERS.EDIT);\n\n    // 2. validate\n    if (!id) {\n      throw new UserInputError('Invalid query params');\n    }\n    const existedCategory = params.repository.findById(id);\n    if (!existedCategory) {\n      throw new EntityNotFoundError('Category');\n    }\n    const validationSchema = yup.object().shape({\n      name: yup.string(),\n      imageUrl: yup.string(),\n    });\n    await validationSchema.validate(data);\n\n    // 3. do business logic\n\n    // 4. persist to db\n     await params.repository.update({\n      id,\n      ...data,\n      ...params.modificationInfo,\n      slug: slugify(data.name!),\n    });\n    return {};\n  },\n};\n\nexport default categoryService;\n"],"file":"categories.service.js"}