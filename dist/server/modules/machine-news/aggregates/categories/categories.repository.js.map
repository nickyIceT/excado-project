{"version":3,"sources":["../../../../../../src/server/modules/machine-news/aggregates/categories/categories.repository.ts"],"names":["CategorySchema","mongoose","Schema","slug","String","name","imageUrl","totalNews","type","Number","default","CategoryModel","model","find","sort","data","findById","id","exec","create","payload","newCategory","save","_id","update","findByIdAndUpdate","$set","del","NotImplementedError","ensureIndexes","findOne","_query","count","findCategoryDetail","categorySlug","aggregate","$match","$lookup","from","localField","foreignField","as","$project","news_doc","$size","$unwind","$group","category","brand","$sum","brandModels","$push","logoImage","categoryBrands","result","increaseNewsCount","categoryId","$inc","decreaseNewsCount","categoryRepository"],"mappings":";;;;;;;;;AAAA;;AAEA;;;;;;;;AAEO,IAAMA,cAAc,GAAG,IAAIC,kBAASC,MAAb,CAAoB,8BAAmB,8BAAmB;AACtFC,EAAAA,IAAI,EAAEC,MADgF;AAEtFC,EAAAA,IAAI,EAAED,MAFgF;AAGtFE,EAAAA,QAAQ,EAAEF,MAH4E;AAItFG,EAAAA,SAAS,EAAE;AACTC,IAAAA,IAAI,EAAEC,MADG;AAETC,IAAAA,OAAO,EAAE;AAFA;AAJ2E,CAAnB,CAAnB,CAApB,CAAvB;;;AAUA,IAAMC,aAAa,GAAGV,kBAASW,KAAT,CAAe,UAAf,EAA2BZ,cAA3B,CAAtB;;;;AAEP,IAAMa,IAAI;AAAA;AAAA;AAAA;AAAA;AAAA,4BAAG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAEGF,aAAa,CAACE,IAAd,GAAqBC,IAArB,CAA0B;AAACX,cAAAA,IAAI,EAAE;AAAP,aAA1B,CAFH;;AAAA;AAAA;AAAA;AAETY,cAAAA,IAFS;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAJF,IAAI;AAAA;AAAA;AAAA,GAAV;;AAMA,IAAMG,QAAQ;AAAA;AAAA;AAAA;AAAA;AAAA,4BAAG,kBAAOC,EAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACFN,aAAa,CAACK,QAAd,CAAuBC,EAAvB,EAA2BC,IAA3B,EADE;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAARF,QAAQ;AAAA;AAAA;AAAA,GAAd;;AAIA,IAAMG,MAAM;AAAA;AAAA;AAAA;AAAA;AAAA,4BAAG,kBAAOC,OAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AACPC,YAAAA,WADO,GACO,IAAIV,aAAJ,CAAkBS,OAAlB,CADP;AAAA;AAAA,mBAEMC,WAAW,CAACC,IAAZ,EAFN;;AAAA;AAEPP,YAAAA,IAFO;AAAA,8CAGNA,IAAI,CAACQ,GAHC;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAANJ,MAAM;AAAA;AAAA;AAAA,GAAZ;;AAMA,IAAMK,MAAM;AAAA;AAAA;AAAA;AAAA;AAAA,4BAAG,kBAAOJ,OAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACPT,aAAa,CAACc,iBAAd,CAAgCL,OAAO,CAACH,EAAxC,EAA4C;AAAES,cAAAA,IAAI,EAAEN;AAAR,aAA5C,EAA+DF,IAA/D,EADO;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAANM,MAAM;AAAA;AAAA;AAAA,GAAZ;;AAIA,IAAMG,GAAG;AAAA;AAAA;AAAA;AAAA;AAAA,4BAAG,kBAAOJ,GAAP;AAAA;AAAA;AAAA;AAAA;AAAA,kBACJ,IAAIK,yBAAJ,EADI;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAHD,GAAG;AAAA;AAAA;AAAA,GAAT;;AAIA,IAAME,aAAa;AAAA;AAAA;AAAA;AAAA;AAAA,4BAAG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACdlB,aAAa,CAACkB,aAAd,CAA4B;AAAExB,cAAAA,IAAI,EAAE,CAAR;AAAWF,cAAAA,IAAI,EAAE;AAAjB,aAA5B,CADc;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAb0B,aAAa;AAAA;AAAA;AAAA,GAAnB;;AAIA,IAAMC,OAAO;AAAA;AAAA;AAAA;AAAA;AAAA,4BAAG,kBAAOC,MAAP;AAAA;AAAA;AAAA;AAAA;AAAA,kBACR,IAAIH,yBAAJ,EADQ;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAPE,OAAO;AAAA;AAAA;AAAA,GAAb;;AAIA,IAAME,KAAK;AAAA;AAAA;AAAA;AAAA;AAAA,4BAAG;AAAA;AAAA;AAAA;AAAA;AAAA,kBACN,IAAIJ,yBAAJ,EADM;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAALI,KAAK;AAAA;AAAA;AAAA,GAAX;;AAIA,IAAMC,kBAAkB;AAAA;AAAA;AAAA;AAAA;AAAA,4BAAG,kBAAOC,YAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACJvB,aAAa,CAACwB,SAAd,CAAwB,CAC3C;AAACC,cAAAA,MAAM,EAAE;AAACjC,gBAAAA,IAAI,EAAE+B;AAAP;AAAT,aAD2C,EAE3C;AAACG,cAAAA,OAAO,EAAE;AAACC,gBAAAA,IAAI,EAAE,MAAP;AAAeC,gBAAAA,UAAU,EAAE,KAA3B;AAAkCC,gBAAAA,YAAY,EAAE,YAAhD;AAA8DC,gBAAAA,EAAE,EAAE;AAAlE;AAAV,aAF2C,EAG3C;AAACC,cAAAA,QAAQ,EAAE;AAACnB,gBAAAA,GAAG,EAAE,CAAN;AAASlB,gBAAAA,IAAI,EAAE,CAAf;AAAkBF,gBAAAA,IAAI,EAAE,CAAxB;AAA2BG,gBAAAA,QAAQ,EAAE,CAArC;AAAwCqC,gBAAAA,QAAQ,EAAE,CAAlD;AAAqDpC,gBAAAA,SAAS,EAAE;AAACqC,kBAAAA,KAAK,EAAE;AAAR;AAAhE;AAAX,aAH2C,EAI3C;AAACC,cAAAA,OAAO,EAAE;AAAV,aAJ2C,EAK3C;AAACC,cAAAA,MAAM,EAAE;AAACvB,gBAAAA,GAAG,EAAE;AAACwB,kBAAAA,QAAQ,EAAE,MAAX;AAAmBC,kBAAAA,KAAK,EAAE,iBAA1B;AAA6CpC,kBAAAA,KAAK,EAAE,iBAApD;AAAuEP,kBAAAA,IAAI,EAAE,OAA7E;AAAsFF,kBAAAA,IAAI,EAAE,OAA5F;AAAqGG,kBAAAA,QAAQ,EAAE;AAA/G,iBAAN;AAAoIC,gBAAAA,SAAS,EAAE;AAAC0C,kBAAAA,IAAI,EAAE;AAAP;AAA/I;AAAT,aAL2C,EAM3C;AAACZ,cAAAA,OAAO,EAAE;AAACC,gBAAAA,IAAI,EAAE,QAAP;AAAiBC,gBAAAA,UAAU,EAAE,WAA7B;AAA0CC,gBAAAA,YAAY,EAAE,KAAxD;AAA+DC,gBAAAA,EAAE,EAAE;AAAnE;AAAV,aAN2C,EAO3C;AAACI,cAAAA,OAAO,EAAE;AAAV,aAP2C,EAQ3C;AAACC,cAAAA,MAAM,EAAE;AACPvB,gBAAAA,GAAG,EAAE;AAACwB,kBAAAA,QAAQ,EAAE,eAAX;AAA4BC,kBAAAA,KAAK,EAAE,YAAnC;AAAiD3C,kBAAAA,IAAI,EAAE,WAAvD;AAAoEF,kBAAAA,IAAI,EAAE,WAA1E;AAAuFG,kBAAAA,QAAQ,EAAE;AAAjG,iBADE;AAEPC,gBAAAA,SAAS,EAAE;AAAC0C,kBAAAA,IAAI,EAAE;AAAP,iBAFJ;AAGPC,gBAAAA,WAAW,EAAE;AAACC,kBAAAA,KAAK,EAAE;AAAC5B,oBAAAA,GAAG,EAAE,YAAN;AAAoBlB,oBAAAA,IAAI,EAAE,aAA1B;AAAyCF,oBAAAA,IAAI,EAAE,aAA/C;AAA8D6C,oBAAAA,KAAK,EAAE,cAArE;AAAqFD,oBAAAA,QAAQ,EAAE,iBAA/F;AAAkHxC,oBAAAA,SAAS,EAAE;AAA7H;AAAR;AAHN;AAAT,aAR2C,EAa3C;AAAC8B,cAAAA,OAAO,EAAE;AAACC,gBAAAA,IAAI,EAAE,QAAP;AAAiBC,gBAAAA,UAAU,EAAE,WAA7B;AAA0CC,gBAAAA,YAAY,EAAE,KAAxD;AAA+DC,gBAAAA,EAAE,EAAE;AAAnE;AAAV,aAb2C,EAc3C;AAACI,cAAAA,OAAO,EAAE;AAAV,aAd2C,EAe3C;AAACH,cAAAA,QAAQ,EAAE;AAACnB,gBAAAA,GAAG,EAAE,CAAN;AAASyB,gBAAAA,KAAK,EAAE;AAACzB,kBAAAA,GAAG,EAAE,YAAN;AAAoBlB,kBAAAA,IAAI,EAAE,aAA1B;AAAyCF,kBAAAA,IAAI,EAAE,aAA/C;AAA8DiD,kBAAAA,SAAS,EAAE,kBAAzE;AAA6FF,kBAAAA,WAAW,EAAE,cAA1G;AAA0H3C,kBAAAA,SAAS,EAAE;AAArI;AAAhB;AAAX,aAf2C,EAgB3C;AAACuC,cAAAA,MAAM,EAAE;AAACvB,gBAAAA,GAAG,EAAE;AAACwB,kBAAAA,QAAQ,EAAE,eAAX;AAA4B1C,kBAAAA,IAAI,EAAE,WAAlC;AAA+CF,kBAAAA,IAAI,EAAE,WAArD;AAAkEG,kBAAAA,QAAQ,EAAE;AAA5E,iBAAN;AAAqG+C,gBAAAA,cAAc,EAAE;AAACF,kBAAAA,KAAK,EAAE;AAAR,iBAArH;AAAwI5C,gBAAAA,SAAS,EAAE;AAAC0C,kBAAAA,IAAI,EAAE;AAAP;AAAnJ;AAAT,aAhB2C,EAiB3C;AAACP,cAAAA,QAAQ,EAAE;AAACnB,gBAAAA,GAAG,EAAE,eAAN;AAAuBlB,gBAAAA,IAAI,EAAE,WAA7B;AAA0CF,gBAAAA,IAAI,EAAE,WAAhD;AAA6DG,gBAAAA,QAAQ,EAAE,eAAvE;AAAwF+C,gBAAAA,cAAc,EAAE,CAAxG;AAA2G9C,gBAAAA,SAAS,EAAE;AAAtH;AAAX,aAjB2C,CAAxB,CADI;;AAAA;AACnB+C,YAAAA,MADmB;AAAA,8CAoBlBA,MAAM,CAAC,CAAD,CApBY;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAlBrB,kBAAkB;AAAA;AAAA;AAAA,GAAxB;;AAuBA,IAAMsB,iBAAiB;AAAA;AAAA;AAAA;AAAA;AAAA,4BAAG,mBAAOC,UAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAClB7C,aAAa,CAACc,iBAAd,CAAgC+B,UAAhC,EAA4C;AAACC,cAAAA,IAAI,EAAE;AAAClD,gBAAAA,SAAS,EAAE;AAAZ;AAAP,aAA5C,EAAoEW,IAApE,EADkB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAjBqC,iBAAiB;AAAA;AAAA;AAAA,GAAvB;;AAIA,IAAMG,iBAAiB;AAAA;AAAA;AAAA;AAAA;AAAA,4BAAG,mBAAOF,UAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAClB7C,aAAa,CAACc,iBAAd,CAAgC+B,UAAhC,EAA4C;AAACC,cAAAA,IAAI,EAAE;AAAClD,gBAAAA,SAAS,EAAE,CAAC;AAAb;AAAP,aAA5C,EAAqEW,IAArE,EADkB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAjBwC,iBAAiB;AAAA;AAAA;AAAA,GAAvB;;AAIO,IAAMC,kBAAsC,GAAG;AACpDJ,EAAAA,iBAAiB,EAAjBA,iBADoD;AAEpDG,EAAAA,iBAAiB,EAAjBA,iBAFoD;AAGpDzB,EAAAA,kBAAkB,EAAlBA,kBAHoD;AAIpDpB,EAAAA,IAAI,EAAJA,IAJoD;AAKpDG,EAAAA,QAAQ,EAARA,QALoD;AAMpDG,EAAAA,MAAM,EAANA,MANoD;AAOpDK,EAAAA,MAAM,EAANA,MAPoD;AAQpDG,EAAAA,GAAG,EAAHA,GARoD;AASpDE,EAAAA,aAAa,EAAbA,aAToD;AAUpDC,EAAAA,OAAO,EAAPA,OAVoD;AAWpDE,EAAAA,KAAK,EAALA;AAXoD,CAA/C","sourcesContent":["import { addDeletableSchema, addAuditableSchema, FindResult, NotImplementedError } from '@app/core';\nimport { Category, CategoryRepository } from '@app/machine-news';\nimport mongoose from 'mongoose';\n\nexport const CategorySchema = new mongoose.Schema(addAuditableSchema(addDeletableSchema({\n  slug: String,\n  name: String,\n  imageUrl: String,\n  totalNews: {\n    type: Number,\n    default: 0,\n  },\n})));\n\nexport const CategoryModel = mongoose.model('Category', CategorySchema);\n\nconst find = async (): Promise<FindResult<Category>> => {\n  return {\n    data: await CategoryModel.find().sort({slug: 1}) as any,\n  };\n};\n\nconst findById = async (id: string): Promise<Category> => {\n  return await CategoryModel.findById(id).exec() as any;\n};\n\nconst create = async (payload: Partial<Category>): Promise<string> => {\n  const newCategory = new CategoryModel(payload);\n  const data = await newCategory.save();\n  return data._id;\n};\n\nconst update = async (payload: any): Promise<void> => {\n  await CategoryModel.findByIdAndUpdate(payload.id, { $set: payload }).exec();\n};\n\nconst del = async (_id: string): Promise<void> => {\n  throw new NotImplementedError();\n};\n\nconst ensureIndexes = async () => {\n  await CategoryModel.ensureIndexes({ name: 1, slug: 1 });\n};\n\nconst findOne = async (_query: any): Promise<Category> => {\n  throw new NotImplementedError();\n};\n\nconst count = async (): Promise<number> => {\n  throw new NotImplementedError();\n};\n\nconst findCategoryDetail = async (categorySlug: string) => {\n  const result = await CategoryModel.aggregate([\n    {$match: {slug: categorySlug}},\n    {$lookup: {from: 'news', localField: '_id', foreignField: 'categoryId', as: 'news_doc'}},\n    {$project: {_id: 1, name: 1, slug: 1, imageUrl: 1, news_doc: 1, totalNews: {$size: '$news_doc'}}},\n    {$unwind: '$news_doc'},\n    {$group: {_id: {category: '$_id', brand: '$news_doc.brand', model: '$news_doc.model', name: '$name', slug: '$slug', imageUrl: '$imageUrl' }, totalNews: {$sum: 1}}},\n    {$lookup: {from: 'models', localField: '_id.model', foreignField: '_id', as: 'model'}},\n    {$unwind: '$model'},\n    {$group: {\n      _id: {category: '$_id.category', brand: '$_id.brand', name: '$_id.name', slug: '$_id.slug', imageUrl: '$_id.imageUrl' },\n      totalNews: {$sum: '$totalNews'},\n      brandModels: {$push: {_id: '$model._id', name: '$model.name', slug: '$model.slug', brand: '$model.brand', category: '$model.category', totalNews: '$totalNews'}},\n    }},\n    {$lookup: {from: 'brands', localField: '_id.brand', foreignField: '_id', as: 'brand'}},\n    {$unwind: '$brand'},\n    {$project: {_id: 1, brand: {_id: '$brand._id', name: '$brand.name', slug: '$brand.slug', logoImage: '$brand.logoImage', brandModels: '$brandModels', totalNews: '$totalNews'}}},\n    {$group: {_id: {category: '$_id.category', name: '$_id.name', slug: '$_id.slug', imageUrl: '$_id.imageUrl' }, categoryBrands: {$push: '$brand'}, totalNews: {$sum: '$brand.totalNews'}}},\n    {$project: {_id: '$_id.category', name: '$_id.name', slug: '$_id.slug', imageUrl: '$_id.imageUrl', categoryBrands: 1, totalNews: 1}},\n  ]);\n  return result[0];\n};\n\nconst increaseNewsCount = async (categoryId: string) => {\n  await CategoryModel.findByIdAndUpdate(categoryId, {$inc: {totalNews: 1}}).exec();\n};\n\nconst decreaseNewsCount = async (categoryId: string) => {\n  await CategoryModel.findByIdAndUpdate(categoryId, {$inc: {totalNews: -1}}).exec();\n};\n\nexport const categoryRepository: CategoryRepository = {\n  increaseNewsCount,\n  decreaseNewsCount,\n  findCategoryDetail,\n  find,\n  findById,\n  create,\n  update,\n  del,\n  ensureIndexes,\n  findOne,\n  count,\n};\n"],"file":"categories.repository.js"}