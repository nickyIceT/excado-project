{"version":3,"sources":["../../../../../../src/server/modules/machine-news/aggregates/common-keywords/common-keywords.repository.ts"],"names":["CommonKeywordSchema","mongoose","Schema","keyword","String","count","type","Number","default","createdAt","lastModifiedAt","CommonKeywordModel","model","commonKeywordRepository","find","countDocuments","exec","findOne","payload","findById","id","query","filters","sortBy","first","before","after","create","newCommonKeyword","save","update","findByIdAndUpdate","$set","del","_id","NotImplementedError","ensureIndexes"],"mappings":"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","sourcesContent":["import mongoose from 'mongoose';\nimport { CommonKeywordRepository } from './interfaces/CommonKeywordRepository';\nimport { NotImplementedError, execCursorPaging } from '@app/core';\n\nexport const CommonKeywordSchema = new mongoose.Schema({\n  keyword: String,\n  count: {\n    type: Number,\n    default: 1,\n  },\n  createdAt: Number,\n  lastModifiedAt: Number,\n});\nconst CommonKeywordModel = mongoose.model('CommonKeyword', CommonKeywordSchema);\n\nexport const commonKeywordRepository: CommonKeywordRepository = {\n  count: async () => {\n    return await CommonKeywordModel.find().countDocuments().exec();\n  },\n  findOne: async (payload: any) => {\n    return await CommonKeywordModel.findOne(payload).exec() as any;\n  },\n  findById: async (id) => {\n    return await CommonKeywordModel.findById(id).exec() as any;\n  },\n  find: async (query) => {\n    const filters: any[] = [];\n\n    return await execCursorPaging(\n      CommonKeywordModel,\n      filters,\n      query.sortBy,\n      Number(query.first),\n      ['news'],\n      query.before,\n      query.after,\n    );\n  },\n  create: async (payload) => {\n    const newCommonKeyword = new CommonKeywordModel(payload);\n    await newCommonKeyword.save();\n    return newCommonKeyword.id;\n  },\n  update: async (payload) => {\n    await CommonKeywordModel.findByIdAndUpdate(payload.id, { $set: payload }).exec();\n  },\n  del: async (_id): Promise<void> => {\n    throw new NotImplementedError();\n  },\n  ensureIndexes: async () => {\n    await CommonKeywordModel.ensureIndexes({ count: 1, keyword: 1 });\n  },\n};\n"],"file":"common-keywords.repository.js"}