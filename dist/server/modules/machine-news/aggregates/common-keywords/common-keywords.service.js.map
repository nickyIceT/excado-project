{"version":3,"sources":["../../../../../../src/server/modules/machine-news/aggregates/common-keywords/common-keywords.service.ts"],"names":["commonKeywordService","find","query","repository","create","data","keyword","yup","string","required","commonKeywordRepository","findOne","existedKeyword","update","id","_id","count","Number","createdAt","Date","getTime","lastModifiedAt"],"mappings":";;;;;;;;;AACA;;AACA;;AACA;;;;;;;;;;AAEA,IAAMA,oBAA0C,GAAG;AACjDC,EAAAA,IAAI;AAAA;AAAA;AAAA,8BAAE;AAAA;AAAA;AAAA;AAAA;AAAA;AAASC,cAAAA,KAAT,QAASA,KAAT,EAAgBC,UAAhB,QAAgBA,UAAhB;AACJ;AAEA;AACA,uCAAcD,KAAd,EAJI,CAMJ;AAEA;;AARI;AAAA,qBASSC,UAAU,CAACF,IAAX,CAAgBC,KAAhB,CATT;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAF;;AAAA;AAAA;AAAA;;AAAA;AAAA,KAD6C;AAYjDE,EAAAA,MAAM;AAAA;AAAA;AAAA,8BAAE,kBAAOC,IAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAIA,2BAAgB;AACpBC,gBAAAA,OAAO,EAAEC,GAAG,CAACC,MAAJ,GAAaC,QAAb,CAAsB,kBAAtB;AADW,eAAhB,EAEHJ,IAFG,CAJA;;AAAA;AAAA;AAAA,qBAOuBK,wCAAwBC,OAAxB,CAAgCN,IAAhC,CAPvB;;AAAA;AAOAO,cAAAA,cAPA;;AAAA,mBAQFA,cARE;AAAA;AAAA;AAAA;;AAAA;AAAA,qBASEF,wCAAwBG,MAAxB,CAA+B;AACnCC,gBAAAA,EAAE,EAAEF,cAAc,CAACG,GADgB;AAEnCC,gBAAAA,KAAK,EAAEC,MAAM,CAACL,cAAc,CAACI,KAAhB,CAAN,GAA+B;AAFH,eAA/B,CATF;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA,qBAcEN,wCAAwBN,MAAxB,CAA+B;AACnCE,gBAAAA,OAAO,EAAED,IAAI,CAACC,OADqB;AAEnCY,gBAAAA,SAAS,EAAE,IAAIC,IAAJ,GAAWC,OAAX,EAFwB;AAGnCC,gBAAAA,cAAc,EAAE,IAAIF,IAAJ,GAAWC,OAAX,EAHmB;AAInCJ,gBAAAA,KAAK,EAAE;AAJ4B,eAA/B,CAdF;;AAAA;AAAA,gDAqBC,EArBD;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAF;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAZ2C,CAAnD;eAqCehB,oB","sourcesContent":["import { CommonKeywordService } from './interfaces/CommonKeywordService';\nimport { validateQuery, validatePayload } from '@app/core';\nimport * as yup from 'yup';\nimport { commonKeywordRepository } from './common-keywords.repository';\n\nconst commonKeywordService: CommonKeywordService = {\n  find: async ({ query, repository }) => {\n    // 1. authorize\n\n    // 2. validate\n    validateQuery(query);\n\n    // 3. do business logic\n\n    // 4. persist to db\n    return await repository.find(query);\n  },\n  create: async (data) => {\n    // 1. authorize\n\n    // 2. validate\n    await validatePayload({\n      keyword: yup.string().required('News is required'),\n    }, data);\n    const existedKeyword = await commonKeywordRepository.findOne(data);\n    if (existedKeyword) {\n      await commonKeywordRepository.update({\n        id: existedKeyword._id,\n        count: Number(existedKeyword.count) + 1,\n      });\n    } else {\n      await commonKeywordRepository.create({\n        keyword: data.keyword,\n        createdAt: new Date().getTime(),\n        lastModifiedAt: new Date().getTime(),\n        count: 1,\n      });\n    }\n    return {} as any;\n  },\n};\n\nexport default commonKeywordService;\n"],"file":"common-keywords.service.js"}