{"version":3,"sources":["../../../../../../src/server/modules/machine-news/aggregates/feature-brands/feature-brands.repository.ts"],"names":["FeatureBrandSchema","mongoose","Schema","brand","type","Types","ObjectId","ref","logoImage","String","hyperlink","order","Number","FeatureBrandModel","model","featureBrandRepository","findAll","NotImplementedError","find","query","filters","sortBy","first","before","after","findById","id","exec","findOne","count","create","payload","newFeatureBrand","save","update","findByIdAndUpdate","$set","del","ensureIndexes"],"mappings":"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","sourcesContent":["import mongoose from 'mongoose';\nimport { addAuditableSchema, NotImplementedError, execCursorPaging } from '@app/core';\nimport { FeatureBrandRepository } from './interfaces/FeatureBrandRepository';\n\nconst FeatureBrandSchema = new mongoose.Schema(addAuditableSchema({\n  brand: {\n    type: mongoose.Schema.Types.ObjectId,\n    ref: 'Brand',\n  },\n  logoImage: String,\n  hyperlink: String,\n  order: Number,\n}));\nconst FeatureBrandModel = mongoose.model('FeatureBrand', FeatureBrandSchema);\n\nexport const featureBrandRepository: FeatureBrandRepository = {\n  findAll: async () => {\n    throw new NotImplementedError();\n  },\n  find: async (query) => {\n    const filters: any = [];\n\n    return await execCursorPaging(\n      FeatureBrandModel,\n      filters,\n      query.sortBy,\n      Number(query.first),\n      ['brand'],\n      query.before,\n      query.after,\n    );\n  },\n  findById: async (id) => {\n    return await FeatureBrandModel.findById(id).exec() as any;\n  },\n  findOne: async () => {\n    throw new NotImplementedError();\n  },\n  count: async () => {\n    throw new NotImplementedError();\n  },\n  create: async (payload) => {\n    const newFeatureBrand = new FeatureBrandModel(payload);\n    await newFeatureBrand.save();\n    return newFeatureBrand.id;\n  },\n  update: async (payload) => {\n    return await FeatureBrandModel.findByIdAndUpdate(payload.id, {$set: payload}).exec() as any;\n  },\n  del: async () => {\n    throw new NotImplementedError();\n  },\n  ensureIndexes: async () => {\n    throw new NotImplementedError();\n  },\n};\n"],"file":"feature-brands.repository.js"}