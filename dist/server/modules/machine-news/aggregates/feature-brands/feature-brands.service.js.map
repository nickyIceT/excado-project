{"version":3,"sources":["../../../../../../src/server/modules/machine-news/aggregates/feature-brands/feature-brands.service.ts"],"names":["featureBrandService","find","params","query","repository","get","id","UserInputError","findById","create","data","brand","yup","string","required","hyperlink","logoImage","order","number","brandRepository","existedBrand","creationInfo","patch","operation","payload","updateDetail","existedFeatureBrand","update"],"mappings":"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","sourcesContent":["import { FeatureBrandService } from './interfaces/FeatureBrandService';\nimport { validateQuery, UserInputError, validatePayload, validateOperation } from '@app/core';\nimport * as yup from 'yup';\n\nconst featureBrandService: FeatureBrandService = {\n  find: async (params) => {\n    // 1. authorize\n\n    // 2. validate\n    validateQuery(params.query);\n\n    // 3. do business logic\n\n    // 4. persist to db\n    return await params.repository.find(params.query);\n  },\n  get: async (id, params) => {\n    // 1. authorize\n\n    // 2. validate\n    if (!id) {\n      throw new UserInputError('Invalid id');\n    }\n\n    // 3. do business logic\n\n    // 4. persist to db\n    return await params.repository.findById(id);\n  },\n  create: async (data, params) => {\n    // 1. authorize\n    // ensurePermission(params.authUser, PERMISSIONS.USERS.CREATE);\n\n    // 2. validate\n    await validatePayload({\n      brand: yup.string().required('Brand is required'),\n      hyperlink: yup.string().required('Hyperlink is required'),\n      logoImage: yup.string().required('Logo image is required'),\n      order: yup.number().required('Order is required'),\n    }, data);\n    const existedBrand = await params.brandRepository.findById(data.brand);\n    if (!existedBrand) {\n      throw new UserInputError('Brand didnt exist');\n    }\n\n    // 3. do business logic\n\n    // 4. persist to db\n    const id = await params.repository.create({\n      ...data,\n      ...params.creationInfo,\n    });\n\n    return {\n      id,\n    };\n  },\n  patch: async (id, data, params) => {\n    validateOperation(data.operation, ['updateDetail', 'activate', 'deactivate']);\n    await featureBrandService[data.operation](id, data.payload, params);\n    return {};\n  },\n  updateDetail: async (id, data, params) => {\n    // 1. authorize\n    // ensurePermission(params.authUser, PERMISSIONS.USERS.CREATE);\n\n    // 2. validate\n    await validatePayload({\n      brand: yup.string(),\n      hyperlink: yup.string(),\n      logoImage: yup.string(),\n      order: yup.number(),\n    }, data);\n    const existedFeatureBrand = await params.repository.findById(id);\n    if (!existedFeatureBrand) {\n      throw new UserInputError('Brand didnt exist');\n    }\n\n    // 3. do business logic\n\n    // 4. persist to db\n    await params.repository.update({\n      id,\n      ...data,\n    });\n    return {};\n  },\n};\n\nexport default featureBrandService;\n"],"file":"feature-brands.service.js"}