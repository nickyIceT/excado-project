{"version":3,"sources":["../../../../../../../src/server/modules/machine-news/aggregates/news/hooks/createNotification.hook.ts"],"names":["createNotification","context","newsRepository","findById","result","id","news","createNotiPromises","notificationsService","create","owner","_id","state","type","repository","notificationsRepository","shop","followShopRepository","findByShop","followShops","follow","push","user","followUsersRepository","findByFollowee","followUsers","Promise","all"],"mappings":";;;;;;;;;AACA;;AACA;;AACA;;AACA;;AACA;;;;;;;;;;;;AAEO,IAAMA,kBAAkB;AAAA;AAAA;AAAA;AAAA;AAAA,4BAAG,iBAAOC,OAAP;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACbC,qBAAeC,QAAf,CAAwBF,OAAO,CAACG,MAAR,CAAeC,EAAvC,CADa;;AAAA;AAC1BC,YAAAA,IAD0B;AAG1BC,YAAAA,kBAH0B,GAGA,CAC7BC,sBAAD,CAA8BC,MAA9B,CAAqC;AACnCC,cAAAA,KAAK,EAAGJ,IAAI,CAACI,KAAN,CAAoBC,GADQ;AAEnCL,cAAAA,IAAI,EAAEA,IAAI,CAACK,GAFwB;AAGnCC,cAAAA,KAAK,EAAE,QAH4B;AAInCC,cAAAA,IAAI,EAAE;AAJ6B,aAArC,oBAMKZ,OAAO,CAACG,MANb;AAOEU,cAAAA,UAAU,EAAEC;AAPd,eAD8B,CAHA;;AAAA,kBAe5BT,IAAI,CAACU,IAAL,IAAcV,IAAI,CAACU,IAAN,CAAmBL,GAfJ;AAAA;AAAA;AAAA;;AAAA;AAAA,mBAgBJM,kCAAqBC,UAArB,CAAiCZ,IAAI,CAACU,IAAN,CAAmBL,GAAnD,CAhBI;;AAAA;AAgBxBQ,YAAAA,WAhBwB;AAAA;AAAA;AAAA;AAAA;;AAiB9B,6BAAqBA,WAArB,uHAAkC;AAAvBC,cAAAA,MAAuB;AAChCb,cAAAA,kBAAkB,CAACc,IAAnB,CAAyBb,sBAAD,CAA8BC,MAA9B,CAAqC;AAC3DC,gBAAAA,KAAK,EAAEU,MAAM,CAACE,IAD6C;AAE3DhB,gBAAAA,IAAI,EAAEA,IAAI,CAACK,GAFgD;AAG3DC,gBAAAA,KAAK,EAAE,QAHoD;AAI3DC,gBAAAA,IAAI,EAAE;AAJqD,eAArC,oBAMnBZ,OAAO,CAACG,MANW;AAOtBU,gBAAAA,UAAU,EAAEC;AAPU,iBAAxB;AASD;;AA3B6B;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA,kBA4BrBT,IAAI,CAACI,KAAL,IAAeJ,IAAI,CAACI,KAAN,CAAoBC,GA5Bb;AAAA;AAAA;AAAA;;AAAA;AAAA,mBA6BJY,mCAAsBC,cAAtB,CAAsClB,IAAI,CAACI,KAAN,CAAoBC,GAAzD,CA7BI;;AAAA;AA6BxBc,YAAAA,WA7BwB;AAAA;AAAA;AAAA;AAAA;;AA8B9B,8BAAqBA,WAArB,2HAAkC;AAAvBL,cAAAA,OAAuB;AAChCb,cAAAA,kBAAkB,CAACc,IAAnB,CAAyBb,sBAAD,CAA8BC,MAA9B,CAAqC;AAC3DC,gBAAAA,KAAK,EAAEU,OAAM,CAACE,IAD6C;AAE3DhB,gBAAAA,IAAI,EAAEA,IAAI,CAACK,GAFgD;AAG3DC,gBAAAA,KAAK,EAAE,QAHoD;AAI3DC,gBAAAA,IAAI,EAAE;AAJqD,eAArC,oBAMnBZ,OAAO,CAACG,MANW;AAOtBU,gBAAAA,UAAU,EAAEC;AAPU,iBAAxB;AASD;;AAxC6B;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA,mBA2C1BW,OAAO,CAACC,GAAR,CAAYpB,kBAAZ,CA3C0B;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAlBP,kBAAkB;AAAA;AAAA;AAAA,GAAxB","sourcesContent":["import { HookContext } from '@feathersjs/feathers';\nimport { newsRepository } from '../news.repository';\nimport notificationsService from '../../notifications/notifications.service';\nimport { notificationsRepository } from '../../notifications/notifications.repository';\nimport { followShopRepository } from '../../follows/follow-shops.repository';\nimport { followUsersRepository } from '../../follows/follow-users.repository';\n\nexport const createNotification = async (context: HookContext) => {\n  const news = await newsRepository.findById(context.result.id);\n\n  const createNotiPromises: any = [\n    (notificationsService as any).create({\n      owner: (news.owner as any)._id,\n      news: news._id,\n      state: 'UNREAD',\n      type: 'CREATE_NEWS',\n    }, {\n      ...context.result,\n      repository: notificationsRepository,\n    }),\n  ];\n\n  if (news.shop && (news.shop as any)._id) {\n    const followShops = await followShopRepository.findByShop((news.shop as any)._id);\n    for (const follow of followShops) {\n      createNotiPromises.push((notificationsService as any).create({\n        owner: follow.user,\n        news: news._id,\n        state: 'UNREAD',\n        type: 'FOLLOW_SHOP',\n      }, {\n        ...context.result,\n        repository: notificationsRepository,\n      }));\n    }\n  } else if (news.owner && (news.owner as any)._id) {\n    const followUsers = await followUsersRepository.findByFollowee((news.owner as any)._id);\n    for (const follow of followUsers) {\n      createNotiPromises.push((notificationsService as any).create({\n        owner: follow.user,\n        news: news._id,\n        state: 'UNREAD',\n        type: 'FOLLOW_USER',\n      }, {\n        ...context.result,\n        repository: notificationsRepository,\n      }));\n    }\n  }\n\n  await Promise.all(createNotiPromises);\n};\n"],"file":"createNotification.hook.js"}