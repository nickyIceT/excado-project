{"version":3,"sources":["../../../../../../src/server/modules/machine-news/aggregates/provinces/provinces.repository.ts"],"names":["ProvinceSchema","mongoose","Schema","slug","String","name","totalNews","type","Number","default","ProvinceModel","model","find","sort","data","findById","id","exec","create","payload","newProvince","save","_id","update","findByIdAndUpdate","$set","del","NotImplementedError","ensureIndexes","findOne","_query","count","increaseNewsCount","provinceId","$inc","decreaseNewsCount","provinceRepository"],"mappings":"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","sourcesContent":["import { addDeletableSchema, addAuditableSchema, FindResult, NotImplementedError } from '@app/core';\nimport { Province, ProvinceRepository } from '@app/machine-news';\nimport mongoose from 'mongoose';\n\nexport const ProvinceSchema = new mongoose.Schema(addAuditableSchema(addDeletableSchema({\n  slug: String,\n  name: String,\n  totalNews: {\n    type: Number,\n    default: 0,\n  },\n})));\n\nexport const ProvinceModel = mongoose.model('Province', ProvinceSchema);\n\nconst find = async (): Promise<FindResult<Province>> => {\n  return {\n    data: await ProvinceModel.find().sort({slug: 1}) as any,\n  };\n};\n\nconst findById = async (id: string): Promise<Province> => {\n  return await ProvinceModel.findById(id).exec() as any;\n};\n\nconst create = async (payload: Partial<Province>): Promise<string> => {\n  const newProvince = new ProvinceModel(payload);\n  const data = await newProvince.save();\n  return data._id;\n};\n\nconst update = async (payload: any): Promise<void> => {\n  await ProvinceModel.findByIdAndUpdate(payload._id, { $set: payload }).exec();\n};\n\nconst del = async (_id: string): Promise<void> => {\n  throw new NotImplementedError();\n};\n\nconst ensureIndexes = async () => {\n  throw new NotImplementedError();\n};\n\nconst findOne = async (_query: any): Promise<Province> => {\n  throw new NotImplementedError();\n};\n\nconst count = async (): Promise<number> => {\n  throw new NotImplementedError();\n};\n\nconst increaseNewsCount = async (provinceId: string) => {\n  await ProvinceModel.findByIdAndUpdate(provinceId, {$inc: {totalNews: 1}}).exec();\n};\n\nconst decreaseNewsCount = async (provinceId: string) => {\n  await ProvinceModel.findByIdAndUpdate(provinceId, {$inc: {totalNews: -1}}).exec();\n};\n\nexport const provinceRepository: ProvinceRepository = {\n  increaseNewsCount,\n  decreaseNewsCount,\n  find,\n  findById,\n  create,\n  update,\n  del,\n  ensureIndexes,\n  findOne,\n  count,\n};\n"],"file":"provinces.repository.js"}