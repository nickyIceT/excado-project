{"version":3,"sources":["../../../../../../src/server/modules/machine-news/aggregates/provinces/provinces.service.ts"],"names":["provinceService","find","_params","provinceRepository","provinces","result","haNoi","data","filter","item","slug","push","hoChiMinh","haiPhong","daNang","forEach","indexOf","otherCountry","before","after","get","id","ProvinceInputError","findById","create","params","validationSchema","yup","object","shape","string","required","name","validate","creationInfo","patch","operation","payload"],"mappings":"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","sourcesContent":["import { ProvinceInputError } from '@app/core';\nimport { provinceRepository, ProvinceService } from '@app/machine-news';\nimport * as yup from 'yup';\n\nconst provinceService: ProvinceService = {\n  find: async (_params) => {\n    // 1. authorize\n\n    // 2. validate\n    // validateQuery(params.query);\n\n    // 3. do business logic\n\n    // 4. persist to db\n    const provinces = await provinceRepository.find();\n    const result: any = [];\n    const haNoi = provinces.data.filter((item) => item.slug === 'ha-noi')[0];\n    if (haNoi) {\n      result.push(haNoi);\n    }\n    const hoChiMinh = provinces.data.filter((item) => item.slug === 'ho-chi-minh')[0];\n    if (hoChiMinh) {\n      result.push(hoChiMinh);\n    }\n    const haiPhong = provinces.data.filter((item) => item.slug === 'hai-phong')[0];\n    if (haiPhong) {\n      result.push(haiPhong);\n    }\n    const daNang = provinces.data.filter((item) => item.slug === 'da-nang')[0];\n    if (daNang) {\n      result.push(daNang);\n    }\n    provinces.data.forEach((item) => {\n      if (['ha-noi', 'ho-chi-minh', 'hai-phong', 'da-nang', 'quoc-gia-khac'].indexOf(item.slug) === -1) {\n        result.push(item);\n      }\n    });\n    const otherCountry = provinces.data.filter((item) => item.slug === 'quoc-gia-khac')[0];\n    if (otherCountry) {\n      result.push(otherCountry);\n    }\n\n    return {\n      before: provinces.before,\n      after: provinces.after,\n      data: result,\n    };\n  },\n  get: async (id, _params) => {\n    // 1. authorize\n\n    // 2. validate\n    if (!id) {\n      throw new ProvinceInputError('Invalid query params');\n    }\n\n    // 3. do business logic\n\n    // 4. persist to db\n    return await provinceRepository.findById(id);\n  },\n  create: async (data, params) => {\n    // 1. authorize\n    // ensurePermission(params.authUser, PERMISSIONS.NEWS.CREATE);\n\n    // 2. validate\n    const validationSchema = yup.object().shape({\n      slug: yup.string().required('Slug is required'),\n      name: yup.string().required('Name is required'),\n    });\n    await validationSchema.validate(data);\n\n    // 3. do business logic\n\n    // 4. persist to db\n    const id = await provinceRepository.create({\n      ...data,\n      ...params.creationInfo,\n    });\n    return {\n      id,\n    };\n  },\n  patch: async (id, data, params): Promise<{}> => {\n    provinceService[data.operation](id, data.payload, params);\n    return {};\n  },\n};\n\nexport default provinceService;\n"],"file":"provinces.service.js"}