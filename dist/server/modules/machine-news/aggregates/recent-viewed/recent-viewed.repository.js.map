{"version":3,"sources":["../../../../../../src/server/modules/machine-news/aggregates/recent-viewed/recent-viewed.repository.ts"],"names":["RecentViewedSchema","mongoose","Schema","uuid","String","user","type","ref","news","Types","ObjectId","createdAt","Number","lastModifiedAt","RecentViewedModel","model","recentViewedRepository","count","NotImplementedError","findById","id","populate","exec","findOne","query","filters","push","length","$and","find","sortBy","first","path","select","before","after","create","payload","newRecentViewedItem","save","update","findOneAndUpdate","$set","upsert","del","_id","ensureIndexes"],"mappings":"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","sourcesContent":["import mongoose from 'mongoose';\nimport { RecentViewedRepository } from './interfaces/RecentViewedRepository';\nimport { NotImplementedError, execCursorPaging } from '@app/core';\n\nexport const RecentViewedSchema = new mongoose.Schema({\n  uuid: String,\n  user: {\n    type: String,\n    ref: 'User',\n  },\n  news: {\n    type: mongoose.Schema.Types.ObjectId,\n    ref: 'News',\n  },\n  createdAt: Number,\n  lastModifiedAt: Number,\n});\nconst RecentViewedModel = mongoose.model('RecentViewed', RecentViewedSchema);\n\nexport const recentViewedRepository: RecentViewedRepository = {\n  count: async () => {\n    throw new NotImplementedError();\n  },\n  findById: async (id) => {\n    return await RecentViewedModel.findById(id).populate('news').exec() as any;\n  },\n  findOne: async (query: any) => {\n    const filters: any = [{news: query.news}];\n    if (query.user) {\n      filters.push({user: query.user});\n    } else if (query.uuid) {\n      filters.push({uuid: query.uuid});\n    }\n    return await RecentViewedModel.findOne(filters.length > 0 ? {$and: filters} : {}).exec() as any;\n  },\n  find: async (query) => {\n    const filters: any[] = [];\n    if ((query as any).user) {\n      filters.push({user: (query as any).user});\n    } else if ((query as any).uuid) {\n      filters.push({uuid: (query as any).uuid});\n    }\n\n    return await execCursorPaging(\n      RecentViewedModel,\n      filters,\n      query.sortBy,\n      Number(query.first),\n      [\n        {\n          path: 'news',\n          model: 'News',\n          populate: [\n            {\n              path: 'categoryId',\n              model: 'Category',\n            },\n            {\n              path: 'brand',\n              model: 'Brand',\n            },\n            {\n              path: 'model',\n              model: 'Model',\n            },\n            {\n              path: 'location',\n              model: 'Province',\n            },\n            {\n              path: 'owner',\n              model: 'User',\n              select: '_id fullName email phoneNo',\n            },\n            {\n              path: 'shop',\n              model: 'Shop',\n              select: '_id name domain',\n            },\n          ],\n        },\n      ] as any,\n      query.before,\n      query.after,\n    );\n  },\n  create: async (payload) => {\n    const newRecentViewedItem = new RecentViewedModel(payload);\n    await newRecentViewedItem.save();\n    return newRecentViewedItem.id;\n  },\n  update: async (payload: any): Promise<void> => {\n    await RecentViewedModel.findOneAndUpdate({news: payload.news, user: payload.user}, {$set: payload}, {upsert: true}).exec();\n  },\n  del: async (_id): Promise<void> => {\n    throw new NotImplementedError();\n  },\n  ensureIndexes: async () => {\n    await RecentViewedModel.ensureIndexes({ uuid: 1, user: 1, news: 1 });\n  },\n};\n"],"file":"recent-viewed.repository.js"}