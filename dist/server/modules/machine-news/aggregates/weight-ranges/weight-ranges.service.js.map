{"version":3,"sources":["../../../../../../src/server/modules/machine-news/aggregates/weight-ranges/weight-ranges.service.ts"],"names":["weightRangeService","setup","app","path","get","_req","res","weightRangeRepository","findAll","data","status","json","logger","error","end","message","id","params","UserInputError","repository","findById","create","min","yup","number","required","max","creationInfo","patch","operation","payload","updateDetail","existedWeightRange","EntityNotFoundError","validationSchema","object","shape","validate","update","modificationInfo"],"mappings":"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","sourcesContent":["import { WeightRangeService } from './interfaces/WeightRangeService';\nimport { weightRangeRepository } from './weight-ranges.repository';\nimport { logger, UserInputError, validatePayload, validateOperation, EntityNotFoundError } from '@app/core';\nimport * as yup from 'yup';\n\nconst weightRangeService: WeightRangeService = {\n  setup: (app, path) => {\n    app.get(path + '/customs/get-all', async (_req: any, res: any) => {\n      try {\n        const data = await weightRangeRepository.findAll();\n        res.status(200).json({\n          data,\n        });\n      } catch (error) {\n        logger.error(error);\n        res.status(error.status || 500).end(error.message || 'Internal server error');\n      }\n    });\n  },\n  get: async (id, params) => {\n    // 1. authorize\n    // ensurePermission(params.authUser, PERMISSIONS.USERS.VIEW);\n\n    // 2. validate\n    if (!id) {\n      throw new UserInputError('Invalid id');\n    }\n\n    // 3. do business logic\n\n    // 4. persist to db\n    return await params.repository.findById(id);\n  },\n  create: async (data, params) => {\n    // 1. authorize\n    // ensurePermission(params.authUser, PERMISSIONS.USERS.CREATE);\n\n    // 2. validate\n    await validatePayload({\n      min: yup.number().required('Min weight is required').min(1, 'Min weight must be greater than 1'),\n      max: yup.number().min(data.min, `Max weight must be greater than min weight`),\n    }, data);\n\n    // 3. do business logic\n\n    // 4. persist to db\n    const id = await params.repository.create({\n      ...data,\n      ...params.creationInfo,\n    });\n\n    return {\n      id,\n    };\n  },\n  patch: async (id, data, params) => {\n    validateOperation(data.operation, ['updateDetail']);\n    await weightRangeService[data.operation](id, data.payload, params);\n    return {};\n  },\n  updateDetail: async (id, data, params) => {\n    // 1. authorize\n    // ensurePermission(params.authUser, PERMISSIONS.USERS.EDIT);\n\n    // 2. validate\n    if (!id) {\n      throw new UserInputError('Invalid query params');\n    }\n    const existedWeightRange = await params.repository.findById(id);\n    if (!existedWeightRange) {\n      throw new EntityNotFoundError('Weight Range');\n    }\n    const validationSchema = yup.object().shape({\n      min: yup.number().min(1, 'Min weight must be greater than 1'),\n      max: yup.number().min(data.min || existedWeightRange.min, `Max weight must be greater than min weight`),\n    });\n    await validationSchema.validate(data);\n\n    // 3. do business logic\n\n    // 4. persist to db\n    await params.repository.update({\n      id,\n      ...data,\n      ...params.modificationInfo,\n    });\n    return {};\n  },\n};\n\nexport default weightRangeService;\n"],"file":"weight-ranges.service.js"}