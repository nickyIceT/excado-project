{"version":3,"sources":["../../../../../../src/server/modules/machine-news/aggregates/weight-ranges/weight-ranges.repository.ts"],"names":["WeightRangeSchema","mongoose","Schema","min","Number","max","WeightRangeModel","model","weightRangeRepository","findAll","find","exec","NotImplementedError","findById","id","create","payload","newWeightRange","save","data","_id","update","findByIdAndUpdate","$set","del","ensureIndexes","findOne","count"],"mappings":"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","sourcesContent":["import mongoose from 'mongoose';\nimport { addAuditableSchema, addDeletableSchema, NotImplementedError } from '@app/core';\nimport { WeightRangeRepository } from './interfaces/WeightRangeRepository';\n\nexport const WeightRangeSchema = new mongoose.Schema(addAuditableSchema(addDeletableSchema({\n  min: Number,\n  max: Number,\n})));\nexport const WeightRangeModel = mongoose.model('WeightRange', WeightRangeSchema);\n\nexport const weightRangeRepository: WeightRangeRepository = {\n  findAll: async () => {\n    return await WeightRangeModel.find().exec() as any;\n  },\n  find: async () => {\n    throw new NotImplementedError();\n  },\n  findById: async (id) => {\n    return await WeightRangeModel.findById(id).exec() as any;\n  },\n  create: async (payload) => {\n    const newWeightRange = new WeightRangeModel(payload);\n    const data = await newWeightRange.save();\n    return data._id;\n  },\n  update: async (payload) => {\n    return await WeightRangeModel.findByIdAndUpdate(payload.id, {$set: payload}).exec() as any;\n  },\n  del: async () => {\n    throw new NotImplementedError();\n  },\n  ensureIndexes: async () => {\n    throw new NotImplementedError();\n  },\n  findOne: async () => {\n    throw new NotImplementedError();\n  },\n  count: async () => {\n    throw new NotImplementedError();\n  },\n};\n"],"file":"weight-ranges.repository.js"}