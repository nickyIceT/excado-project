{"version":3,"sources":["../../../../../../src/server/modules/machine-news/aggregates/follows/follow-news.repository.ts"],"names":["FollowNewsSchema","mongoose","Schema","user","type","String","ref","news","Types","ObjectId","FollowNewsModel","model","followNewsRepository","findFollowsByUser","userId","find","populate","path","select","exec","findOne","query","create","payload","newFollow","save","id","del","deleteOne"],"mappings":"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","sourcesContent":["import mongoose from 'mongoose';\nimport { addAuditableSchema } from '@app/core';\nimport { FollowNewsRepository } from './interfaces/FollowNewsRepository';\n\nconst FollowNewsSchema = new mongoose.Schema(addAuditableSchema({\n  user: {\n    type: String,\n    ref: 'User',\n  },\n  news: {\n    type: mongoose.Schema.Types.ObjectId,\n    ref: 'News',\n  },\n}));\nconst FollowNewsModel = mongoose.model('FollowNews', FollowNewsSchema);\n\nexport const followNewsRepository: FollowNewsRepository = {\n  findFollowsByUser: async (userId: string) => {\n    return await FollowNewsModel.find({user: userId})\n      .populate({\n        path: 'news',\n        model: 'News',\n        populate: [\n          {\n            path: 'categoryId',\n            model: 'Category',\n          },\n          {\n            path: 'brand',\n            model: 'Brand',\n          },\n          {\n            path: 'model',\n            model: 'Model',\n          },\n          {\n            path: 'location',\n            model: 'Province',\n          },\n          {\n            path: 'owner',\n            model: 'User',\n            select: '_id fullName email phoneNo',\n          },\n          {\n            path: 'shop',\n            model: 'Shop',\n            select: '_id name domain',\n          },\n        ],\n      }).exec() as any;\n  },\n  findOne: async (query) => {\n    return await FollowNewsModel.findOne({user: query.user, news: query.news}).exec() as any;\n  },\n  create: async (payload) => {\n    const newFollow = new FollowNewsModel(payload);\n    await newFollow.save();\n    return newFollow.id;\n  },\n  del: async (payload: {user: string; news: string}) => {\n    await FollowNewsModel.deleteOne({user: payload.user, news: payload.news}).exec();\n  },\n};\n"],"file":"follow-news.repository.js"}