{"version":3,"sources":["../../../../../../src/server/modules/machine-news/aggregates/follows/follows.service.ts"],"names":["followsService","find","params","query","type","userRepository","findFollowByUser","followNewsRepository","findFollowsByUser","id","followNews","data","map","item","news","newsRepository","findFollowByNews","UserInputError","patch","operation","payload","followUser","_params","followeeId","userId","followUsersRepository","findOne","user","followee","existedFollowUser","create","createdAt","Date","getTime","unfollowUser","del","newsId","existedFollowNews","unfollowNews","followShop","shopId","followShopRepository","shop","existedFollowShop","unfollowShop"],"mappings":"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","sourcesContent":["import { RequestParams, UserInputError, validateQuery, validateOperation } from '@app/core';\nimport { FollowsService, UserId, NewsId, newsRepository, FindFollowsQuery } from '@app/machine-news';\nimport { userRepository, UsersRepository } from '@app/auth';\nimport { FollowPayload } from './interfaces/FollowPayload';\nimport { ShopId } from './interfaces/ShopId';\nimport { followNewsRepository } from './follow-news.repository';\nimport { followUsersRepository } from './follow-users.repository';\nimport { followShopRepository } from './follow-shops.repository';\n\nconst followsService: FollowsService = {\n  find: async (params: RequestParams<any> & { query: FindFollowsQuery }) => {\n    // 1. authorize\n    // ensurePermission(params.authUser, PERMISSIONS.NEWS.VIEW);\n\n    // 2. validate\n    validateQuery(params.query);\n\n    // 3. do business logic\n\n    // 4. persist to db\n    if (params.query.type === 'user') {\n      return await userRepository.findFollowByUser(params.query);\n    } else if (params.query.type === 'news') {\n      const followNews = await followNewsRepository.findFollowsByUser(params.query.id);\n      return {\n        data: followNews.map((item) => item.news),\n      };\n    } else if (params.query.type === 'shop') {\n      return await newsRepository.findFollowByNews(params.query);\n    } else {\n      throw new UserInputError('Missing query');\n    }\n  },\n  patch: async (id: string, data: { operation: string, payload: FollowPayload }, params: RequestParams<any>): Promise<{}> => {\n    validateOperation(data.operation, ['followUser', 'unfollowUser', 'followNews', 'unfollowNews', 'followShop', 'unfollowShop']);\n    await followsService[data.operation](id, data.payload, params);\n    return {};\n  },\n  followUser: async (id: string, data: UserId, _params: RequestParams<UsersRepository>): Promise<{}> => {\n    // 1. authorize\n\n    // 2. validate\n    const followeeId = data.userId;\n    const userId = id;\n    if (!id) {\n      throw new UserInputError('Invalid query params');\n    }\n    if (!data.userId) {\n      throw new UserInputError('Invalid body');\n    }\n    const existedFollowUser = await followUsersRepository.findOne({user: userId, followee: followeeId});\n    if (existedFollowUser) {\n      throw new UserInputError('User is already followed');\n    }\n\n    // 3. do business logic\n\n    // 4. persist to db\n    await followUsersRepository.create({\n      followee: followeeId,\n      user: userId,\n      createdAt: new Date().getTime(),\n    });\n    return {};\n  },\n  unfollowUser: async (id: string, data: UserId, _params: RequestParams<UsersRepository>): Promise<{}> => {\n    // 1. authorize\n\n    // 2. validate\n    const followeeId = data.userId;\n    const userId = id;\n    if (!id) {\n      throw new UserInputError('Invalid query params');\n    }\n    if (!data.userId) {\n      throw new UserInputError('Invalid body');\n    }\n    const existedFollowUser = await followUsersRepository.findOne({user: userId, followee: followeeId});\n    if (!existedFollowUser) {\n      throw new UserInputError('User is not followed');\n    }\n\n    // 3. do business logic\n\n    // 4. persist to db\n    await followUsersRepository.del({\n      followee: followeeId,\n      user: userId,\n    });\n    return {};\n  },\n  followNews: async (id: string, data: NewsId, _params: RequestParams<any>): Promise<{}> => {\n    // 1. authorize\n\n    // 2. validate\n    const newsId = data.newsId;\n    const userId = id;\n    if (!id) {\n      throw new UserInputError('Invalid query params');\n    }\n    if (!data.newsId) {\n      throw new UserInputError('Invalid body');\n    }\n    const existedFollowNews = await followNewsRepository.findOne({user: userId, news: newsId});\n    if (existedFollowNews) {\n      throw new UserInputError('News is already followed');\n    }\n\n    // 3. do business logic\n\n    // 4. persist to db\n    await followNewsRepository.create({\n      news: newsId,\n      user: userId,\n      createdAt: new Date().getTime(),\n    });\n    return {};\n  },\n  unfollowNews: async (id: string, data: NewsId, _params: RequestParams<any>): Promise<{}> => {\n    // 1. authorize\n\n    // 2. validate\n    const newsId = data.newsId;\n    const userId = id;\n    if (!id) {\n      throw new UserInputError('Invalid query params');\n    }\n    if (!data.newsId) {\n      throw new UserInputError('Invalid body');\n    }\n    const existedFollowNews = await followNewsRepository.findOne({user: userId, news: newsId});\n    if (!existedFollowNews) {\n      throw new UserInputError('News is not followed');\n    }\n\n    // 3. do business logic\n\n    // 4. persist to db\n    await followNewsRepository.del({\n      user: userId,\n      news: newsId,\n    });\n    return {};\n  },\n  followShop: async (id: string, data: ShopId, _params: RequestParams<any>): Promise<{}> => {\n    // 1. authorize\n\n    // 2. validate\n    const shopId = data.shopId;\n    const userId = id;\n    if (!id) {\n      throw new UserInputError('Invalid query params');\n    }\n    if (!data.shopId) {\n      throw new UserInputError('Invalid body');\n    }\n    const existedFollowShop = await followShopRepository.findOne({user: userId, shop: shopId});\n    if (existedFollowShop) {\n      throw new UserInputError('Shop is already followed');\n    }\n\n    // 3. do business logic\n\n    // 4. persist to db\n    await followShopRepository.create({\n      shop: shopId,\n      user: userId,\n      createdAt: new Date().getTime(),\n    });\n    return {};\n  },\n\n  unfollowShop: async (id: string, data: ShopId, _params: RequestParams<any>): Promise<{}> => {\n    // 1. authorize\n\n    // 2. validate\n    const shopId = data.shopId;\n    const userId = id;\n    if (!id) {\n      throw new UserInputError('Invalid query params');\n    }\n    if (!data.shopId) {\n      throw new UserInputError('Invalid body');\n    }\n    const existedFollowShop = await followShopRepository.findOne({user: userId, shop: shopId});\n    if (!existedFollowShop) {\n      throw new UserInputError('Shop is not followed');\n    }\n\n    // 3. do business logic\n\n    // 4. persist to db\n    await followShopRepository.del({\n      shop: shopId,\n      user: userId,\n    });\n    return {};\n  },\n};\n\nexport default followsService;\n"],"file":"follows.service.js"}