{"version":3,"sources":["../../../../../../src/server/modules/machine-news/aggregates/reports/reports.service.ts"],"names":["reportReasons","resolveResult","reportsService","find","query","repository","get","id","params","authUser","PERMISSIONS","REPORTS","VIEW","UserInputError","findById","create","data","news","yup","string","required","reason","oneOf","description","min","max","email","phoneNo","matches","config","regex","phone","newsRepository","existedNews","status","EntityNotFoundError","findOne","existedReportOfNews","updateReport","_id","createdAt","Date","getTime","newsTitle","title","reports","state","patch","operation","payload","resolveReport","existedReport","validationSchema","object","shape","resolvedResult","validate","update","modificationInfo","resolvedAt","resolvedBy"],"mappings":"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","sourcesContent":["import { ReportsService } from './interfaces/ReportsService';\nimport { ensurePermission, validateQuery, UserInputError, validatePayload, EntityNotFoundError, validateOperation } from '@app/core';\nimport { PERMISSIONS } from '@app/machine-news';\nimport * as yup from 'yup';\nimport { ReportReason, ReportResult } from './interfaces/Report';\nimport { config } from '@app/config';\n\nconst reportReasons: ReportReason[] = ['SOLD', 'VIOLATE', 'WRONG_INFO'];\nconst resolveResult: ReportResult[] = ['DELETE', 'SKIP'];\nconst reportsService: ReportsService = {\n  find: async ({ query, repository }) => {\n    // 1. authorize\n    // ensurePermission(authUser, PERMISSIONS.REPORTS.VIEW);\n\n    // 2. validate\n    validateQuery(query);\n\n    // 3. do business logic\n\n    // 4. persist to db\n    return await repository.find(query);\n  },\n  get: async (id, params) => {\n    // 1. authorize\n    ensurePermission(params.authUser, PERMISSIONS.REPORTS.VIEW);\n\n    // 2. validate\n    if (!id) {\n      throw new UserInputError('Invalid id');\n    }\n\n    // 3. do business logic\n\n    // 4. persist to db\n    return await params.repository.findById(id);\n  },\n  create: async (data, params) => {\n    // 1. authorize\n\n    // 2. validate\n    await validatePayload({\n      news: yup.string().required('News is required'),\n      reason: yup.string().required('Reason is required').oneOf(reportReasons),\n      description: yup.string().required('Description is required').min(20, 'Too short').max(500, 'Too long'),\n      email: yup.string().required('Email is required').email('Invalid email address'),\n      phoneNo: yup.string().required('Phone number is required').matches(config.regex.phone, 'Invalid phone number'),\n    }, data);\n    const existedNews = await params.newsRepository.findById(data.news);\n    if (!existedNews || existedNews.status !== 'PUBLIC') {\n      throw new EntityNotFoundError('News');\n    }\n\n    // 3. do business logic\n    const existedReportOfNews = await params.repository.findOne({news: data.news});\n\n    // 4. persist to db\n    if (existedReportOfNews) {\n      await params.repository.updateReport(existedReportOfNews._id!, {\n        reason: data.reason,\n        description: data.description,\n        email: data.email,\n        phoneNo: data.phoneNo,\n        createdAt: new Date().getTime(),\n      });\n\n      return {\n        id: existedReportOfNews._id!,\n      };\n    } else {\n      const id = await params.repository.create({\n        news: data.news,\n        newsTitle: existedNews.title,\n        reports: [{\n          reason: data.reason,\n          description: data.description,\n          email: data.email,\n          phoneNo: data.phoneNo,\n          createdAt: new Date().getTime(),\n        }],\n        state: 'PENDING',\n      });\n\n      return {\n        id,\n      };\n    }\n  },\n  patch: async (id, data, params) => {\n    validateOperation(data.operation, ['resolveReport']);\n    await reportsService[data.operation](id, data.payload, params);\n    return {};\n  },\n  resolveReport: async (id, data, params) => {\n    // 1. authorize\n    // ensurePermission(params.authUser, PERMISSIONS.REPORTS.EDIT);\n\n    // 2. validate\n    if (!id) {\n      throw new UserInputError('Invalid query params');\n    }\n    const existedReport = await params.repository.findById(id);\n    if (!existedReport) {\n      throw new EntityNotFoundError('Report');\n    }\n    const validationSchema = yup.object().shape({\n      resolvedResult: yup.string().required('Result is required').oneOf(resolveResult),\n    });\n    await validationSchema.validate(data);\n\n    // 3. do business logic\n    if (data.resolvedResult === 'DELETE') {\n      await params.newsRepository.update({\n        id: (existedReport.news as any)._id,\n        status: 'DELETED',\n        ...params.modificationInfo,\n      });\n    }\n\n    // 4. persist to db\n    await params.repository.update({\n      id: existedReport._id,\n      state: 'RESOLVED',\n      resolvedResult: data.resolvedResult,\n      resolvedAt: new Date().getTime(),\n      resolvedBy: params.authUser!.id,\n    });\n    return {};\n  },\n};\n\nexport default reportsService;\n"],"file":"reports.service.js"}