{"version":3,"sources":["../../../../../../src/server/modules/machine-news/aggregates/reports/reports.repository.ts"],"names":["ReportsSchema","mongoose","Schema","news","type","Types","ObjectId","ref","newsTitle","String","reports","reason","description","email","phoneNo","createdAt","Number","state","default","resolvedResult","resolvedAt","resolvedBy","ReportsModel","model","reportsRepository","count","find","countDocuments","exec","findOne","query","NotImplementedError","findById","id","filters","search","push","$regex","$options","sortBy","first","path","populate","before","after","create","payload","newReport","save","update","findByIdAndUpdate","$set","updateReport","report","$push","del","_id","ensureIndexes"],"mappings":"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","sourcesContent":["import mongoose from 'mongoose';\nimport { ReportsRepository } from './interfaces/ReportsRepository';\nimport { execCursorPaging, NotImplementedError } from '@app/core';\n\nexport const ReportsSchema = new mongoose.Schema({\n  news: {\n    type: mongoose.Schema.Types.ObjectId,\n    ref: 'News',\n  },\n  newsTitle: String,\n  reports: [{\n    reason: String,\n    description: String,\n    email: String,\n    phoneNo: String,\n    createdAt: Number,\n  }],\n  state: {\n    type: String,\n    default: 'PENDING',\n  },\n  resolvedResult: String,\n  resolvedAt: Number,\n  resolvedBy: {\n    type: String,\n    ref: 'User',\n  },\n});\nconst ReportsModel = mongoose.model('Report', ReportsSchema);\n\nexport const reportsRepository: ReportsRepository = {\n  count: async () => {\n    return await ReportsModel.find().countDocuments().exec();\n  },\n  findOne: async (query: {news?: string}) => {\n    if (query.news) {\n      return await ReportsModel.findOne({news: query.news}).exec() as any;\n    } else {\n      throw new NotImplementedError();\n    }\n  },\n  findById: async (id) => {\n    return await ReportsModel.findById(id).exec() as any;\n  },\n  find: async (query) => {\n    const filters: any[] = [];\n    if (query.search) {\n      filters.push({newsTitle: { $regex: `${query.search}`, $options: 'i' }});\n    }\n    if (query.state) {\n      filters.push({state: query.state});\n    }\n    if (query.reason) {\n      filters.push({'reports.reason': query.reason});\n    }\n\n    return await execCursorPaging(\n      ReportsModel,\n      filters,\n      query.sortBy,\n      Number(query.first),\n      [\n        {\n          path: 'news',\n          model: 'News',\n          populate: [\n            {\n              path: 'shop',\n              model: 'Shop',\n            },\n          ],\n        } as any,\n      ],\n      query.before,\n      query.after,\n    );\n  },\n  create: async (payload) => {\n    const newReport = new ReportsModel(payload);\n    await newReport.save();\n    return newReport.id;\n  },\n  update: async (payload) => {\n    await ReportsModel.findByIdAndUpdate(payload.id, { $set: payload }).exec();\n  },\n  updateReport: async (id, report) => {\n    await ReportsModel.findByIdAndUpdate(id, {$push: {reports: report}}).exec();\n  },\n  del: async (_id): Promise<void> => {\n    throw new NotImplementedError();\n  },\n  ensureIndexes: async () => {\n    await ReportsModel.ensureIndexes({ state: 1, 'reports.reason': 1, newsTitle: 'text' });\n  },\n};\n"],"file":"reports.repository.js"}