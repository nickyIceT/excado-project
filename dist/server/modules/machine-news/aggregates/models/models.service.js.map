{"version":3,"sources":["../../../../../../src/server/modules/machine-news/aggregates/models/models.service.ts"],"names":["modelService","find","params","modelRepository","query","get","id","_params","ModelInputError","findById","create","data","authUser","validationSchema","yup","object","shape","name","string","required","brand","category","validate","creationInfo","slug","patch","operation","payload","updateDetail","UserInputError","existedModel","repository","EntityNotFoundError","min","max","update","modificationInfo"],"mappings":"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","sourcesContent":["import { ModelInputError, ensurePermission, validateOperation, UserInputError, EntityNotFoundError } from '@app/core';\nimport { modelRepository, ModelService } from '@app/machine-news';\nimport * as yup from 'yup';\nimport slugify from 'slugify';\n\nconst modelService: ModelService = {\n  find: async (params) => {\n    // 1. authorize\n\n    // 2. validate\n    // validateQuery(params.query);\n\n    // 3. do business logic\n\n    // 4. persist to db\n    return await modelRepository.find(params.query);\n  },\n  get: async (id, _params) => {\n    // 1. authorize\n\n    // 2. validate\n    if (!id) {\n      throw new ModelInputError('Invalid query params');\n    }\n\n    // 3. do business logic\n\n    // 4. persist to db\n    return await modelRepository.findById(id);\n  },\n  create: async (data, params) => {\n    // 1. authorize\n    ensurePermission(params.authUser, '');\n\n    // 2. validate\n    const validationSchema = yup.object().shape({\n      name: yup.string().required('Model name is required'),\n      brand: yup.string().required('Brand is required'),\n      category: yup.string().required('Category is required'),\n    });\n    await validationSchema.validate(data);\n\n    // 3. do business logic\n\n    // 4. persist to db\n    const id = await modelRepository.create({\n      ...data,\n      ...params.creationInfo,\n      slug: slugify(data.name),\n    });\n    return {\n      id,\n    };\n  },\n  patch: async (id, data, params): Promise<{}> => {\n    validateOperation(data.operation, ['updateDetail']);\n    modelService[data.operation](id, data.payload, params);\n    return {};\n  },\n  updateDetail: async (id, data, params) => {\n    // 1. authorize\n    // ensurePermission(params.authUser, PERMISSIONS.USERS.EDIT);\n\n    // 2. validate\n    if (!id) {\n      throw new UserInputError('Invalid query params');\n    }\n    const existedModel = params.repository.findById(id);\n    if (!existedModel) {\n      throw new EntityNotFoundError('Model');\n    }\n    const validationSchema = yup.object().shape({\n      name: yup.string().min(2, 'Too short').max(50, 'Too long'),\n    });\n    await validationSchema.validate(data);\n\n    // 3. do business logic\n\n    // 4. persist to db\n     await params.repository.update({\n      id,\n      ...data,\n      ...params.modificationInfo,\n      slug: slugify(data.name!),\n    });\n    return {};\n  },\n};\n\nexport default modelService;\n"],"file":"models.service.js"}