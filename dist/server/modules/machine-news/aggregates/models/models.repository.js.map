{"version":3,"sources":["../../../../../../src/server/modules/machine-news/aggregates/models/models.repository.ts"],"names":["ModelSchema","mongoose","Schema","slug","String","name","totalNews","type","Number","default","brand","Types","ObjectId","ref","category","ModelModel","model","findAll","find","populate","exec","query","filters","search","push","$regex","$options","sortBy","first","before","after","findById","id","create","payload","newModel","save","data","_id","update","findByIdAndUpdate","$set","del","ensureIndexes","findOne","_query","NotImplementedError","count","increaseNewsCount","modelId","$inc","decreaseNewsCount","modelRepository"],"mappings":"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","sourcesContent":["import { addDeletableSchema, addAuditableSchema, FindResult, NotImplementedError, execCursorPaging } from '@app/core';\nimport { Model, ModelRepository } from '@app/machine-news';\nimport mongoose from 'mongoose';\nimport { FindModelsQuery } from './interfaces/FindModelsQuery';\n\nexport const ModelSchema = new mongoose.Schema(addAuditableSchema(addDeletableSchema({\n  slug: String,\n  name: String,\n  totalNews: {\n    type: Number,\n    default: 0,\n  },\n  brand: {\n    type: mongoose.Schema.Types.ObjectId,\n    ref: 'Brand',\n  },\n  category: {\n    type: mongoose.Schema.Types.ObjectId,\n    ref: 'Category',\n  },\n})));\nexport const ModelModel = mongoose.model('Model', ModelSchema);\n\nconst findAll = async (): Promise<Model[]> => {\n  return await ModelModel.find().populate('category').populate('brand').exec() as any;\n};\n\nconst find = async (query: FindModelsQuery): Promise<FindResult<Model>> => {\n  const filters: any = [];\n  if (query.search) {\n    filters.push({\n      name: { $regex: `^${query.search}`, $options: 'i' },\n    });\n  }\n  if (query.brand) {\n    filters.push({\n      brand: query.brand,\n    });\n  }\n  if (query.category) {\n    filters.push({\n      category: query.category,\n    });\n  }\n  return execCursorPaging(\n    ModelModel,\n    filters,\n    query.sortBy,\n    Number(query.first),\n    ['brand', 'category'],\n    query.before,\n    query.after,\n  );\n};\n\nconst findById = async (id: string): Promise<Model> => {\n  return await ModelModel.findById(id).exec() as any;\n};\n\nconst create = async (payload: Partial<Model>): Promise<string> => {\n  const newModel = new ModelModel(payload);\n  const data = await newModel.save();\n  return data._id;\n};\n\nconst update = async (payload: Partial<Model>): Promise<void> => {\n  await ModelModel.findByIdAndUpdate(payload.id, { $set: payload }).exec();\n};\n\nconst del = async (_id: string): Promise<void> => {\n  await ModelModel.ensureIndexes({brand: 1, category: 1, slug: 1, name: 1});\n};\n\nconst ensureIndexes = async () => {\n  await ModelModel.ensureIndexes({ name: 1, slug: 1 });\n};\n\nconst findOne = async (_query: any): Promise<Model> => {\n  throw new NotImplementedError();\n};\n\nconst count = async (): Promise<number> => {\n  throw new NotImplementedError();\n};\n\nconst increaseNewsCount = async (modelId: string) => {\n  await ModelModel.findByIdAndUpdate(modelId, {$inc: {totalNews: 1}}).exec();\n};\n\nconst decreaseNewsCount = async (modelId: string) => {\n  await ModelModel.findByIdAndUpdate(modelId, {$inc: {totalNews: -1}}).exec();\n};\n\nexport const modelRepository: ModelRepository = {\n  increaseNewsCount,\n  decreaseNewsCount,\n  findAll,\n  find,\n  findById,\n  create,\n  update,\n  del,\n  ensureIndexes,\n  findOne,\n  count,\n};\n"],"file":"models.repository.js"}