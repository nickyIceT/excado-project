{"version":3,"sources":["../../../../../../src/server/modules/machine-news/aggregates/notifications/notifications.repository.ts"],"names":["NotificationSchema","mongoose","Schema","owner","type","String","ref","news","Types","ObjectId","state","default","createdAt","Number","readAt","NotificationsModel","model","notificationsRepository","readAllNotifications","updateMany","$set","Date","getTime","exec","countUnreadNotifications","id","find","countDocuments","count","findOne","NotImplementedError","findById","query","filters","push","sortBy","first","path","populate","select","before","after","create","payload","newNotification","save","update","findByIdAndUpdate","del","_id","ensureIndexes"],"mappings":"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","sourcesContent":["import mongoose from 'mongoose';\nimport { NotificationsRepository } from '@app/machine-news';\nimport { NotImplementedError, execCursorPaging } from '@app/core';\n\nexport const NotificationSchema = new mongoose.Schema({\n  owner: {\n    type: String,\n    ref: 'User',\n  },\n  news: {\n    type: mongoose.Schema.Types.ObjectId,\n    ref: 'News',\n  },\n  state: {\n    type: String,\n    default: 'UNREAD',\n  },\n  type: String,\n  createdAt: Number,\n  readAt: Number,\n});\nconst NotificationsModel = mongoose.model('Notification', NotificationSchema);\n\nexport const notificationsRepository: NotificationsRepository = {\n  readAllNotifications: async (owner) => {\n    await NotificationsModel.updateMany({owner}, {$set: {\n      state: 'READ',\n      readAt: new Date().getTime(),\n    }}).exec();\n  },\n  countUnreadNotifications: async (id) => {\n    return await NotificationsModel.find({\n      owner: id,\n      state: 'UNREAD',\n    }).countDocuments().exec();\n  },\n  count: async () => {\n    return await NotificationsModel.find().countDocuments().exec();\n  },\n  findOne: async () => {\n    throw new NotImplementedError();\n  },\n  findById: async (id) => {\n    return await NotificationsModel.findById(id).exec() as any;\n  },\n  find: async (query) => {\n    const filters: any[] = [];\n    if ((query as any).owner) {\n      filters.push({owner: (query as any).owner});\n    }\n\n    return await execCursorPaging(\n      NotificationsModel,\n      filters,\n      query.sortBy,\n      Number(query.first),\n      [\n        {\n          path: 'news',\n          model: 'News',\n          populate: [\n            {\n              path: 'shop',\n              model: 'Shop',\n            },\n            {\n              path: 'owner',\n              model: 'User',\n              select: '_id fullName phoneNo email',\n            },\n          ],\n        } as any,\n      ],\n      query.before,\n      query.after,\n    );\n  },\n  create: async (payload) => {\n    const newNotification = new NotificationsModel(payload);\n    await newNotification.save();\n    return newNotification.id;\n  },\n  update: async (payload: any): Promise<void> => {\n    await NotificationsModel.findByIdAndUpdate(payload.id, {$set: payload}).exec();\n  },\n  del: async (_id): Promise<void> => {\n    throw new NotImplementedError();\n  },\n  ensureIndexes: async () => {\n    await NotificationsModel.ensureIndexes({ owner: 1, news: 1 });\n  },\n};\n"],"file":"notifications.repository.js"}