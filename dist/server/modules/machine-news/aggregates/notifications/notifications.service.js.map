{"version":3,"sources":["../../../../../../src/server/modules/machine-news/aggregates/notifications/notifications.service.ts"],"names":["notificationStates","notificationTypes","notificationsService","find","query","repository","authUser","id","NotAuthenticatedError","owner","get","params","UserInputError","countUnreadNotifications","unreadNotifications","create","data","validationSchema","yup","object","shape","string","required","news","state","oneOf","type","validate","createdAt","Date","getTime","patch","operation","payload","readAllNotifications","_data","readNotification","findById","notificationId","existedNotification","EntityNotFoundError","update","_id","readAt"],"mappings":"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","sourcesContent":["import { NotificationsService } from '@app/machine-news';\nimport { NotAuthenticatedError, validateQuery, ensureOwner, UserInputError, validateOperation, EntityNotFoundError } from '@app/core';\nimport * as yup from 'yup';\n\nconst notificationStates = ['READ', 'UNREAD'];\nconst notificationTypes = ['FOLLOW_USER', 'FOLLOW_SHOP', 'CREATE_NEWS'];\nconst notificationsService: NotificationsService = {\n  find: async ({ query, repository, authUser }) => {\n    // 1. authorize\n    if (!authUser || ! authUser.id) {\n      throw new NotAuthenticatedError();\n    }\n\n    // 2. validate\n    validateQuery(query);\n\n    // 3. do business logic\n\n    // 4. persist to db\n    return await repository.find({\n      ...query,\n      owner: authUser.id,\n    } as any);\n  },\n  get: async (id, params) => {\n    // 1. authorize\n    ensureOwner(params.authUser, id);\n\n    // 2. validate\n    if (!id) {\n      throw new UserInputError('Invalid id');\n    }\n\n    // 3. do business logic\n\n    // 4. persist to db\n    const unreadNotifications = await params.repository.countUnreadNotifications(id);\n    return {\n      unreadNotifications,\n    } as any;\n  },\n  create: async (data, params) => {\n    // 1. authorize\n\n    // 2. validate\n    const validationSchema = yup.object().shape({\n      owner: yup.string().required('Owner is required'),\n      news: yup.string().required('News is required'),\n      state: yup.string().required('State type is required').oneOf(notificationStates),\n      type: yup.string().required('Notification type is required').oneOf(notificationTypes),\n    });\n    await validationSchema.validate(data);\n\n    // 3. do business logic\n\n    // 4. persist to db\n    const id = await params.repository.create({\n      ...data,\n      createdAt: new Date().getTime(),\n    });\n    return {\n      id,\n    };\n  },\n  patch: async (id, data, params) => {\n    validateOperation(data.operation, ['readAllNotifications', 'readNotification']);\n    await notificationsService[data.operation](id, data.payload, params);\n    return {};\n  },\n  readAllNotifications: async (id, _data, params) => {\n    // 1. authorize\n    ensureOwner(params.authUser, id);\n\n    // 2. validate\n    if (!id) {\n      throw new UserInputError('Invalid user id');\n    }\n\n    // 3. do business logic\n\n    // 4. persist to db\n    await params.repository.readAllNotifications(id);\n  },\n  readNotification: async (id, data, params) => {\n    // 1. authorize\n    ensureOwner(params.authUser, id);\n\n    // 2. validate\n    if (!id) {\n      throw new UserInputError('Invalid user id');\n    }\n    const existedNotification = await params.repository.findById(data.notificationId);\n    if (!existedNotification) {\n      throw new EntityNotFoundError('Notification');\n    }\n\n    // 3. do business logic\n\n    // 4. persist to db\n    await params.repository.update({\n      id: existedNotification._id,\n      state: 'READ',\n      readAt: new Date().getTime(),\n    });\n  },\n};\n\nexport default notificationsService;\n"],"file":"notifications.service.js"}