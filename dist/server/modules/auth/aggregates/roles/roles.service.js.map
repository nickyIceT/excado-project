{"version":3,"sources":["../../../../../../src/server/modules/auth/aggregates/roles/roles.service.ts"],"names":["roleNameRegex","roleService","setup","app","path","get","getAll","find","params","authUser","PERMISSIONS","ROLES","VIEW","query","repository","id","UserInputError","findById","create","data","CREATE","validationSchema","yup","object","shape","name","string","min","max","matches","required","description","permissions","array","validate","findOne","existedRole","creationInfo","patch","operation","payload","updateDetail","EDIT","EntityNotFoundError","update","modificationInfo","activate","_data","isActive","deactivate","req","res","idToken","headers","authorization","cookies","token","admin","auth","verifyIdToken","roleRepository","findAll","roles","status","json","logger","error","end","message"],"mappings":"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","sourcesContent":["import { UserInputError, EntityNotFoundError, validateQuery, ensurePermission, validateOperation, logger } from '@app/core';\nimport * as yup from 'yup';\nimport { PERMISSIONS, RolesService, roleRepository } from '@app/auth';\nimport admin from 'firebase-admin';\nimport replace from 'lodash/replace';\n\nconst roleNameRegex = /^[a-zA-Z0-9-]*$/;\nconst roleService: RolesService = {\n  setup: (app, path) => {\n    app.get(path + '/customs/get-all', roleService.getAll);\n  },\n  find: async (params) => {\n    // 1. authorize\n    ensurePermission(params.authUser, PERMISSIONS.ROLES.VIEW);\n\n    // 2. validate\n    validateQuery(params.query);\n\n    // 3. do business logic\n\n    // 4. persist to db\n    return await params.repository.find(params.query);\n  },\n  get: async (id, params) => {\n    // 1. authorize\n    ensurePermission(params.authUser, PERMISSIONS.ROLES.VIEW);\n\n    // 2. validate\n    if (!id) {\n      throw new UserInputError('Invalid query params');\n    }\n\n    // 3. do business logic\n\n    // 4. persist to db\n    return await params.repository.findById(id);\n  },\n  create: async (data, params) => {\n    // 1. authorize\n    ensurePermission(params.authUser, PERMISSIONS.ROLES.CREATE);\n\n    // 2. validate\n    const validationSchema = yup.object().shape({\n      name: yup.string().min(2, 'Name too short').max(50, 'Name too long').matches(roleNameRegex).required('Name is required'),\n      description: yup.string().required('Description is required'),\n      permissions: yup.array().required('Permissions is required'),\n    });\n    await validationSchema.validate(data);\n    const existedRole = await params.repository.findOne({name: data.name});\n    if (existedRole) {\n      throw new UserInputError('Role name already exist');\n    }\n\n    // 3. do business logic\n\n    // 4. persist to db\n    const id = await params.repository.create({\n      ...data,\n      ...params.creationInfo,\n    });\n\n    return {\n      id,\n    };\n  },\n  patch: async (id, data, params) => {\n    validateOperation(data.operation, ['updateDetail', 'activate', 'deactivate']);\n    await roleService[data.operation](id, data.payload, params);\n    return {};\n  },\n  updateDetail: async (id, data, params) => {\n    // 1. authorize\n    ensurePermission(params.authUser, PERMISSIONS.ROLES.EDIT);\n\n    // 2. validate\n    if (!id) {\n      throw new UserInputError('Invalid query params');\n    }\n    const existedRole = await params.repository.findById(id);\n    if (!existedRole) {\n      throw new EntityNotFoundError('Role');\n    }\n    const validationSchema = yup.object().shape({\n      name: yup.string().min(2, 'Name too short').max(50, 'Name too long').matches(roleNameRegex),\n      description: yup.string(),\n      permissions: yup.array(),\n    });\n    await validationSchema.validate(data);\n\n    // 3. do business logic\n    // TODO: if permissions is updated => find all user with this role and update their firebase token\n\n    // 4. persist to db\n    await params.repository.update({\n      id,\n      ...data,\n      ...params.modificationInfo,\n    });\n\n    return {};\n  },\n  activate: async (id, _data, params) => {\n    // 1. authorize\n    ensurePermission(params.authUser, PERMISSIONS.ROLES.EDIT);\n\n    // 2. validate\n    if (!id) {\n      throw new UserInputError('Invalid query params');\n    }\n    const existedRole = await params.repository.findById(id);\n    if (!existedRole) {\n      throw new EntityNotFoundError('Role');\n    }\n\n    // 3. do business logic\n\n    // 4. persist to db\n    await params.repository.update({\n      id,\n      isActive: true,\n      ...params.modificationInfo,\n    });\n\n    return {};\n  },\n  deactivate: async (id, _data, params) => {\n    // 1. authorize\n    ensurePermission(params.authUser, PERMISSIONS.ROLES.EDIT);\n\n    // 2. validate\n    if (!id) {\n      throw new UserInputError('Invalid query params');\n    }\n    const existedRole = await params.repository.findById(id);\n    if (!existedRole) {\n      throw new EntityNotFoundError('Role');\n    }\n\n    // 3. do business logic\n\n    // 4. persist to db\n    await params.repository.update({\n      id,\n      isActive: false,\n      ...params.modificationInfo,\n    });\n\n    return {};\n  },\n  getAll: async (req, res) => {\n    try {\n      const idToken = replace(req.headers.authorization || req.cookies.token ? req.headers.authorization || req.cookies.token : '', 'Bearer ', '');\n      await admin.auth().verifyIdToken(idToken);\n\n      const roles = await roleRepository.findAll();\n      res.status(200).json({\n        roles,\n      });\n    } catch (error) {\n      logger.error(error);\n      res.status(error.status || 500).end(error.message || 'Internal server error');\n    }\n  },\n};\n\nexport default roleService;\n"],"file":"roles.service.js"}