{"version":3,"sources":["../../../../../../src/server/modules/auth/aggregates/roles/roles.repository.ts"],"names":["RoleSchema","mongoose","Schema","name","String","description","permissions","isDefault","Boolean","isActive","type","default","RoleModel","model","roleRepository","findAll","find","select","exec","findById","id","findOne","query","filters","search","push","$text","$search","$all","sortBy","Number","first","before","after","count","_query","NotImplementedError","create","payload","newRole","save","update","findByIdAndUpdate","$set","del","_id","ensureIndexes","findByIds","ids","$in","findDefaultRoles"],"mappings":"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","sourcesContent":["import * as mongoose from 'mongoose';\nimport { addAuditableSchema, addDeletableSchema, NotImplementedError, execCursorPaging } from '@app/core';\nimport { RolesRepository } from '@app/auth';\n\nconst RoleSchema = new mongoose.Schema(addAuditableSchema(addDeletableSchema({\n  name: String,\n  description: String,\n  permissions: [String],\n  isDefault: Boolean,\n  isActive: {\n    type: Boolean,\n    default: true,\n  },\n})));\nconst RoleModel = mongoose.model('Role', RoleSchema);\n\nexport const roleRepository: RolesRepository = {\n  findAll: async () => {\n    return await RoleModel.find().select('_id name').exec() as any;\n  },\n  findById: async (id) => {\n    return RoleModel.findById(id).exec() as any;\n  },\n  findOne: async (query: {name?: string}) => {\n    return RoleModel.findOne({ name: query.name }).exec() as any;\n  },\n  find: async (query) => {\n    const filters: any[] = [];\n    if (query.search) {\n      filters.push({ $text: { $search: `\"${query.search}\"` } });\n    }\n    if (query.permissions) {\n      filters.push({\n        permissions: { $all: query.permissions },\n      });\n    }\n\n    return await execCursorPaging(\n      RoleModel,\n      filters,\n      query.sortBy,\n      Number(query.first),\n      [],\n      query.before,\n      query.after,\n    );\n  },\n  count: async (_query) => {\n    throw new NotImplementedError();\n  },\n  create: async (payload) => {\n    const newRole = new RoleModel(payload);\n    await newRole.save();\n    return newRole.id;\n  },\n  update: async (payload) => {\n    await RoleModel.findByIdAndUpdate(payload.id, { $set: payload }).exec();\n  },\n  del: async (_id): Promise<void> => {\n    throw new NotImplementedError();\n  },\n  ensureIndexes: async () => {\n    //\n  },\n  findByIds: async (ids) => {\n    return RoleModel.find({ _id: { $in: ids } }).exec() as any;\n  },\n  findDefaultRoles: async () => {\n    return RoleModel.find({ isDefault: true }) as any;\n  },\n};\n"],"file":"roles.repository.js"}