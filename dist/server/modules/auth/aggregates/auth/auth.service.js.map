{"version":3,"sources":["../../../../../../src/server/modules/auth/aggregates/auth/auth.service.ts"],"names":["authService","setup","app","path","post","getCustomToken","updatePassword","create","data","params","admin","auth","verifyIdToken","idToken","getUser","uid","userFirebaseInfo","roleRepository","findDefaultRoles","defaultRoles","customClaims","setCustomUserClaims","roles","permissions","map","role","avatarUrl","province","providerData","providerId","updateUser","emailVerified","repository","findById","existedUser","newUser","id","email","phoneNo","phoneNumber","familyName","displayName","givenName","fullName","loginDetail","provider","isActive","completeSignUp","createdBy","createdAt","Date","getTime","req","res","body","tokenInfo","createCustomToken","customToken","status","json","logger","error","end","message","newPassword","password"],"mappings":"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","sourcesContent":["import admin from 'firebase-admin';\nimport { User, AuthService } from '@app/auth';\nimport { union } from 'lodash';\nimport { logger } from '@app/core';\nimport replace from 'lodash/replace';\n\nconst authService: AuthService = {\n  setup: (app, path) => {\n    app.post(path + '/get-custom-token', authService.getCustomToken);\n    app.post(path + '/update-password', authService.updatePassword);\n  },\n  create: async (data, params) => {\n    // 1. verify id token\n    const verifyIdToken: any = await admin.auth().verifyIdToken(data.idToken);\n    const userFirebaseInfo = await admin.auth().getUser(verifyIdToken.uid);\n\n    // 2. add custom claims to firebase idToken\n    const defaultRoles = await params.roleRepository.findDefaultRoles();\n    if (!userFirebaseInfo.customClaims) {\n      await admin.auth().setCustomUserClaims(verifyIdToken.uid, {\n        roles: defaultRoles,\n        permissions: defaultRoles ? union(defaultRoles.map((role) => role.permissions)) : [],\n        avatarUrl: '',\n        province: '',\n      });\n    }\n\n    // 3. verify email if register with phone\n    if (userFirebaseInfo.providerData[0].providerId === 'phone') {\n      await admin.auth().updateUser(userFirebaseInfo.uid, {\n        emailVerified: true,\n      });\n    }\n\n    // 3. create new mongo user\n    const existedUser = await params.repository.findById(verifyIdToken.uid);\n    if (!existedUser) {\n      const newUser: Partial<User> = {\n        id: userFirebaseInfo.uid,\n        email: userFirebaseInfo.providerData[0].providerId === 'phone' ? '' : userFirebaseInfo.email || userFirebaseInfo.providerData[0].email,\n        phoneNo: userFirebaseInfo.phoneNumber,\n        familyName: userFirebaseInfo.providerData[0] ? userFirebaseInfo.providerData[0].displayName : '',\n        givenName: '',\n        fullName: userFirebaseInfo.providerData[0] ? userFirebaseInfo.providerData[0].displayName : '',\n        loginDetail: userFirebaseInfo.providerData[0].providerId === 'facebook.com'\n          ? {\n            uid: userFirebaseInfo.providerData[0] ? userFirebaseInfo.providerData[0].uid : '',\n            email: userFirebaseInfo.providerData[0] ? userFirebaseInfo.providerData[0].email : '',\n            provider: 'facebook',\n          } : userFirebaseInfo.providerData[0].providerId === 'google.com' ? {\n            uid: userFirebaseInfo.providerData[0] ? userFirebaseInfo.providerData[0].uid : '',\n            email: userFirebaseInfo.providerData[0] ? userFirebaseInfo.providerData[0].email : '',\n            provider: 'google',\n          } : userFirebaseInfo.providerData[0].providerId === 'password' ? {\n            email: userFirebaseInfo.providerData[0] ? userFirebaseInfo.providerData[0].email : '',\n            provider: 'email',\n          } : {\n            phoneNo: userFirebaseInfo.phoneNumber,\n            provider: 'phone',\n          } as any,\n        roles: defaultRoles.map((role) => role.id!),\n        isActive: true,\n        completeSignUp: false,\n        createdBy: userFirebaseInfo.uid,\n        createdAt: new Date().getTime(),\n      };\n      await params.repository.create(newUser as any);\n    }\n\n    return {};\n  },\n  getCustomToken: async (req: any, res: any) => {\n    try {\n      const { idToken } = req.body;\n      const tokenInfo = await admin.auth().verifyIdToken(replace(idToken, 'Bearer ', ''));\n      const customToken = await admin.auth().createCustomToken(tokenInfo.uid);\n      res.status(200).json({customToken});\n    } catch (error) {\n      logger.error(error);\n      res.status(error.status || 500).end(error.message || 'Internal server error');\n    }\n  },\n  updatePassword: async (req, res) => {\n    try {\n      const { idToken, newPassword } = req.body;\n      const tokenInfo = await admin.auth().verifyIdToken(idToken);\n      await admin.auth().updateUser(tokenInfo.uid, {\n        password: newPassword,\n      });\n      res.status(200).end();\n    } catch (error) {\n      logger.error(error);\n      res.status(error.status || 500).end(error.message || 'Internal server error');\n    }\n  },\n};\n\nexport default authService;\n"],"file":"auth.service.js"}