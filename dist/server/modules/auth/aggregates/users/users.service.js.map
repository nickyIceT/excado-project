{"version":3,"sources":["../../../../../../src/server/modules/auth/aggregates/users/users.service.ts"],"names":["usersService","setup","app","path","get","checkEmailExist","checkPhoneNoExist","find","query","repository","authUser","PERMISSIONS","USERS","VIEW","id","params","UserInputError","findById","create","data","CREATE","email","yup","string","required","password","matches","config","regex","roles","array","familyName","min","max","givenName","findOne","existedUser","admin","auth","createUser","newUser","updateUser","uid","displayName","type","emailVerified","roleRepository","findByIds","permissions","setCustomUserClaims","map","item","avatarUrl","province","creationInfo","loginDetail","provider","fullName","patch","operation","payload","updateDetail","EDIT","EntityNotFoundError","validationSchema","object","shape","validate","emailExist","_id","length","Promise","all","getUser","userInfo","customClaims","update","modificationInfo","activate","_data","disabled","isActive","deactivate","updateFollowCount","userId","userRepository","existedNews","increaseFollowCount","decreaseFollowCount","req","res","getUserByEmail","firebaseUser","existedEmail","status","json","Boolean","logger","error","end","message","phoneNo","getUserByPhoneNumber","mongoUser","phoneNoExist"],"mappings":"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","sourcesContent":["import { UserInputError, EntityNotFoundError, validateQuery, ensurePermission, validatePayload, validateOperation, logger } from '@app/core';\nimport { PERMISSIONS, UsersService, addFullName } from '@app/auth';\nimport * as yup from 'yup';\nimport admin from 'firebase-admin';\nimport { Request, Response } from 'express';\nimport { userRepository } from './users.repository';\nimport { config } from '@client/config';\n\nconst usersService: UsersService = {\n  setup: (app, path) => {\n    app.get(path + '/customs/check-email-exist/:email', usersService.checkEmailExist);\n    app.get(path + '/customs/check-phone-number-exist/:phoneNo', usersService.checkPhoneNoExist);\n  },\n  find: async ({ query, repository, authUser }) => {\n    // 1. authorize\n    ensurePermission(authUser, PERMISSIONS.USERS.VIEW);\n\n    // 2. validate\n    validateQuery(query);\n\n    // 3. do business logic\n\n    // 4. persist to db\n    return await repository.find(query);\n  },\n  get: async (id, params) => {\n    // 1. authorize\n    ensurePermission(params.authUser, PERMISSIONS.USERS.VIEW);\n\n    // 2. validate\n    if (!id) {\n      throw new UserInputError('Invalid id');\n    }\n\n    // 3. do business logic\n\n    // 4. persist to db\n    return await params.repository.findById(id);\n  },\n  create: async (data, params) => {\n    // 1. authorize\n    ensurePermission(params.authUser, PERMISSIONS.USERS.CREATE);\n\n    // 2. validate\n    await validatePayload({\n      email: yup.string().required('Email is required').email('Invalid email'),\n      password: yup.string().required('Password is required').matches(config.regex.password, 'Password must be minimum 6 characters, at least 1 upper letter, 1 number and 1 special character'),\n      roles: yup.array(),\n      familyName: yup.string().required('Family name is required').min(2, 'Too short').max(50, 'Too long'),\n      givenName: yup.string().required('Given name is required').min(2, 'Too short').max(50, 'Too long'),\n    }, data);\n    const existedUser = await params.repository.findOne({email: data.email});\n    if (existedUser) {\n      throw new UserInputError('Email already exist');\n    }\n\n    // 3. do business logic\n    const newUser = await admin.auth().createUser({\n      email: data.email,\n      password: data.password,\n    });\n\n    admin.auth().updateUser(newUser.uid, {\n      displayName: addFullName({ familyName: data.familyName!, givenName: data.givenName!, type: 'givenNameFirst' }),\n      emailVerified: true,\n    });\n\n    const roles = await params.roleRepository.findByIds(data.roles);\n    let permissions: string[] = [];\n    await admin.auth().setCustomUserClaims(newUser.uid, {\n      roles: data.roles,\n      permissions: roles.map((item) => permissions = [...permissions, ...item.permissions]),\n      avatarUrl: '',\n      province: '',\n    });\n\n    // 4. persist to db\n    const id = await params.repository.create({\n      id: newUser.uid,\n      ...data,\n      ...params.creationInfo,\n      loginDetail: {\n        email: data.email,\n        provider: 'email',\n      },\n      fullName: addFullName({ familyName: data.familyName!, givenName: data.givenName!, type: 'givenNameFirst' }),\n    });\n\n    return {\n      id,\n    };\n  },\n  patch: async (id, data, params) => {\n    validateOperation(data.operation, ['updateDetail', 'activate', 'deactivate']);\n    await usersService[data.operation](id, data.payload, params);\n    return {};\n  },\n  updateDetail: async (id, data, params) => {\n    // 1. authorize\n    ensurePermission(params.authUser, PERMISSIONS.USERS.EDIT);\n\n    // 2. validate\n    if (!id) {\n      throw new UserInputError('Invalid query params');\n    }\n    const existedUser = await params.repository.findById(id);\n    if (!existedUser) {\n      throw new EntityNotFoundError('User');\n    }\n    const validationSchema = yup.object().shape({\n      email: yup.string().email('Invalid email'),\n      familyName: yup.string().min(2, 'Too short').max(50, 'Too long'),\n      givenName: yup.string().min(2, 'Too short').max(50, 'Too long'),\n      roles: yup.array(),\n    });\n    await validationSchema.validate(data);\n    if (data.email) {\n      const emailExist = await params.repository.findOne({email: data.email});\n      if (emailExist && emailExist.id !== id) {\n        throw new UserInputError('Email already exist');\n      }\n      await admin.auth().updateUser(existedUser._id, {\n        email: data.email,\n      });\n    }\n\n    // 3. do business logic\n    if (data.roles && data.roles.length > 0) {\n      const [roles, userInfo] = await Promise.all([\n        params.roleRepository.findByIds(data.roles),\n        admin.auth().getUser(existedUser._id),\n      ]);\n      let permissions: string[] = [];\n      roles.map((item) => permissions = [...permissions, ...item.permissions]);\n      const customClaims = {\n        ...userInfo.customClaims,\n        roles: data.roles,\n        permissions,\n      };\n      await admin.auth().setCustomUserClaims(existedUser._id, customClaims);\n    }\n\n    if (data.familyName || data.givenName) {\n      await admin.auth().updateUser(existedUser._id, {\n        displayName: addFullName({ familyName: data.familyName! || existedUser.familyName!, givenName: data.givenName! || existedUser.givenName!, type: 'givenNameFirst' }),\n      });\n    }\n\n    // 4. persist to db\n    await params.repository.update({\n      id,\n      ...data,\n      ...params.modificationInfo,\n      fullName: addFullName({ familyName: data.familyName! || existedUser.familyName!, givenName: data.givenName! || existedUser.givenName!, type: 'givenNameFirst' }),\n    });\n    return {};\n  },\n  activate: async (id, _data, params) => {\n    // 1. authorize\n    ensurePermission(params.authUser, PERMISSIONS.USERS.EDIT);\n\n    // 2. validate\n    if (!id) {\n      throw new UserInputError('Invalid query params');\n    }\n    const existedUser = await params.repository.findById(id);\n    if (!existedUser) {\n      throw new EntityNotFoundError('User');\n    }\n\n    // 3. do business logic\n    await admin.auth().updateUser(existedUser._id, {\n      disabled: false,\n    });\n\n    // 4. persist to db\n    await params.repository.update({\n      id,\n      isActive: true,\n      ...params.modificationInfo,\n    });\n\n    return {};\n  },\n  deactivate: async (id, _data, params) => {\n    // 1. authorize\n    ensurePermission(params.authUser, PERMISSIONS.USERS.EDIT);\n\n    // 2. validate\n    if (!id) {\n      throw new UserInputError('Invalid query params');\n    }\n    const existedUser = await params.repository.findById(id);\n    if (!existedUser) {\n      throw new EntityNotFoundError('User');\n    }\n\n    // 3. do business logic\n    await admin.auth().updateUser(existedUser._id, {\n      disabled: true,\n    });\n\n    // 4. persist to db\n    await params.repository.update({\n      id,\n      isActive: false,\n      ...params.modificationInfo,\n    });\n\n    return {};\n  },\n  updateFollowCount: async (userId, type) => {\n    // 1. authorize\n\n    // 2. validate\n    if (!userId || !type) {\n      throw new UserInputError('Invalid query params');\n    }\n    const existedNews = await userRepository.findById(userId);\n    if (!existedNews) {\n      throw new EntityNotFoundError('User');\n    }\n\n    // 3. do business logic\n\n    // 4. persist to db\n    type === 'follow' ? await userRepository.increaseFollowCount(userId) : await userRepository.decreaseFollowCount(userId);\n  },\n  checkEmailExist: async (req: Request, res: Response) => {\n    try {\n      const { email } = req.params;\n      let firebaseUser: any;\n      try {\n        firebaseUser = await admin.auth().getUserByEmail(email);\n      } catch (error) {\n        firebaseUser = null;\n      }\n      const existedEmail = await userRepository.findOne({email});\n      res.status(200).json({\n        emailExist: Boolean(existedEmail || firebaseUser),\n      });\n    } catch (error) {\n      logger.error(error);\n      res.status(error.status || 500).end(error.message || 'Internal server error');\n    }\n  },\n  checkPhoneNoExist: async (req: Request, res: Response) => {\n    try {\n      const { phoneNo } = req.params;\n      let firebaseUser: any;\n      try {\n        firebaseUser = await admin.auth().getUserByPhoneNumber(phoneNo);\n      } catch (error) {\n        firebaseUser = null;\n      }\n      const mongoUser = await userRepository.findOne({phoneNo});\n      res.status(200).json({\n        phoneNoExist: Boolean(firebaseUser || mongoUser),\n      });\n    } catch (error) {\n      logger.error(error);\n      res.status(error.status || 500).end(error.message || 'Internal server error');\n    }\n  },\n};\n\nexport default usersService;\n"],"file":"users.service.js"}