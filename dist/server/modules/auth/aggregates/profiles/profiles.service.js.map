{"version":3,"sources":["../../../../../../src/server/modules/auth/aggregates/profiles/profiles.service.ts"],"names":["profileService","find","params","authUser","id","NotAuthenticatedError","repository","findById","get","UserInputError","patch","data","operation","payload","updateDetail","existedUser","EntityNotFoundError","validationSchema","yup","object","shape","familyName","string","min","max","givenName","phoneNo","matches","config","regex","phone","email","address","description","validate","admin","auth","updateUser","_id","displayName","type","province","getUser","user","currentCustomClaims","customClaims","setCustomUserClaims","update","modificationInfo","fullName","updateAvatar","avatarUrl","changePassword","newPassword","password"],"mappings":"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","sourcesContent":["import { UserInputError, EntityNotFoundError, ensureOwner, NotAuthenticatedError, validateOperation } from '@app/core';\nimport { ProfilesService, addFullName } from '@app/auth';\nimport * as yup from 'yup';\nimport admin from 'firebase-admin';\nimport { config } from '@app/config';\n\nconst profileService: ProfilesService = {\n  find: async (params) => {\n    if (!params.authUser || !params.authUser.id) {\n      throw new NotAuthenticatedError();\n    } else {\n      return await params.repository.findById(params.authUser!.id) as any;\n    }\n  },\n  get: async (id, params) => {\n    // 1. authorize\n    // API to get User public info (For guess view) => No need authorized\n\n    // 2. validate\n    if (!id) {\n      throw new UserInputError('Invalid query params');\n    }\n\n    // 3. do business logic\n\n    // 4. persist to db\n    return await params.repository.findById(id);\n  },\n  patch: async (id, data, params) => {\n    validateOperation(data.operation, ['updateDetail', 'updateAvatar', 'changePassword']);\n    await profileService[data.operation](id, data.payload, params);\n    return {};\n  },\n  updateDetail: async (id, data, params): Promise<{}> => {\n    // 1. authorize\n    ensureOwner(params.authUser, id);\n\n    // 2. validate\n    if (!id) {\n      throw new UserInputError('Invalid query params');\n    }\n    const existedUser = await params.repository.findById(id);\n    if (!existedUser) {\n      throw new EntityNotFoundError('User');\n    }\n    const validationSchema = yup.object().shape({\n      familyName: yup.string().min(2, 'Too short').max(50, 'Too long'),\n      givenName: yup.string().min(2, 'Too short').max(50, 'Too long'),\n      phoneNo: yup.string().matches(config.regex.phone, 'Invalid phone number'),\n      email: yup.string().email('Invalid email address'),\n      address: yup.string().min(20, 'Too short').max(500, 'Too long'),\n      description: yup.string().min(20, 'Too short').max(1000, 'Too long'),\n    });\n    await validationSchema.validate(data);\n\n    // 3. do business logic\n    if (data.familyName || data.givenName) {\n      await admin.auth().updateUser(existedUser._id, {\n        displayName: addFullName({ familyName: data.familyName! || existedUser.familyName!, givenName: data.givenName! || existedUser.givenName!, type: 'givenNameFirst' }),\n      });\n    }\n    if (data.province) {\n      const user = await admin.auth().getUser(existedUser._id);\n      const currentCustomClaims = user.customClaims || {};\n      currentCustomClaims['province'] = data.province;\n      await admin.auth().setCustomUserClaims(existedUser._id, currentCustomClaims);\n    }\n\n    // 4. persist to db\n    await params.repository.update({\n      id,\n      ...data,\n      ...params.modificationInfo,\n      fullName: addFullName({ familyName: data.familyName! || existedUser.familyName!, givenName: data.givenName! || existedUser.givenName!, type: 'givenNameFirst' }),\n    });\n    return {};\n  },\n  updateAvatar: async (id, data, params): Promise<{}> => {\n    // 1. authorize\n    ensureOwner(params.authUser, id);\n\n    // 2. validate\n    if (!id) {\n      throw new UserInputError('Invalid query params');\n    }\n    const existedUser = await params.repository.findById(id);\n    if (!existedUser) {\n      throw new EntityNotFoundError('User');\n    }\n\n    // 3. do business logic\n    const user = await admin.auth().getUser(existedUser._id);\n    const currentCustomClaims = user.customClaims || {};\n    currentCustomClaims['avatarUrl'] = data.avatarUrl;\n    await admin.auth().setCustomUserClaims(existedUser._id, currentCustomClaims);\n\n    // 4. persist to db\n    await params.repository.update({\n      id,\n      avatarUrl: data.avatarUrl,\n      ...params.modificationInfo,\n    });\n\n    return {};\n  },\n  changePassword: async (id, data, params): Promise<{}> => {\n    // 1. authorize\n    ensureOwner(params.authUser, id);\n\n    // 2. validate\n    if (!id) {\n      throw new UserInputError('Invalid query params');\n    }\n    const existedUser = await params.repository.findById(id);\n    if (!existedUser) {\n      throw new EntityNotFoundError('User');\n    }\n    const validationSchema = yup.object().shape({\n      newPassword: yup.string().matches(config.regex.password, 'Password must be minimum 6 characters, at least 1 upper letter, 1 number and 1 special character'),\n    });\n    await validationSchema.validate(data);\n\n    // 3. do business logic\n    await admin.auth().updateUser(existedUser._id, {\n      password: data.newPassword,\n    });\n\n    // 4. persist to db\n    return {};\n  },\n};\n\nexport default profileService;\n"],"file":"profiles.service.js"}