{"version":3,"sources":["../../../../../../../src/server/modules/website/aggregates/image/multer/shopImage.middleware.ts"],"names":["imageFilter","_req","file","cb","originalname","match","config","upload","allowImageExt","Error","storage","multer","diskStorage","destination","_file","fileFolder","path","join","__dirname","fsAccessPromise","util","promisify","fs","access","fsMkdirPromise","mkdir","filename","hash","uuid","v4","lastDot","lastIndexOf","fileType","slice","trim","shopImageMiddleware","fileFilter"],"mappings":";;;;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;AACA;;;;;;;;;;AAEA,IAAMA,WAAW,GAAG,SAAdA,WAAc,CAACC,IAAD,EAAYC,IAAZ,EAAuBC,EAAvB,EAAmC;AACrD,MAAI,CAACD,IAAI,CAACE,YAAL,CAAkBC,KAAlB,CAAwBC,eAAOC,MAAP,CAAcC,aAAtC,CAAL,EAA2D;AACzD,WAAOL,EAAE,CAAC,IAAIM,KAAJ,CAAU,8BAAV,CAAD,EAA4C,KAA5C,CAAT;AACD;;AACDN,EAAAA,EAAE,CAAC,IAAD,EAAO,IAAP,CAAF;AACD,CALD;;AAOA,IAAMO,OAAO,GAAGC,gBAAOC,WAAP,CAAmB;AACjCC,EAAAA,WAAW;AAAA;AAAA;AAAA,8BAAE,iBAAOZ,IAAP,EAAkBa,KAAlB,EAA8BX,EAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AACLY,cAAAA,UADK,GACQC,IAAI,CAACC,IAAL,CAAUC,SAAV,gCADR;AAELC,cAAAA,eAFK,GAEaC,IAAI,CAACC,SAAL,CAAeC,EAAE,CAACC,MAAlB,CAFb;AAAA;AAAA;AAAA,qBAIHJ,eAAe,CAACJ,UAAD,CAJZ;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAMHS,cAAAA,cANG,GAMcJ,IAAI,CAACC,SAAL,CAAeC,EAAE,CAACG,KAAlB,CANd;AAAA;AAAA,qBAOHD,cAAc,CAACT,UAAD,CAPX;;AAAA;AASXZ,cAAAA,EAAE,CAAC,IAAD,EAAOa,IAAI,CAACC,IAAL,CAAUC,SAAV,gCAAP,CAAF;;AATW;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAF;;AAAA;AAAA;AAAA;;AAAA;AAAA,KADsB;AAYjCQ,EAAAA,QAAQ;AAAA;AAAA;AAAA,8BAAE,kBAAOzB,IAAP,EAAkBC,IAAlB,EAA6BC,EAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AACFwB,cAAAA,IADE,GACKC,IAAI,CAACC,EAAL,EADL;AAEFC,cAAAA,OAFE,GAEQ5B,IAAI,CAACE,YAAL,CAAkB2B,WAAlB,CAA8B,GAA9B,CAFR;AAGFC,cAAAA,QAHE,GAGS9B,IAAI,CAACE,YAAL,CAAkB6B,KAAlB,CAAwBH,OAAO,GAAG,CAAlC,EAAqCI,IAArC,EAHT;AAIR/B,cAAAA,EAAE,CAAC,IAAD,YAAUwB,IAAV,cAAkBK,QAAlB,EAAF;;AAJQ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAF;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAZyB,CAAnB,CAAhB;;AAoBO,IAAMG,mBAAmB,GAAG,qBAAO;AACxCzB,EAAAA,OAAO,EAAPA,OADwC;AAExC0B,EAAAA,UAAU,EAAEpC;AAF4B,CAAP,CAA5B","sourcesContent":["import multer from 'multer';\nimport * as path from 'path';\nimport * as fs from 'fs';\nimport * as util from 'util';\nimport * as uuid from 'uuid';\nimport { config } from '@app/config';\n\nconst imageFilter = (_req: any, file: any, cb: any) => {\n  if (!file.originalname.match(config.upload.allowImageExt)) {\n    return cb(new Error('Only image files are allowed'), false);\n  }\n  cb(null, true);\n};\n\nconst storage = multer.diskStorage({\n  destination: async (_req: any, _file: any, cb: any) => {\n    const fileFolder = path.join(__dirname, `../../../../../../../upload`);\n    const fsAccessPromise = util.promisify(fs.access);\n    try {\n      await fsAccessPromise(fileFolder);\n    } catch (error) {\n      const fsMkdirPromise = util.promisify(fs.mkdir);\n      await fsMkdirPromise(fileFolder);\n    }\n    cb(null, path.join(__dirname, `../../../../../../../upload`));\n  },\n  filename: async (_req: any, file: any, cb: any) => {\n    const hash = uuid.v4();\n    const lastDot = file.originalname.lastIndexOf('.');\n    const fileType = file.originalname.slice(lastDot + 1).trim();\n    cb(null, `${hash}.${fileType}`);\n  },\n});\n\nexport const shopImageMiddleware = multer({\n  storage,\n  fileFilter: imageFilter,\n});\n"],"file":"shopImage.middleware.js"}