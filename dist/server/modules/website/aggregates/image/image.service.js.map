{"version":3,"sources":["../../../../../../src/server/modules/website/aggregates/image/image.service.ts"],"names":["imageService","find","_params","imageRepository","get","_id","findById","create","data","patch","update","deleteByUrls","urls","length","moveFilesToUploadFolder","url","path","process","cwd","lastDot","lastIndexOf","fileHash","slice","trim","smallPromise","Promise","resolve","_reject","move","err","message","logger","error","largePromise","reject","console","log","all","oldPath","newPath","callback","fs","rename","code","copy","readStream","createReadStream","writeStream","createWriteStream","on","unlink","pipe"],"mappings":"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","sourcesContent":["import { imageRepository } from '@app/website';\nimport * as fs from 'fs';\nimport { logger } from '@app/core';\n\nexport const imageService: any = {\n  find: async (_params: any) => {\n    // 1. authorize\n\n    // 2. validate\n\n    // 3. do business logic\n\n    // 4. persist to db\n    return await imageRepository.find();\n  },\n  get: async (_id: string, _params: any) => {\n    // 1. authorize\n\n    // 2. validate\n\n    // 3. do business logic\n\n    // 4. persist to db\n    return await imageRepository.findById(_id);\n  },\n  create: async (data: Partial<any>, _params: any) => {\n    // 1. authorize\n\n    // 2. validate\n\n    // 3. do business logic\n\n    // 4. persist to db\n    return await imageRepository.create(data);\n  },\n  patch: async (_id: string, data: any, _params: any): Promise<void> => {\n    // 1. authorize\n\n    // 2. validate\n\n    // 3. do business logic\n\n    // 4. persist to db\n    await imageRepository.update(data);\n  },\n  deleteByUrls : async (urls: any): Promise<void> => {\n    if (urls && urls.length) {\n      return await imageRepository.deleteByUrls(urls);\n    }\n  },\n  moveFilesToUploadFolder : async (url: any): Promise<void> => {\n    const path = process.cwd();\n    const lastDot = url.lastIndexOf('.');\n    const fileHash = url.slice(0, lastDot).trim();\n    // const mainPromise = new Promise((resolve, _reject) => {\n    //   move(`${path}/temp/${url}`, `${path}/upload/${url}` , (err?: any) => {\n    //     if (err) {\n    //       _reject(err.message);\n    //       logger.error(err);\n    //     }\n    //     resolve();\n    //   });\n    // });\n    const smallPromise = new Promise((resolve, _reject) => {\n      move(`${path}/temp/${fileHash}-small.jpg`, `${path}/upload/${fileHash}-small.jpg` , (err?: any) => {\n        if (err) {\n          _reject(err.message);\n          logger.error(err);\n        }\n        resolve();\n      });\n    });\n\n    const largePromise = new Promise((resolve, reject) => {\n      move(`${path}/temp/${fileHash}-large.jpg`, `${path}/upload/${fileHash}-large.jpg` , (err?: any) => {\n        if (err) {\n          reject(err.message);\n          // tslint:disable-next-line\n          console.log('err', err);\n        }\n        resolve();\n      });\n    });\n\n    return await Promise.all([smallPromise, largePromise]) as any;\n  },\n};\n\nconst move = (oldPath: any, newPath: any, callback: any) => {\n  fs.rename(oldPath, newPath, (err: any) => {\n    if (err) {\n      logger.error(err);\n      if (err.code === 'EXDEV') {\n        copy();\n      } else callback();\n    }\n    callback();\n  });\n\n  const copy = () => {\n    const readStream = fs.createReadStream(oldPath);\n    const writeStream = fs.createWriteStream(newPath);\n\n    readStream.on('error', callback);\n    writeStream.on('error', callback);\n\n    readStream.on('close', () => {\n        fs.unlink(oldPath, callback);\n    });\n\n    readStream.pipe(writeStream);\n  };\n};\n"],"file":"image.service.js"}