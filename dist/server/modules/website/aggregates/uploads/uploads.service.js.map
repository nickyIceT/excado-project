{"version":3,"sources":["../../../../../../src/server/modules/website/aggregates/uploads/uploads.service.ts"],"names":["uploadService","createNewsFromExcelRow","row","index","newsType","newsStates","value","label","phoneNo","trim","firstName","newsState","filter","state","ProvinceModel","findOne","slug","exec","location","usedHours","price","serialNo","CategoryModel","category","BrandModel","brand","ModelModel","populate","model","description","year","rentalPeriod","split","weightRange","imageUrls","UserInputError","UsersModel","existedUser","admin","auth","createUser","phoneNumber","password","email","replace","displayName","emailVerified","newUser","create","id","uid","familyName","givenName","fullName","loginDetail","provider","roles","isActive","completeSignUp","createdBy","createdAt","Date","getTime","indexOf","_id","isNaN","length","title","name","toUpperCase","news","NewsModel","undefined","owner","status","categoryId","save","execPopulate","uploadExcelFile","file","authorizationHeader","idToken","verifyIdToken","decodedIdToken","newsTypes","workbook","filename","createNewsPromises","i","SheetNames","wordSheet","Sheets","sheetData","utils","sheet_to_json","header","j","push","Promise","all","data","NotAuthorizedError"],"mappings":"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","sourcesContent":["import { UploadService } from './interfaces/UploadService';\nimport { ProvinceModel, CategoryModel, BrandModel, ModelModel, NewsModel } from '@app/machine-news';\nimport { UserInputError, NotAuthorizedError } from '@app/core';\nimport { UsersModel } from '@app/auth';\nimport admin from 'firebase-admin';\nimport slugify from 'slugify';\nimport { convertVietnamese } from '@client/core';\nimport { readFile, utils } from 'xlsx';\nimport replace from 'lodash/replace';\n\nexport const uploadService: UploadService = {\n  createNewsFromExcelRow: async (row, index, newsType) => {\n    const newsStates = [\n      { value: 'NEW', label: 'Má»›i' },\n      { value: 'USED', label: 'Nháº­p bÃ£i' },\n      { value: 'LIQUIDATE', label: 'Thanh lÃ½' },\n    ];\n\n    const phoneNo = `+${row['A']}`.trim();\n    const firstName = row['B'].trim();\n    const newsState = newsStates.filter((state) => state.label === row['C'])[0] ? newsStates.filter((state) => state.label === row['C'])[0].value : '';\n    const location = row['D'] ? await ProvinceModel.findOne({slug: slugify(convertVietnamese(row['D'].trim()))}).exec() : '';\n    const usedHours = row['E'];\n    const price = row['F'];\n    const serialNo = row['G'];\n    const category: any = await CategoryModel.findOne({slug: slugify(convertVietnamese(row['H'].trim()))}).exec();\n    const brand: any = row['I'] ? await BrandModel.findOne({slug: slugify(convertVietnamese(row['I'].trim()))}).exec() : '';\n    const model: any = row['J'] ? await ModelModel.findOne({slug: row['J'].trim()})\n      .populate('brand')\n      .populate('category')\n      .exec() : '';\n    const description = row['K'];\n    const year = row['L'];\n    const rentalPeriod = row['M'].split('/')[1];\n    const weightRange = row['N'].split('/')[1];\n    const imageUrls = row['O'] ? row['O'].split('\\n') : [];\n\n    // validate\n    if (!phoneNo || !firstName) {\n      throw new UserInputError(`Invalid user info at row ${index}`);\n    }\n    let existedUser = await UsersModel.findOne({phoneNo}).exec();\n    if (!existedUser) {\n      // create firebase user\n      const newUser = await admin.auth().createUser({\n        phoneNumber: phoneNo,\n        password: 'Timmay@123',\n        email: `${phoneNo.replace('+', '')}@timmay.vn`,\n        displayName: firstName,\n        emailVerified: true,\n      });\n\n      // create mongo user\n      existedUser = await UsersModel.create({\n        id: newUser.uid,\n        email: newUser.email,\n        phoneNo,\n        familyName: firstName,\n        givenName: '',\n        fullName: firstName,\n        loginDetail: {\n          phoneNo: newUser.phoneNumber,\n          provider: 'phone',\n        },\n        roles: [],\n        isActive: true,\n        completeSignUp: false,\n        createdBy: newUser.uid,\n        createdAt: new Date().getTime(),\n      });\n    }\n\n    if (['SELL', 'LEASE'].indexOf(newsType) > -1 && !newsState) {\n      throw new UserInputError(`Invalid news state at row ${index}`);\n    }\n\n    if (row['D'] && (!location || !location._id)) {\n      throw new UserInputError(`Invalid location at row ${index}`);\n    }\n\n    if (usedHours && isNaN(usedHours)) {\n      throw new UserInputError(`Invalid used hours at row ${index}`);\n    }\n\n    if (price && isNaN(price)) {\n      throw new UserInputError(`Invalid price at row ${index}`);\n    }\n\n    if (!category || !category._id) {\n      throw new UserInputError(`Invalid category at row ${index}`);\n    }\n\n    if (['SELL', 'LEASE'].indexOf(newsType) > -1 && (!brand || !brand._id)) {\n      throw new UserInputError(`Invalid brand at row ${index}`);\n    }\n\n    if (['SELL', 'LEASE'].indexOf(newsType) > -1 && (!model || !model._id)) {\n      throw new UserInputError(`Invalid model at row ${index}`);\n    }\n\n    if (newsType === 'RENT' && (!rentalPeriod)) {\n      throw new UserInputError(`Invalid rental period at row ${index}`);\n    }\n\n    if (!weightRange) {\n      throw new UserInputError(`Invalid weight range at row ${index}`);\n    }\n\n    if (['SELL', 'LEASE'].indexOf(newsType) > -1 && imageUrls.length === 0) {\n      throw new UserInputError(`Missing images at row ${index}`);\n    }\n\n    let title = '';\n    switch (newsType) {\n      case 'SELL':\n        title = `${year ? year : ''} ${model.brand.name.toUpperCase()} ${model.name} ${serialNo}`;\n        break;\n      case 'LEASE':\n        title = `${year ? year : ''} ${model.brand.name.toUpperCase()} ${model.name} ${serialNo}`;\n        break;\n      case 'BUY':\n        title = `TÃ¬m mua ${category.name}`;\n        break;\n      case 'RENT':\n        title = `TÃ¬m thuÃª ${category.name}`;\n        break;\n      default:\n        break;\n    }\n\n    // create news\n    const news = new NewsModel({\n      title,\n      state: newsState,\n      newsType,\n      location: location ? location._id : undefined,\n      owner: existedUser._id,\n      status: 'PUBLIC',\n      description,\n      usedHours,\n      price,\n      serialNo,\n      categoryId: model && model.category ? model.category._id : category ? category._id : undefined,\n      brand: model && model.brand ? model.brand._id : brand ? brand._id : undefined,\n      model: model ? model._id : undefined,\n      year,\n      weightRange,\n      rentalPeriod,\n      createdAt: new Date().getTime(),\n      imageUrls,\n    });\n    await news.save();\n    await news.populate('categoryId').populate('weightRange').execPopulate();\n    return news;\n  },\n  uploadExcelFile: async (file: any, authorizationHeader: string) => {\n    const idToken = replace(authorizationHeader, 'Bearer ', '');\n    const decodedIdToken = await admin.auth().verifyIdToken(idToken);\n    if (decodedIdToken.roles.indexOf('5c7f747708898183ac62f2af') > -1) {\n      const newsTypes = ['SELL', 'LEASE', 'BUY', 'RENT'];\n      const workbook = readFile(`upload/${file.filename}`);\n      const createNewsPromises = [];\n\n      for (let i = 2; i < workbook.SheetNames.length; i += 1) {\n        const newsType = newsTypes[i - 2];\n        const wordSheet = workbook.Sheets[workbook.SheetNames[i]];\n        const sheetData = utils.sheet_to_json(wordSheet, {header: 'A'});\n\n        for (let j = 2; j < sheetData.length; j += 1) {\n          createNewsPromises.push(uploadService.createNewsFromExcelRow(sheetData[j], j, newsType));\n        }\n      }\n\n      const data = await Promise.all(createNewsPromises);\n      return {\n        data,\n      };\n    } else {\n      throw new NotAuthorizedError();\n    }\n  },\n};\n"],"file":"uploads.service.js"}