{"version":3,"sources":["../../src/server/bootstrap-server.ts"],"names":["bootstrapServer","server","logger","info","configure","express","rest","use","json","urlencoded","extended","origin","config","web","cors","whitelistUrls","credentials","hooks","applicationHook","req","_res","next","feathers","cookies","authorization","headers","token","swaggerDocument","YAML","load","rootLocation","moduleNames","module","moduleSwaggerDocument","error","api","docsJson","_req","res","status","docsUrl","swaggerUi","serve","setup","static","path","join","__dirname","admin","initializeApp","credential","cert","projectId","firebase","serviceAccount","clientEmail","privateKey","databaseURL"],"mappings":"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","sourcesContent":["import express, { Application } from '@feathersjs/express';\nimport cookieParser from 'cookie-parser';\nimport cors from 'cors';\nimport path from 'path';\nimport compress from 'compression';\nimport helmet from 'helmet';\nimport { logger, rootLocation } from './core';\nimport { bootstrapModules } from './bootstrap-modules';\nimport admin from 'firebase-admin';\nimport swaggerUi from 'swagger-ui-express';\nimport YAML from 'yamljs';\nimport applicationHook from './application.hooks';\nimport { config } from '@app/config';\nimport { readdir } from 'fs-extra';\nimport { merge } from 'lodash';\n\nexport const bootstrapServer = async ({ server }: { server: Application<any> }) => {\n  logger.info(`[Server] Bootstrapping...`);\n  server\n    .configure(express.rest())\n    .use(helmet())\n    .use(compress())\n    .use(express.json())\n    .use(express.urlencoded({ extended: true }))\n    .use(cookieParser())\n    .use(cors({\n      // origin(origin, callback) {\n      //   if (config.web.cors.whitelistUrls.indexOf(origin) !== -1 || !origin) {\n      //     callback(null, true);\n      //   } else {\n      //     callback(new Error('Not allowed by CORS'));\n      //   }\n      // },\n      origin: config.web.cors.whitelistUrls,\n      credentials: true,\n    }));\n\n  // global hooks\n  server.hooks(applicationHook);\n\n  // add authorization to feathers\n  server.use((req, _res, next) => {\n    (req as any).feathers.cookies = req.cookies;\n    (req as any).feathers.authorization = req.headers.authorization || req.cookies.token;\n    next();\n  });\n\n  // add swagger documents\n  let swaggerDocument = YAML.load(`${rootLocation}/server/swagger.yaml`);\n  const moduleNames = await readdir(`${rootLocation}/server/modules`);\n  for (const module of moduleNames) {\n    try {\n      const moduleSwaggerDocument = YAML.load(`${rootLocation}/server/modules/${module}/${module}.swagger.yaml`);\n      swaggerDocument = merge(swaggerDocument, moduleSwaggerDocument);\n    } catch (error) {\n      // ignore missing modules\n    }\n  }\n  server.use(config.web.api.docsJson, async (_req, res) => {\n    res.status(200).json(swaggerDocument);\n  });\n  server.use(config.web.api.docsUrl, swaggerUi.serve, swaggerUi.setup(swaggerDocument));\n\n  // bootstrap modules\n  await bootstrapModules({ server });\n\n  server.use('/upload', express.static(path.join(__dirname, '../../upload')));\n\n  // init firebase-admin\n  logger.info(`[Server] Initialize firebase.....`);\n  admin.initializeApp({\n    credential: admin.credential.cert({\n      projectId: config.firebase.serviceAccount['project_id'],\n      clientEmail: config.firebase.serviceAccount['client_email'],\n      privateKey: config.firebase.serviceAccount['private_key'],\n    }),\n    databaseURL: config.firebase.databaseURL,\n  });\n};\n"],"file":"bootstrap-server.js"}