{"version":3,"sources":["../../src/server/bootstrap-modules.ts"],"names":["bootstrapModules","server","logger","info","rootDir","rootLocation","moduleNames","excludedModules","excludedAggregates","moduleName","indexOf","moduleDir","aggregateNames","aggregateName","serviceUrl","service","require","default","setup","use","hook","config","web","api","prefix","hooks","error","productImageMiddleware","single","imageRouter","uploadsRouter","downloadsRouter"],"mappings":"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","sourcesContent":["import { readdir } from 'fs-extra';\nimport { Application } from '@feathersjs/express';\nimport { logger, rootLocation } from '@app/core';\nimport { config } from '@app/config';\nimport { imageRouter } from '@app/website';\nimport { productImageMiddleware } from './modules/website/aggregates/image/multer/productImage.middleware';\nimport { uploadsRouter } from './modules/website/aggregates/uploads/uploads.router';\nimport { downloadsRouter } from './modules/website/aggregates/download/download.router';\n\nexport const bootstrapModules = async ({ server }: { server: Application<any> }) => {\n  logger.info('[Server] Loading modules...');\n  const rootDir = `${rootLocation}/server/modules`;\n  const moduleNames = await readdir(rootDir);\n  const excludedModules: string[] = ['.DS_Store'];\n  const excludedAggregates: string[] = ['helpers', '.DS_Store'];\n  for (const moduleName of moduleNames) {\n    if (excludedModules.indexOf(moduleName) !== -1) {\n      continue;\n    }\n    const moduleDir = `${rootDir}/${moduleName}`;\n    logger.info(`[Server] Loading module '${moduleName}'...`);\n\n    // add aggregates graphql\n    logger.info(`[Server] [${moduleName}] Setup aggregates...`);\n    const aggregateNames = await readdir(`${moduleDir}/aggregates`);\n\n    for (const aggregateName of aggregateNames) {\n      if (excludedAggregates.indexOf(aggregateName) !== -1 || aggregateName.indexOf('index') === 0) {\n        continue;\n      }\n      logger.info(`[Server] [${moduleName}] Setup aggregate '${aggregateName}'...`);\n      const serviceUrl = `./modules/${moduleName}/aggregates/${aggregateName}/${aggregateName}.service`;\n      const service: any = require(serviceUrl).default;\n      if (service) {\n        logger.info(`[Server] [${moduleName}][${aggregateName}] Register service api...`);\n        if (service.setup) {\n          service.setup(server, `/api/${aggregateName}`);\n        }\n        server.use(`/api/${aggregateName}`, service);\n        try {\n          const hook = require(`./modules/${moduleName}/aggregates/${aggregateName}/${aggregateName}.hook`).default;\n          server.service(`${config.web.api.prefix}/${aggregateName}`).hooks(hook);\n        } catch (error) {\n          // ignore hook not found\n        }\n      }\n    }\n  }\n\n  // Upload images\n  server.use('/api/image', productImageMiddleware.single('image'));\n  server.use('/api/upload-image', imageRouter);\n  server.use('/api/uploads', uploadsRouter);\n  server.use('/api/downloads', downloadsRouter);\n  logger.info('[Server] Done loading modules...');\n};\n"],"file":"bootstrap-modules.js"}