{"version":3,"sources":["../../../../src/server/core/helpers/buildCursorPaging.ts"],"names":["execCursorPaging","model","filters","sortBy","pageSize","populates","before","after","sortField","split","sortOrder","sortFieldValue","secondSortValue","push","$or","$lt","$gt","$and","_id","query","find","length","sort","limit","item","populate","exec","data","slice","reverse","undefined"],"mappings":"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","sourcesContent":["import { decodeBase64 } from './decodeBase64';\nimport { encodeBase64 } from './encodeBase64';\n\nexport const execCursorPaging = async (model: any, filters: any[], sortBy: string, pageSize: number, populates: string[], before?: string, after?: string) => {\n  const sortField = sortBy.split('|')[0];\n  const sortOrder = sortBy.split('|')[1] === 'asc' ? 1 : -1;\n\n  if (before) {\n    const {sortFieldValue, secondSortValue} = decodeBase64(before);\n    filters.push({$or: [\n      {[sortField]: sortOrder === 1 ? {$lt: sortFieldValue} : {$gt: sortFieldValue}},\n      {$and: [\n        {[sortField]: sortFieldValue},\n        {_id: sortOrder === 1 ? {$lt: secondSortValue} : {$gt: secondSortValue}},\n      ]},\n    ]});\n  } else if (after) {\n    const {sortFieldValue, secondSortValue} = decodeBase64(after);\n    filters.push({$or: [\n      {[sortField]: sortOrder === 1 ? {$gt: sortFieldValue} : {$lt: sortFieldValue}},\n      {$and: [\n        {[sortField]: sortFieldValue},\n        {_id: sortOrder === 1 ? {$gt: secondSortValue} : {$lt: secondSortValue}},\n      ]},\n    ]});\n  }\n\n  if (before) {\n    let query = model.find(filters.length > 0 ? {$and: filters} : {})\n      .sort({[sortField]: sortOrder * -1, _id: sortOrder * -1})\n      .limit(pageSize + 1);\n    for (const item of populates) {\n      query = query.populate(item);\n    }\n\n    const data = await query.exec();\n\n    return {\n      data: data.length === pageSize + 1 ? data.slice(0, pageSize - 1).reverse() : [...data].reverse(),\n      before: data.length === pageSize + 1 ? encodeBase64({\n        sortFieldValue: data[pageSize - 1][sortField],\n        secondSortValue: data[pageSize - 1]._id,\n      }) : undefined,\n      after: encodeBase64({\n        sortFieldValue: data[0][sortField],\n        secondSortValue: data[0]._id,\n      }),\n    };\n  } else {\n    let query = model.find(filters.length > 0 ? {$and: filters} : {})\n      .sort({[sortField]: sortOrder, _id: sortOrder})\n      .limit(pageSize + 1);\n    for (const item of populates) {\n      query = query.populate(item);\n    }\n    const data = await query.exec();\n\n    return {\n      data: data.length === pageSize + 1 ? data.slice(0, pageSize) : data,\n      before: after ? encodeBase64({sortFieldValue: data[0][sortField], secondSortValue: data[0]._id}) : undefined,\n      after: data.length === pageSize + 1 ? encodeBase64({sortFieldValue: data[pageSize - 1][sortField], secondSortValue: data[pageSize - 1]._id}) : undefined,\n    };\n  }\n};\n"],"file":"buildCursorPaging.js"}