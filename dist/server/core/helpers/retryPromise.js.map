{"version":3,"sources":["../../../../src/server/core/helpers/retryPromise.ts"],"names":["retryPromise","promise","times","timeout","count","Error","undefined"],"mappings":";;;;;;;;;AAAA;;;;;;;;AAEO,IAAMA,YAAY;AAAA;AAAA;AAAA;AAAA;AAAA,4BAAG,iBAAUC,OAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAA+BC,YAAAA,KAA/B,2DAAuC,CAAvC;AAA0CC,YAAAA,OAA1C,2DAAoD,KAApD;AACtBC,YAAAA,KADsB,GACd,CADc;;AAAA,kBAEtBF,KAAK,GAAG,CAFc;AAAA;AAAA;AAAA;;AAAA,kBAGlBG,KAAK,CAAC,gCAAD,CAHa;;AAAA;AAAA,kBAKtBF,OAAO,GAAG,CALY;AAAA;AAAA;AAAA;;AAAA,kBAMlBE,KAAK,CAAC,kCAAD,CANa;;AAAA;AAAA,kBAQnBD,KAAK,IAAIF,KARU;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA,mBAUT,sBAAeD,OAAf,EAAwBE,OAAxB,CAVS;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA,kBAalBC,KAAK,GAAGF,KAbU;AAAA;AAAA;AAAA;;AAcpBE,YAAAA,KAAK;AAde;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA,6CAoBnBE,SApBmB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAZN,YAAY;AAAA;AAAA;AAAA,GAAlB","sourcesContent":["import { promiseTimeout } from '@app/core';\n\nexport const retryPromise = async <T>(promise: Promise<T>, times = 3, timeout = 30000): Promise<T | undefined> => {\n  let count = 1;\n  if (times < 0) {\n    throw Error('invalid times to retry promise');\n  }\n  if (timeout < 0) {\n    throw Error('invalid timeout to retry promise');\n  }\n  while (count <= times) {\n    try {\n      return await promiseTimeout(promise, timeout);\n    }\n    catch (ex) {\n      if (count < times) {\n        count++;\n      } else {\n        throw ex;\n      }\n    }\n  }\n  return undefined;\n};\n"],"file":"retryPromise.js"}