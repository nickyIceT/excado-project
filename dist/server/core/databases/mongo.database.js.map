{"version":3,"sources":["../../../../src/server/core/databases/mongo.database.ts"],"names":["startDatabase","connectionString","useNewUrlParser","getId","Types","ObjectId","toString","removeId","entity","savedEntity","id","addIsAuditableSchema","schema","createdBy","String","createdAt","Number","lastModifiedBy","lastModifiedAt","addIsDeletableSchema","deletedBy","deletedAt","isDeleted","getPaginationResult","query","mongoQuery","paginationMongoQuery","first","limit","last","orderBy","split","undefined","fieldToOrder","exec","documents","edges","filter","_document","index","length","map","document","node","cursor","pageInfo","hasNextPage","endCursor"],"mappings":"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","sourcesContent":["import { Schema, SchemaDefinition, Types, connect, model, DocumentQuery, Document } from 'mongoose';\nimport { ObjectId } from 'mongodb';\nimport { Aggregate, PaginationQuery, encodeBase64 } from '@app/core';\nimport _ from 'lodash';\n\nexport const startDatabase = async (connectionString: string) => {\n  await connect(connectionString, { useNewUrlParser: true });\n};\n\nexport const getId = () => new Types.ObjectId().toString();\n\nexport const removeId = <T extends Aggregate>(entity: T): T => {\n  const savedEntity = { ...entity };\n  delete savedEntity.id;\n  return savedEntity;\n};\n\nexport const addIsAuditableSchema = (schema: SchemaDefinition): SchemaDefinition => {\n  return {\n    ...schema,\n    createdBy: String,\n    createdAt: Number,\n    lastModifiedBy: String,\n    lastModifiedAt: Number,\n  };\n};\n\nexport const addIsDeletableSchema = (schema: SchemaDefinition): SchemaDefinition => {\n  return {\n    ...schema,\n    deletedBy: String,\n    deletedAt: Number,\n    isDeleted: String,\n  };\n};\n\nexport const getPaginationResult = async <T extends Aggregate>(query: PaginationQuery, mongoQuery: DocumentQuery<Document[], Document, {}>) => {\n  const paginationMongoQuery = query.first\n    ? mongoQuery.limit(query.first + 1)\n    : query.last\n      ? mongoQuery.limit(query.last + 1)\n      : mongoQuery;\n  const [fieldToOrder] = query.orderBy ? query.orderBy.split('_') : [undefined];\n  const documents = await paginationMongoQuery.exec() as any as T[];\n  const edges = documents.filter((_document, index) => index < documents.length - 1)\n    .map((document) => ({ node: document }));\n  const cursor = fieldToOrder ? encodeBase64({ [fieldToOrder]: documents[documents.length - 1][fieldToOrder] }) : undefined;\n\n  return query.first\n    ? {\n      edges,\n      pageInfo: {\n        hasNextPage: query.first > documents.length,\n        endCursor: cursor,\n      },\n    }\n    : query.last\n      ? {\n        edges,\n        pageInfo: {\n          hasNextPage: query.last > documents.length,\n          endCursor: cursor,\n        },\n      }\n      : {\n        edges,\n        pageInfo: {\n        },\n      };\n};\n\nexport {\n  Schema,\n  ObjectId,\n  model,\n};\n"],"file":"mongo.database.js"}