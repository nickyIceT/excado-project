{"version":3,"sources":["../../../src/server/scripts/seedDb.ts"],"names":["createAdministratorRole","rootDir","rootLocation","moduleNames","excludedModules","permissions","moduleName","indexOf","permissionsURL","modulePermissions","require","PERMISSIONS","Object","keys","forEach","aggregate","item","push","error","console","log","administrator","name","description","isDefault","isActive","roleRepository","create","createAdministratorUser","administratorRoleId","admin","initializeApp","credential","cert","projectId","config","firebase","serviceAccount","clientEmail","privateKey","databaseURL","auth","createUser","email","emailVerified","password","displayName","newUser","findById","administratorRole","setCustomUserClaims","uid","roles","_id","avatarUrl","province","userRepository","id","phoneNo","phoneNumber","familyName","givenName","fullName","loginDetail","provider","createdAt","Date","getTime","createdBy","completeSignUp","mongoose","connect","database","connectionString","useNewUrlParser","process","exit"],"mappings":"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","sourcesContent":["import mongoose from 'mongoose';\nimport { config } from '@app/config';\nimport { readdir } from 'fs-extra';\nimport { rootLocation } from '@app/core';\nimport { roleRepository, userRepository } from '@app/auth';\nimport admin from 'firebase-admin';\n\nconst createAdministratorRole = async () => {\n  const rootDir = `${rootLocation}/server/modules`;\n  const moduleNames = await readdir(rootDir);\n  const excludedModules: string[] = ['.DS_Store'];\n  const permissions: string[] = [];\n\n  for (const moduleName of moduleNames) {\n    if (excludedModules.indexOf(moduleName) !== -1) {\n      continue;\n    }\n    const permissionsURL = `../modules/${moduleName}/permissions`;\n    try {\n      const modulePermissions: any = require(permissionsURL).PERMISSIONS;\n      Object.keys(modulePermissions).forEach((aggregate) => {\n        Object.keys(modulePermissions[aggregate]).forEach((item) => permissions.push(modulePermissions[aggregate][item]));\n      });\n    } catch (error) {\n      // tslint:disable-next-line:no-console\n      console.log(error);\n    }\n  }\n\n  const administrator = {\n    name: 'admin',\n    description: 'Site administrator',\n    permissions,\n    isDefault: false,\n    isActive: true,\n  };\n\n  return await roleRepository.create(administrator as any);\n};\n\nconst createAdministratorUser = async (administratorRoleId: string) => {\n  admin.initializeApp({\n    credential: admin.credential.cert({\n      projectId: config.firebase.serviceAccount['project_id'],\n      clientEmail: config.firebase.serviceAccount['client_email'],\n      privateKey: config.firebase.serviceAccount['private_key'],\n    }),\n    databaseURL: config.firebase.databaseURL,\n  });\n\n  const newUser = await admin.auth().createUser({\n    email: 'admin@timmay.vn',\n    emailVerified: true,\n    password: 'timmayadmin',\n    displayName: 'Timmay Admin',\n  });\n\n  const administratorRole = await roleRepository.findById(administratorRoleId);\n\n  await admin.auth().setCustomUserClaims(newUser.uid, {\n    roles: [(administratorRole as any)._id],\n    permissions: administratorRole.permissions,\n    avatarUrl: '',\n    province: '',\n  });\n\n  await userRepository.create({\n    id: newUser.uid,\n    email: newUser.email,\n    phoneNo: newUser.phoneNumber,\n    familyName: 'Timmay',\n    givenName: 'Admin',\n    fullName: 'Timmay Admin',\n    loginDetail: {\n        email: newUser.email,\n        provider: 'email',\n      } as any,\n    roles: [(administratorRole as any)._id],\n    createdAt: new Date().getTime(),\n    createdBy: 'timmay-admin',\n    isActive: true,\n    completeSignUp: false,\n  } as any);\n};\n\n(async () => {\n    await mongoose.connect(config.database.connectionString, { useNewUrlParser: true });\n    const administratorRoleId = await createAdministratorRole();\n    await createAdministratorUser(administratorRoleId);\n\n    process.exit();\n})();\n"],"file":"seedDb.js"}