{"version":3,"sources":["../../../src/server/scripts/importMetadata.ts"],"names":["convertVietnamese","str","result","toLowerCase","replace","trim","importProvinces","provincesPromises","provinces","map","val","provinceRepository","create","Promise","all","importWeightRanges","weightRange","id","min","max","undefined","weightRangePromises","forEach","item","push","weightRangeRepository","_id","createdAt","Date","getTime","importRentalPeriods","rentalPeriods","rentalPeriodPromises","rentalPeriodRepository","importCategories","workbook","categoriesWorksheet","Sheets","SheetNames","categoriesSheetAsJson","utils","sheet_to_json","header","categories","categoryPromises","slug","categoryRepository","name","imageUrl","totalNews","importBrands","brandsWorksheet","brandsSheetAsJson","brands","brandPromises","toLocaleLowerCase","brandRepository","logoImage","importBrandModels","sheetName","sheetData","brandName","split","modelPromises","slice","selectedBrand","filter","brand","selectedCategory","category","String","modelRepository","console","log","length","importModels","CategoryModel","find","exec","BrandModel","brandsWithModels","importMetadata","mongoose","connect","config","database","connectionString","useNewUrlParser","args","process","argv","exit","indexOf"],"mappings":"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","sourcesContent":["import { readFile, utils } from 'xlsx';\nimport { brandRepository, BrandModel } from '../modules/machine-news/aggregates/brands/brands.repository';\nimport { config } from '@app/config';\nimport mongoose from 'mongoose';\nimport { categoryRepository, CategoryModel } from '../modules/machine-news/aggregates/categories/categories.repository';\nimport { modelRepository, Brand, Category } from '@app/machine-news';\nimport slugify from 'slugify';\nimport { startCase } from 'lodash';\nimport provinces from './provinces';\nimport { provinceRepository } from '../modules/machine-news/aggregates/provinces/provinces.repository';\nimport { weightRangeRepository } from '../modules/machine-news/aggregates/weight-ranges/weight-ranges.repository';\nimport { rentalPeriodRepository } from '../modules/machine-news/aggregates/rental-periods/rental-periods.repository';\n\n// tslint:disable:no-console\nconst convertVietnamese = (str: string) => {\n  let result = str.toLowerCase();\n  result = result.replace(/à|á|ạ|ả|ã|â|ầ|ấ|ậ|ẩ|ẫ|ă|ằ|ắ|ặ|ẳ|ẵ/gi, 'a');\n  result = result.replace(/è|é|ẹ|ẻ|ẽ|ê|ề|ế|ệ|ể|ễ/gi, 'e');\n  result = result.replace(/ì|í|ị|ỉ|ĩ/gi, 'i');\n  result = result.replace(/ò|ó|ọ|ỏ|õ|ô|ồ|ố|ộ|ổ|ỗ|ơ|ờ|ớ|ợ|ở|ỡ/gi, 'o');\n  result = result.replace(/ù|ú|ụ|ủ|ũ|ư|ừ|ứ|ự|ử|ữ/gi, 'u');\n  result = result.replace(/ỳ|ý|ỵ|ỷ|ỹ/gi, 'y');\n  result = result.replace(/đ/gi, 'd');\n  result = result.replace(/!|@|%|\\^|\\*|\\(|\\)|\\+|\\=|\\<|\\>|\\?|\\/|,|\\.|\\:|\\;|\\'|\\\"|\\&|\\#|\\[|\\]|~|\\$|_|`|-|{|}|\\||\\\\/gi, ' ');\n  result = result.replace(/ + /gi, ' ');\n  result = result.trim();\n  return result;\n};\n\nconst importProvinces = async () => {\n  const provincesPromises = provinces.map((val: any) => {\n    return provinceRepository.create(val);\n  });\n  await Promise.all(provincesPromises);\n};\n\nconst importWeightRanges = async () => {\n  const weightRange = [\n    { id: '5c779ea03b2bb3480e255e41', min: 1, max: 4 },\n    { id: '5c779ea03b2bb3480e255e42', min: 4, max: 11 },\n    { id: '5c779ea03b2bb3480e255e43', min: 11, max: 19 },\n    { id: '5c779ea03b2bb3480e255e44', min: 19, max: 29 },\n    { id: '5c779ea03b2bb3480e255e45', min: 29, max: 39 },\n    { id: '5c779ea03b2bb3480e255e46', min: 39, max: 55 },\n    { id: '5c779ea03b2bb3480e255e47', min: 55, max: 75 },\n    { id: '5c779ea03b2bb3480e255e48', min: 80, max: 120 },\n    { id: '5c779ea03b2bb3480e255e49', min: 120, max: 180 },\n    { id: '5c779ea03b2bb3480e255e4a', min: 180, max: 250 },\n    { id: '5c779ea03b2bb3480e255e4b', min: 250, max: undefined },\n  ];\n\n  const weightRangePromises: any = [];\n  weightRange.forEach((item) => {\n    weightRangePromises.push(weightRangeRepository.create({\n      _id: item.id,\n      min: item.min,\n      max: item.max,\n      createdAt: new Date().getTime(),\n    } as any));\n  });\n  await Promise.all(weightRangePromises);\n};\n\nconst importRentalPeriods = async () => {\n  const rentalPeriods = [\n    { id: '5c779f4535fdfd4c393f3847', min: 1, max: 3 },\n    { id: '5c779f4535fdfd4c393f3848', min: 3, max: 6 },\n    { id: '5c779f4535fdfd4c393f3849', min: 6, max: 12 },\n    { id: '5c779f4535fdfd4c393f384a', min: 12, max: undefined },\n  ];\n\n  const rentalPeriodPromises: any = [];\n  rentalPeriods.forEach((item) => {\n    rentalPeriodPromises.push(rentalPeriodRepository.create({\n      _id: item.id,\n      min: item.min,\n      max: item.max,\n      createdAt: new Date().getTime(),\n    } as any));\n  });\n  await Promise.all(rentalPeriodPromises);\n};\n\nconst importCategories = async () => {\n  const workbook = readFile(`excado-data.xlsx`);\n\n  const categoriesWorksheet = workbook.Sheets[workbook.SheetNames[1]];\n  const categoriesSheetAsJson = utils.sheet_to_json(categoriesWorksheet, { header: 'A' });\n  const categories = categoriesSheetAsJson.map((item: any) => item['B']);\n  const categoryPromises = categories.map((item: any) => {\n    const slug = slugify(convertVietnamese(item));\n\n    return categoryRepository.create({\n      name: item,\n      slug,\n      imageUrl: `/static/images/categories/${slug}.jpg`,\n      totalNews: 0,\n      createdAt: new Date().getTime(),\n    });\n  });\n  await Promise.all(categoryPromises);\n};\n\nconst importBrands = async () => {\n  const workbook = readFile(`excado-data.xlsx`);\n\n  const brandsWorksheet = workbook.Sheets[workbook.SheetNames[2]];\n  const brandsSheetAsJson = utils.sheet_to_json(brandsWorksheet, { header: 'A' });\n  const brands = brandsSheetAsJson.map((item: any) => startCase(item['A'].toLowerCase().trim().replace('-', '8')).replace(' 8 ', '-'));\n  const brandPromises = brands.map((item: any) => {\n    const slug = slugify(item.toLocaleLowerCase());\n\n    return brandRepository.create({\n      slug,\n      name: item,\n      logoImage: `/static/images/brands/${slug}.jpg`,\n      totalNews: 0,\n      createdAt: new Date().getTime(),\n    });\n  });\n  await Promise.all(brandPromises);\n};\n\nconst importBrandModels = async (sheetName: string, sheetData: any, categories: any, brands: any) => {\n  const brandName = sheetName.split(' ')[1];\n  const modelPromises: any = [];\n  sheetData.slice(3).forEach((item: any) => {\n    const selectedBrand = brands.filter((brand: Brand) => brand.slug === slugify(brandName.toLowerCase()))[0];\n    const selectedCategory = categories.filter((category: Category) => category.slug === slugify(convertVietnamese(String(item['C']))))[0];\n\n    if (selectedBrand && selectedCategory) {\n      modelPromises.push(modelRepository.create({\n        name: item['D'],\n        slug: slugify(String(item['D'])),\n        brand: selectedBrand._id,\n        category: selectedCategory._id,\n        totalNews: 0,\n        createdAt: new Date().getTime(),\n      }));\n    }\n  });\n\n  console.log(`import brand models ${sheetName}`, modelPromises.length);\n  await Promise.all(modelPromises);\n};\n\nconst importModels = async () => {\n  const workbook = readFile(`excado-data.xlsx`);\n\n  const categories = await CategoryModel.find().exec();\n  const brands = await BrandModel.find().exec();\n  const brandsWithModels = workbook.SheetNames.slice(4);\n  const modelPromises = brandsWithModels.map((item: any) => importBrandModels(\n    item,\n    utils.sheet_to_json(workbook.Sheets[item], { header: 'A' }),\n    categories,\n    brands,\n  ));\n\n  await Promise.all(modelPromises);\n};\n\nconst importMetadata = async () => {\n  await mongoose.connect(config.database.connectionString, { useNewUrlParser: true });\n\n  const args = process.argv.slice(2);\n  if (args.length === 0) {\n    console.log(`\n      Invalid args.\n      Please provide type of metadatas you want to import: ['provinces', 'categories', 'brands', 'models'].\n      Ex: - yarn importMetadata -- provinces\n          - yarn importMetadata -- categories models brands\n    `);\n    process.exit();\n  } else {\n    if (args.indexOf('provinces') > -1) {\n      await importProvinces();\n    }\n\n    if (args.indexOf('categories') > -1) {\n      await importCategories();\n    }\n\n    if (args.indexOf('brands') > -1) {\n      await importBrands();\n    }\n\n    if (args.indexOf('models') > -1) {\n      await importModels();\n    }\n\n    if (args.indexOf('weightRanges') > -1) {\n      await importWeightRanges();\n    }\n\n    if (args.indexOf('rentalPeriods') > -1) {\n      await importRentalPeriods();\n    }\n\n    console.log(`Import metadata success`);\n    process.exit();\n  }\n};\n\nimportMetadata();\n"],"file":"importMetadata.js"}