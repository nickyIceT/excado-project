tags:
- name: auth
  description: Auth operations for end-users
- name: users
  description: Admin operations about users
- name: profile
  description: User operations about their profile
- name: roles
  description: Admin operations about roles
- name: permissions
  description: Permissions operations
paths:
  /auth:
    post:
      tags:
      - auth
      summary: Register user
      operationId: registerUser
      requestBody:
        $ref: '#/components/schemas/RegisterUserPayload'
      responses:
        200:
          description: successful operation
        201:
          description: successful operation
        400:
          description: bad request
        401:
          description: Token is invalid or expired
        500:
          description: internal server error
  /permissions:
    get:
      tags:
      - permissions
      summary: Find permissions list of all modules
      operationId: findPermissions
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FindPermissionsResult'
        201:
          description: successful operation
        400:
          description: bad request
        401:
          description: Token is invalid or expired
        500:
          description: internal server error
  /roles/customs/check-name-exist/{roleName}:
    get:
      tags:
      - roles
      summary: Check role name exist
      operationId: checkRoleNameExist
      parameters:
      - name: roleName
        in: path
        description: roleName
        required: true
        schema:
          type: string
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CheckRoleNameExistResult'
        400:
          description: bad request
        401:
          description: Token is invalid or expired
        500:
          description: internal server error
      security:
      - Bearer: []
  /roles/customs/get-all:
    get:
      tags:
      - roles
      summary: Find all roles
      operationId: getAllRoles
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetAllRolesResult'
        400:
          description: bad request
        401:
          description: Token is invalid or expired
        500:
          description: internal server error
  /roles/{roleId}:
    get:
      tags:
      - roles
      summary: Find role by id
      operationId: findRoleById
      parameters:
      - name: roleId
        in: path
        description: roleId
        required: true
        schema:
          type: string
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Role'
        400:
          description: bad request
        401:
          description: Token is invalid or expired
        500:
          description: internal server error
      security:
      - Bearer: []
    patch:
      tags:
      - roles
      summary: Update role
      operationId: updateRole
      parameters:
      - name: roleId
        in: path
        description: roleId
        required: true
        schema:
          type: string
      requestBody:
        $ref: '#/components/requestBodies/UpdateRolePayload'
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Role'
        400:
          description: bad request
        401:
          description: Token is invalid or expired
        500:
          description: internal server error
      security:
      - Bearer: []
  /roles:
    get:
      tags:
      - roles
      summary: Find roles
      operationId: findRoles
      parameters:
      - name: search
        in: query
        description: search
        required: false
        schema:
          type: string
      - name: permissions
        in: query
        description: filter by permissions
        required: false
        schema:
          type: array
          items:
            type: string
      - name: first
        in: query
        description: number of records returned
        required: true
        schema:
          type: string
      - name: sortBy
        in: query
        description: sort field
        required: true
        schema:
          type: string
      - name: before
        in: query
        description: before token
        required: false
        schema:
          type: string
      - name: after
        in: query
        description: after token
        required: false
        schema:
          type: string
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FindRolesResult'
        400:
          description: bad request
        401:
          description: unauthorize
        500:
          description: internal server error
      security:
      - Bearer: []
    post:
      tags:
      - roles
      summary: Create role
      operationId: createRole
      requestBody:
        $ref: '#/components/requestBodies/CreateRolePayload'
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Role'
        400:
          description: bad request
        401:
          description: Token is invalid or expired
        500:
          description: internal server error
      security:
      - Bearer: []
  /profiles:
    get:
      tags:
      - profile
      summary: Find profile
      operationId: findProfile
      parameters:
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        400:
          description: bad request
        401:
          description: Token is invalid or expired
        500:
          description: internal server error
      security:
      - Bearer: []
  /profiles/{userId}:
    get:
      tags:
      - profile
      summary: Find use profile for guess view
      operationId: findPublicProfile
      parameters:
      - name: userId
        in: path
        description: userId
        required: true
        schema:
          type: string
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        400:
          description: bad request
        401:
          description: Token is invalid or expired
        500:
          description: internal server error
      security:
      - Bearer: []
    patch:
      tags:
      - profile
      summary: Update profile
      operationId: updateProfile
      parameters:
      - name: userId
        in: path
        description: userId
        required: true
        schema:
          type: string
      requestBody:
        $ref: '#/components/requestBodies/UpdateProfilePayload'
      responses:
        200:
          description: successful operation
        201:
          description: successful operation
        400:
          description: bad request
        401:
          description: Token is invalid or expired
        500:
          description: internal server error
      security:
      - Bearer: []
  /users:
    get:
      tags:
      - users
      summary: Find users
      operationId: findUsers
      parameters:
      - name: search
        in: query
        description: search
        required: false
        schema:
          type: string
      - name: roles
        in: query
        description: filter by roles
        required: false
        schema:
          type: array
          items:
            type: string
      - name: first
        in: query
        description: number of records returned
        required: true
        schema:
          type: number
      - name: sortBy
        in: query
        description: sort field
        required: true
        schema:
          type: string
      - name: before
        in: query
        description: before token
        required: false
        schema:
          type: integer
          format: int32
      - name: after
        in: query
        description: after token
        required: false
        schema:
          type: integer
          format: int32
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FindUserResult'
        400:
          description: bad request
        401:
          description: unauthorize
        500:
          description: internal server error
      security:
      - Bearer: []
    post:
      tags:
      - users
      summary: Create user
      operationId: createUser
      requestBody:
        $ref: '#/components/requestBodies/CreateUserPayload'
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        201:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        400:
          description: bad request
        401:
          description: Token is invalid or expired
        500:
          description: internal server error
      security:
      - Bearer: []
  /users/customs/check-phone-number-exist/{phoneNo}:
    get:
      tags:
      - users
      summary: Check phone number exist
      operationId: checkPhoneNoExist
      parameters:
      - name: phoneNo
        in: path
        description: phoneNo
        required: true
        schema:
          type: string
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CheckPhoneNoExistResult'
        400:
          description: bad request
        401:
          description: Token is invalid or expired
        500:
          description: internal server error
      security:
      - Bearer: []
  /users/customs/check-email-exist/{email}:
    get:
      tags:
      - users
      summary: Check email exist
      operationId: checkEmailExist
      parameters:
      - name: email
        in: path
        description: email
        required: true
        schema:
          type: string
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CheckEmailExistResult'
        400:
          description: bad request
        401:
          description: Token is invalid or expired
        500:
          description: internal server error
      security:
      - Bearer: []
  /users/{userId}:
    get:
      tags:
      - users
      summary: Find user by id
      operationId: findUserById
      parameters:
      - name: userId
        in: path
        description: userId
        required: true
        schema:
          type: string
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        400:
          description: bad request
        401:
          description: Token is invalid or expired
        500:
          description: internal server error
      security:
      - Bearer: []
    patch:
      tags:
      - users
      summary: Update user
      operationId: updateUser
      parameters:
      - name: userId
        in: path
        description: userId
        required: true
        schema:
          type: string
      requestBody:
        $ref: '#/components/requestBodies/UpdateUserPayload'
      responses:
        200:
          description: successful operation
        201:
          description: successful operation
        400:
          description: bad request
        401:
          description: Token is invalid or expired
        500:
          description: internal server error
      security:
      - Bearer: []
components:
  schemas:
    GetAllRolesResult:
      type: object
      properties:
        roles:
          type: array
          items:
            $ref: '#/components/schemas/Role'
    CheckPhoneNoExistResult:
      type: object
      properties:
        phoneNoExist:
          type: boolean
    CheckRoleNameExistResult:
      type: object
      properties:
        roleNameExist:
          type: boolean
    FindPermissionsResult:
      type: any
    RegisterUserPayload:
      type: object
      properties:
        idToken:
          type: string
    FindRolesResult:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/Role'
        before:
          type: any
        after:
          type: any
    ActivateRolePayload:
      type: object
      properties:
        operation:
          type: string
          example: activate
          enum: [activate]
    DeactivateRolePayload:
      type: object
      properties:
        operation:
          type: string
          example: deactivate
          enum: [deactivate]
    UpdateRolePayload:
      type: object
      properties:
        operation:
          type: string
          example: update
          enum: [updateDetail]
        payload:
          type: object
          properties:
            name:
              type: string
              example: admin
            description:
              type: string
              example: admin who can view, create, edit, delete
            permissions:
              type: array
              items:
                type: string
              example:
              - user.create
              - user.delete
    Role:
      type: object
      properties:
        _id:
          type: string
          example: 4ddde319cf4cc467858e8152b58b3283
        name:
          type: string
          example: admin
        description:
          type: string
          example: admin who can view, create, edit, delete
        permissions:
          type: array
          items:
            type: string
          example:
          - user.create
          - user.delete
    CreateRolePayload:
      type: object
      properties:
        name:
          type: string
          example: admin
        description:
          type: string
          example: admin
        permissions:
          type: array
          items:
            type: string
          example:
          - user.create
          - user.delete
    FindUserResult:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/User'
        before:
          type: any
        after:
          type: any
    FacebookLogin:
      type: object
      properties:
        uid:
          type: string
        email:
          type: string
        provider:
          type: string
          enum: [facebook]
    GoogleLogin:
      type: object
      properties:
        uid:
          type: string
        email:
          type: string
        provider:
          type: string
          enum: [google]
    PhoneLogin:
      type: object
      properties:
        phoneNo:
          type: string
        provider:
          type: string
          enum: [phone]
    EmailLogin:
      type: object
      properties:
        email:
          type: string
        provider:
          type: string
          enum: [email]
    User:
      type: object
      properties:
        _id:
          type: string
          example: 4ddde319cf4cc467858e8152b58b3283
        email:
          type: string
          example: thinhtran@techkids.io
        familyName:
          type: string
          example: Nguyen
        givenName:
          type: string
          example: Van A
        fullName:
          type: string
          example: Nguyen Van A
        phoneNo:
          type: string
          example: +84363394468
        address:
          type: string
          example: so 35, hem 6, quan 10, TP.HCM
        description:
          type: string
          example: Yeu the thao, thich choi game, ...
        avatarUrl:
          type: string
          example: 4ddde319cf4cc467858e8152b58b3283.jpg
        province:
          type: string
        dob:
          type: number
          example: 123123123
        gender:
          type: string
          example: male
        loginDetail:
          type: object
          schema:
            oneOf:
            - $ref: '#/components/schemas/FacebookLogin'
            - $ref: '#/components/schemas/GoogleLogin'
            - $ref: '#/components/schemas/PhoneLogin'
            - $ref: '#/components/schemas/EmailLogin'
        roles:
          type: array
          items:
            type: string
          example:
          - 4ddde319cf4cc467858e8152b58b3283
          - 4ddde319cf4cc467858e8152b58b3284
        completeSignUp:
          type: boolean
          example: false
        followBy:
          type: array
          items:
            type: object
            schema:
              - $ref: '#/components/schemas/User'
        isActive:
          type: boolean
          example: true
        createdAt:
          type: number
        createdBy:
          type: number
        counterFollow:
          type: number
        isFollowing:
          type: boolean
    CheckEmailExistResult:
      type: object
      properties:
        emailExist:
          type: boolean
    UpdateUserPayload:
      type: object
      properties:
        operation:
          type: string
          enum: [updateDetail]
        payload:
          type: object
          properties:
            roles:
              type: array
              items:
                type: string
              example:
              - 4ddde319cf4cc467858e8152b58b3283
              - 4ddde319cf4cc467858e8152b58b3333
            familyName:
              type: string
              example: Nguyen
            givenName:
              type: string
              example: Van A
            email:
              type: string
              example: tienloitechkids@gmail.com
    UpdateProfilePayload:
      type: object
      properties:
        operation:
          type: string
          enum: [updateDetail]
        payload:
          type: object
          properties:
            familyName:
              type: string
              example: Nguyen
            givenName:
              type: string
              example: Van A
            phoneNo:
              type: string
              example: +843394465
            email:
              type: string
              example: loitechkids@gmail.com
            address:
              type: string
              example: Hem 6, quan 10, TP.HCM
            description:
              type: string
              example: Yeu the thao, thich am nhac, ...
    ChangePasswordPayload:
      type: object
      properties:
        newPassword:
          type: string
    ActivateUserPayload:
      type: object
      properties:
        operation:
          type: string
          enum: [activate]
    DeactivateUserPayload:
      type: object
      properties:
        operation:
          type: string
          enum: [deactivate]
    UpdateAvatarPayload:
      type: object
      properties:
        operation:
          type: string
          enum: [updateAvatar]
        data:
          type: object
          properties:
            avatarUrl:
              type: string
    CreateUserPayload:
      type: object
      properties:
        email:
          type: string
        password:
          type: string
        roles:
          type: array
          items:
            type: string
          example:
          - 4ddde319cf4cc467858e8152b58b3283
          - 4ddde319cf4cc46785812342b58b3284
        familyName:
          type: string
          example: Nguyen
        givenName:
          type: string
          example: Van A
  requestBodies:
    RegisterUserPayload:
      description: Register user params
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/RegisterUserPayload'
    UpdateRolePayload:
      description: Update role params
      content:
        application/json:
          schema:
            oneOf:
            - $ref: '#/components/schemas/UpdateRolePayload'
            - $ref: '#/components/schemas/ActivateRolePayload'
            - $ref: '#/components/schemas/DeactivateRolePayload'
    CreateRolePayload:
      description: Create role params
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CreateRolePayload'
    CreateUserPayload:
      description: Create user params
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CreateUserPayload'
      required: true
    UpdateProfilePayload:
      description: Update profile params
      content:
        application/json:
          schema:
            oneOf:
            - $ref: '#/components/schemas/UpdateProfilePayload'
            - $ref: '#/components/schemas/UpdateAvatarPayload'
            - $ref: '#/components/schemas/ChangePasswordPayload'
      required: true
    UpdateUserPayload:
      description: Update user params
      content:
        application/json:
          schema:
            oneOf:
            - $ref: '#/components/schemas/UpdateUserPayload'
            - $ref: '#/components/schemas/ActivateUserPayload'
            - $ref: '#/components/schemas/DeactivateUserPayload'
            - $ref: '#/components/schemas/UpdateAvatarPayload'
      required: true
  securitySchemes:
    Bearer:
      type: apiKey
      name: Authorization
      in: header